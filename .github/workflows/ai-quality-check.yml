name: AI Agent Quality Check

on:
  push:
    branches: [main, develop]
    paths:
      - 'agents/**'
      - 'frameworks/**'
      - 'projects/**'
  pull_request:
    branches: [main]
    paths:
      - 'agents/**'
      - 'frameworks/**'
      - 'projects/**'

jobs:
  test-agents:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        framework: [claude-code, microsoft, langchain]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
      
      - name: AI Code Review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Review this AI agent code for:
            
            ## Critical Areas
            1. **Error Handling**: Proper exception handling and recovery mechanisms
            2. **Tool Usage**: Efficient and correct tool integration patterns
            3. **Security**: No exposed credentials, secure data handling
            4. **Performance**: Identify bottlenecks and optimization opportunities
            5. **Agent Patterns**: Adherence to agentic AI best practices
            6. **Emergent Behaviors**: Potential for unexpected agent behaviors
            7. **Memory Management**: Proper cleanup and resource management
            8. **Async Patterns**: Correct async/await usage
            
            ## Framework-Specific Checks (${{ matrix.framework }})
            - MCP server implementation (claude-code)
            - Azure AI integration patterns (microsoft)
            - LangGraph workflow correctness (langchain)
            
            Provide actionable recommendations with code examples.
      
      - name: Code Quality Checks
        run: |
          # Format checking
          black --check agents/${{ matrix.framework }}/ || true
          
          # Linting
          flake8 agents/${{ matrix.framework }}/ --max-line-length=100 --ignore=E203,W503
          
          # Type checking
          mypy agents/${{ matrix.framework }}/ --ignore-missing-imports || true
      
      - name: Run Agent Tests
        run: |
          pytest agents/${{ matrix.framework }}/ \
            -v \
            --cov=agents/${{ matrix.framework }} \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing
      
      - name: Test Agent Interactions
        run: |
          python utils/testing/agent_interaction_tests.py \
            --framework ${{ matrix.framework }} \
            --test-emergent-behaviors \
            --test-multi-agent-coordination
      
      - name: Performance Benchmarking
        run: |
          python utils/monitoring/performance_benchmarks.py \
            --framework ${{ matrix.framework }} \
            --benchmark-memory \
            --benchmark-latency \
            --benchmark-token-usage
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.framework }}
          name: coverage-${{ matrix.framework }}-py${{ matrix.python-version }}
      
      - name: Generate Quality Report
        if: always()
        run: |
          python utils/reporting/quality_report_generator.py \
            --framework ${{ matrix.framework }} \
            --output assets/documents/quality_report_${{ matrix.framework }}.md

  integration-tests:
    runs-on: ubuntu-latest
    needs: test-agents
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Multi-Agent Integration Tests
        run: |
          python utils/testing/multi_agent_integration.py \
            --test-orchestration \
            --test-communication \
            --test-emergent-behaviors \
            --test-swarm-intelligence
      
      - name: Cross-Framework Compatibility
        run: |
          python utils/testing/cross_framework_tests.py \
            --test-interoperability \
            --test-data-exchange \
            --test-coordination-patterns